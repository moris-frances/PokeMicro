
OledTry2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006628  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008d7c  080067b8  080067b8  000167b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f534  0800f534  0002e6b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f534  0800f534  0001f534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f53c  0800f53c  0002e6b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f53c  0800f53c  0001f53c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f540  0800f540  0001f540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000e6b8  20000000  0800f544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  2000e6b8  0801dbfc  0002e6b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000e8a8  0801dbfc  0002e8a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002e6b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb43  00000000  00000000  0002e6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002417  00000000  00000000  0003e22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00040648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  000412f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002120e  00000000  00000000  00041eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa53  00000000  00000000  000630be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c43ec  00000000  00000000  00072b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00136efd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003728  00000000  00000000  00136f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000e6b8 	.word	0x2000e6b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067a0 	.word	0x080067a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000e6bc 	.word	0x2000e6bc
 80001cc:	080067a0 	.word	0x080067a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <OLED_CLS>:
unsigned char font_nrows;                                                       // number of rows in most recent font
unsigned char new_y;                                                            // next line calculated by font

SPI_HandleTypeDef spi_handle;

void OLED_CLS(){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	int j;

    OLED_C_command(0x1D,0x02);                                                  // Set Memory Read/Write mode
 800058a:	2102      	movs	r1, #2
 800058c:	201d      	movs	r0, #29
 800058e:	f000 f82b 	bl	80005e8 <OLED_C_command>
    OLED_C_MemorySize(0x00,0x5F,0x00,0x5F);                                     // whole screen
 8000592:	235f      	movs	r3, #95	; 0x5f
 8000594:	2200      	movs	r2, #0
 8000596:	215f      	movs	r1, #95	; 0x5f
 8000598:	2000      	movs	r0, #0
 800059a:	f000 f963 	bl	8000864 <OLED_C_MemorySize>
    DDRAM_access();
 800059e:	f000 f93f 	bl	8000820 <DDRAM_access>
    for(j = 0 ; j < 9216 ; j++){                                                // black box   96x96=9216
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	e006      	b.n	80005b6 <OLED_CLS+0x32>
        OLED_C_Color(0x00,0x00);                                                // black
 80005a8:	2100      	movs	r1, #0
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 f981 	bl	80008b2 <OLED_C_Color>
    for(j = 0 ; j < 9216 ; j++){                                                // black box   96x96=9216
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3301      	adds	r3, #1
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 80005bc:	dbf4      	blt.n	80005a8 <OLED_CLS+0x24>
    }
    display_font = 1;                                                          // default OLED font - valid values are 6 7 8 10 14 18
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <OLED_CLS+0x58>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]
    display_color = Color_White;                                                // default OLED text colour
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <OLED_CLS+0x5c>)
 80005c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005ca:	601a      	str	r2, [r3, #0]
    new_y = 0;
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <OLED_CLS+0x60>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	2000e6d4 	.word	0x2000e6d4
 80005e0:	20000000 	.word	0x20000000
 80005e4:	2000e6d9 	.word	0x2000e6d9

080005e8 <OLED_C_command>:




void OLED_C_command (uint8_t reg_index, uint8_t reg_value){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	460a      	mov	r2, r1
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	4613      	mov	r3, r2
 80005f6:	71bb      	strb	r3, [r7, #6]
		//Select index addr
	    //OLED_CS = 0;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2101      	movs	r1, #1
 80005fc:	4816      	ldr	r0, [pc, #88]	; (8000658 <OLED_C_command+0x70>)
 80005fe:	f002 fc63 	bl	8002ec8 <HAL_GPIO_WritePin>
		//OLED_DC = 0;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2102      	movs	r1, #2
 8000606:	4814      	ldr	r0, [pc, #80]	; (8000658 <OLED_C_command+0x70>)
 8000608:	f002 fc5e 	bl	8002ec8 <HAL_GPIO_WritePin>
	    // 0=command
		//SPI1_Write(reg_index);
	    HAL_SPI_Transmit(&spi_handle, &reg_index, 1, 1000);
 800060c:	1df9      	adds	r1, r7, #7
 800060e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000612:	2201      	movs	r2, #1
 8000614:	4811      	ldr	r0, [pc, #68]	; (800065c <OLED_C_command+0x74>)
 8000616:	f003 feb6 	bl	8004386 <HAL_SPI_Transmit>

	    //OLED_CS = 1;
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800061a:	2201      	movs	r2, #1
 800061c:	2101      	movs	r1, #1
 800061e:	480e      	ldr	r0, [pc, #56]	; (8000658 <OLED_C_command+0x70>)
 8000620:	f002 fc52 	bl	8002ec8 <HAL_GPIO_WritePin>
	    //Write data to reg
	    //OLED_CS = 0;
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	2101      	movs	r1, #1
 8000628:	480b      	ldr	r0, [pc, #44]	; (8000658 <OLED_C_command+0x70>)
 800062a:	f002 fc4d 	bl	8002ec8 <HAL_GPIO_WritePin>
	    //OLED_DC = 1;                          // 1=data or parameter
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 800062e:	2201      	movs	r2, #1
 8000630:	2102      	movs	r1, #2
 8000632:	4809      	ldr	r0, [pc, #36]	; (8000658 <OLED_C_command+0x70>)
 8000634:	f002 fc48 	bl	8002ec8 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit(&spi_handle, &reg_value, 1, 1000);
 8000638:	1db9      	adds	r1, r7, #6
 800063a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063e:	2201      	movs	r2, #1
 8000640:	4806      	ldr	r0, [pc, #24]	; (800065c <OLED_C_command+0x74>)
 8000642:	f003 fea0 	bl	8004386 <HAL_SPI_Transmit>

	    //OLED_CS = 1;
	    //end
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000646:	2201      	movs	r2, #1
 8000648:	2101      	movs	r1, #1
 800064a:	4803      	ldr	r0, [pc, #12]	; (8000658 <OLED_C_command+0x70>)
 800064c:	f002 fc3c 	bl	8002ec8 <HAL_GPIO_WritePin>

}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	48000400 	.word	0x48000400
 800065c:	2000e6dc 	.word	0x2000e6dc

08000660 <OLED_C_data>:

//Send data to OLED C display
void OLED_C_data(uint8_t data_value){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
    //OLED_CS = 0;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2101      	movs	r1, #1
 800066e:	480c      	ldr	r0, [pc, #48]	; (80006a0 <OLED_C_data+0x40>)
 8000670:	f002 fc2a 	bl	8002ec8 <HAL_GPIO_WritePin>
    //OLED_DC = 1;                          // 1=data or parameter
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000674:	2201      	movs	r2, #1
 8000676:	2102      	movs	r1, #2
 8000678:	4809      	ldr	r0, [pc, #36]	; (80006a0 <OLED_C_data+0x40>)
 800067a:	f002 fc25 	bl	8002ec8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&spi_handle, &data_value, 1, 1000);
 800067e:	1df9      	adds	r1, r7, #7
 8000680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000684:	2201      	movs	r2, #1
 8000686:	4807      	ldr	r0, [pc, #28]	; (80006a4 <OLED_C_data+0x44>)
 8000688:	f003 fe7d 	bl	8004386 <HAL_SPI_Transmit>
    //OLED_CS = 0;
    //end
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800068c:	2201      	movs	r2, #1
 800068e:	2101      	movs	r1, #1
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <OLED_C_data+0x40>)
 8000692:	f002 fc19 	bl	8002ec8 <HAL_GPIO_WritePin>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	48000400 	.word	0x48000400
 80006a4:	2000e6dc 	.word	0x2000e6dc

080006a8 <InitMCU>:
// Init MCU function
void InitMCU(SPI_HandleTypeDef hspi){
 80006a8:	b084      	sub	sp, #16
 80006aa:	b580      	push	{r7, lr}
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	f107 0c08 	add.w	ip, r7, #8
 80006b2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_handle = hspi;
 80006b6:	4b59      	ldr	r3, [pc, #356]	; (800081c <InitMCU+0x174>)
 80006b8:	4618      	mov	r0, r3
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2264      	movs	r2, #100	; 0x64
 80006c0:	4619      	mov	r1, r3
 80006c2:	f005 fbe3 	bl	8005e8c <memcpy>

// Init sequence for 96x96 OLED color module
    //OLED_RST = 0;
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2120      	movs	r1, #32
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ce:	f002 fbfb 	bl	8002ec8 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 80006d2:	200a      	movs	r0, #10
 80006d4:	f001 fee2 	bl	800249c <HAL_Delay>
    //OLED_RST = 1;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80006d8:	2201      	movs	r2, #1
 80006da:	2120      	movs	r1, #32
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e0:	f002 fbf2 	bl	8002ec8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80006e4:	200a      	movs	r0, #10
 80006e6:	f001 fed9 	bl	800249c <HAL_Delay>
    /*  Soft reset */
    /*  Soft reset */
    OLED_C_command(SEPS114A_SOFT_RESET,0x00);                                   // reg 0x01 data IDX=0
 80006ea:	2100      	movs	r1, #0
 80006ec:	2001      	movs	r0, #1
 80006ee:	f7ff ff7b 	bl	80005e8 <OLED_C_command>
    /* Standby ON/OFF*/
    OLED_C_command(SEPS114A_STANDBY_ON_OFF,0x01);                               // reg 0x14 data 0x01 Standby on
 80006f2:	2101      	movs	r1, #1
 80006f4:	2014      	movs	r0, #20
 80006f6:	f7ff ff77 	bl	80005e8 <OLED_C_command>
    HAL_Delay(5);                                                                // Wait for 5ms (1ms Delay Minimum)
 80006fa:	2005      	movs	r0, #5
 80006fc:	f001 fece 	bl	800249c <HAL_Delay>
    OLED_C_command(SEPS114A_STANDBY_ON_OFF,0x00);                               // Standby off   (start display oscillator)
 8000700:	2100      	movs	r1, #0
 8000702:	2014      	movs	r0, #20
 8000704:	f7ff ff70 	bl	80005e8 <OLED_C_command>
    HAL_Delay(5);                                                                // 1ms Delay Minimum (1ms Delay Minimum)
 8000708:	2005      	movs	r0, #5
 800070a:	f001 fec7 	bl	800249c <HAL_Delay>
    /* Display OFF */
    OLED_C_command(SEPS114A_DISPLAY_ON_OFF,0x00);
 800070e:	2100      	movs	r1, #0
 8000710:	2002      	movs	r0, #2
 8000712:	f7ff ff69 	bl	80005e8 <OLED_C_command>
    /* Set Oscillator operation */
    OLED_C_command(SEPS114A_ANALOG_CONTROL,0x40);                               // using external resistor and internal OSC
 8000716:	2140      	movs	r1, #64	; 0x40
 8000718:	200f      	movs	r0, #15
 800071a:	f7ff ff65 	bl	80005e8 <OLED_C_command>
    /* Set frame rate */
    OLED_C_command(SEPS114A_OSC_ADJUST,0x0F);                                   // frame rate : 95Hz
 800071e:	210f      	movs	r1, #15
 8000720:	201a      	movs	r0, #26
 8000722:	f7ff ff61 	bl	80005e8 <OLED_C_command>
    /* Set active display area of panel */
    OLED_C_command(SEPS114A_DISPLAY_X1,0x00);
 8000726:	2100      	movs	r1, #0
 8000728:	2030      	movs	r0, #48	; 0x30
 800072a:	f7ff ff5d 	bl	80005e8 <OLED_C_command>
    OLED_C_command(SEPS114A_DISPLAY_X2,0x5F);                                   // 96 pixels wide
 800072e:	215f      	movs	r1, #95	; 0x5f
 8000730:	2031      	movs	r0, #49	; 0x31
 8000732:	f7ff ff59 	bl	80005e8 <OLED_C_command>
    OLED_C_command(SEPS114A_DISPLAY_Y1,0x00);
 8000736:	2100      	movs	r1, #0
 8000738:	2032      	movs	r0, #50	; 0x32
 800073a:	f7ff ff55 	bl	80005e8 <OLED_C_command>
    OLED_C_command(SEPS114A_DISPLAY_Y2,0x5F);                                   // 96 pixels high
 800073e:	215f      	movs	r1, #95	; 0x5f
 8000740:	2033      	movs	r0, #51	; 0x33
 8000742:	f7ff ff51 	bl	80005e8 <OLED_C_command>
    /* Select the RGB data format and set the initial state of RGB interface port */
    OLED_C_command(SEPS114A_RGB_IF,0x00);                                       // RGB 8bit interface
 8000746:	2100      	movs	r1, #0
 8000748:	20e0      	movs	r0, #224	; 0xe0
 800074a:	f7ff ff4d 	bl	80005e8 <OLED_C_command>
    /* Set RGB polarity */
    OLED_C_command(SEPS114A_RGB_POL,0x00);
 800074e:	2100      	movs	r1, #0
 8000750:	20e1      	movs	r0, #225	; 0xe1
 8000752:	f7ff ff49 	bl	80005e8 <OLED_C_command>
    /* Set display mode control */
    OLED_C_command(SEPS114A_DISPLAY_MODE_CONTROL,0x80);                         // SWAP:BGR, Reduce current : Normal, DC[1:0] : Normal
 8000756:	2180      	movs	r1, #128	; 0x80
 8000758:	20e5      	movs	r0, #229	; 0xe5
 800075a:	f7ff ff45 	bl	80005e8 <OLED_C_command>
    /* Set MCU Interface */
    OLED_C_command(SEPS114A_CPU_IF,0x00);                                       // MPU External interface mode, 8bits
 800075e:	2100      	movs	r1, #0
 8000760:	200d      	movs	r0, #13
 8000762:	f7ff ff41 	bl	80005e8 <OLED_C_command>
    /* Set Memory Read/Write mode */
    OLED_C_command(SEPS114A_MEMORY_WRITE_READ,0x00);
 8000766:	2100      	movs	r1, #0
 8000768:	201d      	movs	r0, #29
 800076a:	f7ff ff3d 	bl	80005e8 <OLED_C_command>
    /* Set row scan direction */
    OLED_C_command(SEPS114A_ROW_SCAN_DIRECTION,0x00);                           // Column : 0 --> Max, Row : 0 \81--> Max
 800076e:	2100      	movs	r1, #0
 8000770:	2009      	movs	r0, #9
 8000772:	f7ff ff39 	bl	80005e8 <OLED_C_command>
    /* Set row scan mode */
    OLED_C_command(SEPS114A_ROW_SCAN_MODE,0x00);                                // Alternate scan mode
 8000776:	2100      	movs	r1, #0
 8000778:	2013      	movs	r0, #19
 800077a:	f7ff ff35 	bl	80005e8 <OLED_C_command>
    /* Set column current */

    OLED_C_command(SEPS114A_COLUMN_CURRENT_R,0x6E);
 800077e:	216e      	movs	r1, #110	; 0x6e
 8000780:	2040      	movs	r0, #64	; 0x40
 8000782:	f7ff ff31 	bl	80005e8 <OLED_C_command>
    OLED_C_command(SEPS114A_COLUMN_CURRENT_G,0x4F);
 8000786:	214f      	movs	r1, #79	; 0x4f
 8000788:	2041      	movs	r0, #65	; 0x41
 800078a:	f7ff ff2d 	bl	80005e8 <OLED_C_command>
    OLED_C_command(SEPS114A_COLUMN_CURRENT_B,0x77);
 800078e:	2177      	movs	r1, #119	; 0x77
 8000790:	2042      	movs	r0, #66	; 0x42
 8000792:	f7ff ff29 	bl	80005e8 <OLED_C_command>
    /* Set row overlap */
    OLED_C_command(SEPS114A_ROW_OVERLAP,0x00);                                  // Band gap only
 8000796:	2100      	movs	r1, #0
 8000798:	2048      	movs	r0, #72	; 0x48
 800079a:	f7ff ff25 	bl	80005e8 <OLED_C_command>
    /* Set discharge time */
    OLED_C_command(SEPS114A_DISCHARGE_TIME,0x01);                               // Discharge time : normal discharge
 800079e:	2101      	movs	r1, #1
 80007a0:	2018      	movs	r0, #24
 80007a2:	f7ff ff21 	bl	80005e8 <OLED_C_command>
    /* Set peak pulse delay */
    OLED_C_command(SEPS114A_PEAK_PULSE_DELAY,0x00);
 80007a6:	2100      	movs	r1, #0
 80007a8:	2016      	movs	r0, #22
 80007aa:	f7ff ff1d 	bl	80005e8 <OLED_C_command>
    /* Set peak pulse width */
    OLED_C_command(SEPS114A_PEAK_PULSE_WIDTH_R,0x02);
 80007ae:	2102      	movs	r1, #2
 80007b0:	203a      	movs	r0, #58	; 0x3a
 80007b2:	f7ff ff19 	bl	80005e8 <OLED_C_command>
    OLED_C_command(SEPS114A_PEAK_PULSE_WIDTH_G,0x02);
 80007b6:	2102      	movs	r1, #2
 80007b8:	203b      	movs	r0, #59	; 0x3b
 80007ba:	f7ff ff15 	bl	80005e8 <OLED_C_command>
    OLED_C_command(SEPS114A_PEAK_PULSE_WIDTH_B,0x02);
 80007be:	2102      	movs	r1, #2
 80007c0:	203c      	movs	r0, #60	; 0x3c
 80007c2:	f7ff ff11 	bl	80005e8 <OLED_C_command>
    /* Set precharge current */
    OLED_C_command(SEPS114A_PRECHARGE_CURRENT_R,0x14);
 80007c6:	2114      	movs	r1, #20
 80007c8:	203d      	movs	r0, #61	; 0x3d
 80007ca:	f7ff ff0d 	bl	80005e8 <OLED_C_command>
    OLED_C_command(SEPS114A_PRECHARGE_CURRENT_G,0x50);
 80007ce:	2150      	movs	r1, #80	; 0x50
 80007d0:	203e      	movs	r0, #62	; 0x3e
 80007d2:	f7ff ff09 	bl	80005e8 <OLED_C_command>
    OLED_C_command(SEPS114A_PRECHARGE_CURRENT_B,0x19);
 80007d6:	2119      	movs	r1, #25
 80007d8:	203f      	movs	r0, #63	; 0x3f
 80007da:	f7ff ff05 	bl	80005e8 <OLED_C_command>
    /* Set row scan on/off  */
    OLED_C_command(SEPS114A_ROW_SCAN_ON_OFF,0x00);                              // Normal row scan
 80007de:	2100      	movs	r1, #0
 80007e0:	2017      	movs	r0, #23
 80007e2:	f7ff ff01 	bl	80005e8 <OLED_C_command>
    /* Set scan off level */
    OLED_C_command(SEPS114A_SCAN_OFF_LEVEL,0x04);                               // VCC_C*0.75
 80007e6:	2104      	movs	r1, #4
 80007e8:	2049      	movs	r0, #73	; 0x49
 80007ea:	f7ff fefd 	bl	80005e8 <OLED_C_command>
    /* Set memory access point */
    OLED_C_command(SEPS114A_DISPLAYSTART_X,0x00);
 80007ee:	2100      	movs	r1, #0
 80007f0:	2038      	movs	r0, #56	; 0x38
 80007f2:	f7ff fef9 	bl	80005e8 <OLED_C_command>
    OLED_C_command(SEPS114A_DISPLAYSTART_Y,0x00);
 80007f6:	2100      	movs	r1, #0
 80007f8:	2039      	movs	r0, #57	; 0x39
 80007fa:	f7ff fef5 	bl	80005e8 <OLED_C_command>
    HAL_Delay(100);
 80007fe:	2064      	movs	r0, #100	; 0x64
 8000800:	f001 fe4c 	bl	800249c <HAL_Delay>
    /* Display ON */
    OLED_C_command(SEPS114A_DISPLAY_ON_OFF,0x01);                               // reg 0x02 display on                         // reg 0x02 display on
 8000804:	2101      	movs	r1, #1
 8000806:	2002      	movs	r0, #2
 8000808:	f7ff feee 	bl	80005e8 <OLED_C_command>

    OLED_CLS();
 800080c:	f7ff feba 	bl	8000584 <OLED_CLS>
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000818:	b004      	add	sp, #16
 800081a:	4770      	bx	lr
 800081c:	2000e6dc 	.word	0x2000e6dc

08000820 <DDRAM_access>:

//Sequence before writing data to memory
void DDRAM_access(){
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
    //OLED_CS = 0;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2101      	movs	r1, #1
 800082a:	480c      	ldr	r0, [pc, #48]	; (800085c <DDRAM_access+0x3c>)
 800082c:	f002 fb4c 	bl	8002ec8 <HAL_GPIO_WritePin>

	//OLED_DC = 0;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);                                                               // 0=command
 8000830:	2200      	movs	r2, #0
 8000832:	2102      	movs	r1, #2
 8000834:	4809      	ldr	r0, [pc, #36]	; (800085c <DDRAM_access+0x3c>)
 8000836:	f002 fb47 	bl	8002ec8 <HAL_GPIO_WritePin>

	//SPI1_Write(reg_index);
	uint8_t command_u8 = SEPS114A_DDRAM_DATA_ACCESS_PORT;
 800083a:	2308      	movs	r3, #8
 800083c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&spi_handle, &command_u8, 1, 100);// instruction 0x08 select DDRAM data access port
 800083e:	1df9      	adds	r1, r7, #7
 8000840:	2364      	movs	r3, #100	; 0x64
 8000842:	2201      	movs	r2, #1
 8000844:	4806      	ldr	r0, [pc, #24]	; (8000860 <DDRAM_access+0x40>)
 8000846:	f003 fd9e 	bl	8004386 <HAL_SPI_Transmit>
    //end
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800084a:	2201      	movs	r2, #1
 800084c:	2101      	movs	r1, #1
 800084e:	4803      	ldr	r0, [pc, #12]	; (800085c <DDRAM_access+0x3c>)
 8000850:	f002 fb3a 	bl	8002ec8 <HAL_GPIO_WritePin>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	48000400 	.word	0x48000400
 8000860:	2000e6dc 	.word	0x2000e6dc

08000864 <OLED_C_MemorySize>:

//Set memory area(address) to write a display data
void OLED_C_MemorySize(uint8_t X1, uint8_t X2, uint8_t Y1, uint8_t Y2){
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4604      	mov	r4, r0
 800086c:	4608      	mov	r0, r1
 800086e:	4611      	mov	r1, r2
 8000870:	461a      	mov	r2, r3
 8000872:	4623      	mov	r3, r4
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	4603      	mov	r3, r0
 8000878:	71bb      	strb	r3, [r7, #6]
 800087a:	460b      	mov	r3, r1
 800087c:	717b      	strb	r3, [r7, #5]
 800087e:	4613      	mov	r3, r2
 8000880:	713b      	strb	r3, [r7, #4]
    OLED_C_command(SEPS114A_MEM_X1,X1);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	4619      	mov	r1, r3
 8000886:	2034      	movs	r0, #52	; 0x34
 8000888:	f7ff feae 	bl	80005e8 <OLED_C_command>
    OLED_C_command(SEPS114A_MEM_X2,X2);
 800088c:	79bb      	ldrb	r3, [r7, #6]
 800088e:	4619      	mov	r1, r3
 8000890:	2035      	movs	r0, #53	; 0x35
 8000892:	f7ff fea9 	bl	80005e8 <OLED_C_command>
    OLED_C_command(SEPS114A_MEM_Y1,Y1);
 8000896:	797b      	ldrb	r3, [r7, #5]
 8000898:	4619      	mov	r1, r3
 800089a:	2036      	movs	r0, #54	; 0x36
 800089c:	f7ff fea4 	bl	80005e8 <OLED_C_command>
    OLED_C_command(SEPS114A_MEM_Y2,Y2);
 80008a0:	793b      	ldrb	r3, [r7, #4]
 80008a2:	4619      	mov	r1, r3
 80008a4:	2037      	movs	r0, #55	; 0x37
 80008a6:	f7ff fe9f 	bl	80005e8 <OLED_C_command>
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd90      	pop	{r4, r7, pc}

080008b2 <OLED_C_Color>:

//Select color
void OLED_C_Color(uint8_t colorMSB, uint8_t colorLSB ){
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	4603      	mov	r3, r0
 80008ba:	460a      	mov	r2, r1
 80008bc:	71fb      	strb	r3, [r7, #7]
 80008be:	4613      	mov	r3, r2
 80008c0:	71bb      	strb	r3, [r7, #6]
    OLED_C_data(colorMSB);
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fecb 	bl	8000660 <OLED_C_data>
    OLED_C_data(colorLSB);
 80008ca:	79bb      	ldrb	r3, [r7, #6]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fec7 	bl	8000660 <OLED_C_data>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <drawChar>:

// below routine is under development and contains many bodges
// put an ascii character on screen
void drawChar(unsigned char x_co_ord, unsigned char y_co_ord, unsigned char ascii_in, uint16_t color, unsigned char OLED_font){
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b089      	sub	sp, #36	; 0x24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4604      	mov	r4, r0
 80008e4:	4608      	mov	r0, r1
 80008e6:	4611      	mov	r1, r2
 80008e8:	461a      	mov	r2, r3
 80008ea:	4623      	mov	r3, r4
 80008ec:	71fb      	strb	r3, [r7, #7]
 80008ee:	4603      	mov	r3, r0
 80008f0:	71bb      	strb	r3, [r7, #6]
 80008f2:	460b      	mov	r3, r1
 80008f4:	717b      	strb	r3, [r7, #5]
 80008f6:	4613      	mov	r3, r2
 80008f8:	807b      	strh	r3, [r7, #2]
// glyph entries follow - 4 bytes (12 bytes extended glyph) -  1 byte Glyph width - 3 bytes offset
// orient 00=normal, 01=270deg, 10=180deg, 11=90deg
// bits per pixel 00=1, 01=2 (anti alias), 1x reserved
// extended glyph 0=normal, 1=extended

    if (OLED_font == 1){
 80008fa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80008fe:	2b01      	cmp	r3, #1
 8000900:	f040 80ba 	bne.w	8000a78 <drawChar+0x19c>
        font_nrows = guiFont_Roboto_Mono11x23_Regular[6];
 8000904:	2217      	movs	r2, #23
 8000906:	4b9f      	ldr	r3, [pc, #636]	; (8000b84 <drawChar+0x2a8>)
 8000908:	701a      	strb	r2, [r3, #0]

        ascii_off = ascii_in & 0x7f;                                            // map high values to low ones
 800090a:	797b      	ldrb	r3, [r7, #5]
 800090c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000910:	74fb      	strb	r3, [r7, #19]
        if(ascii_off >= 32){                                                    // always assume character 0x20 space as first character
 8000912:	7cfb      	ldrb	r3, [r7, #19]
 8000914:	2b1f      	cmp	r3, #31
 8000916:	d902      	bls.n	800091e <drawChar+0x42>
            ascii_off -= 32;                                                    // remap
 8000918:	7cfb      	ldrb	r3, [r7, #19]
 800091a:	3b20      	subs	r3, #32
 800091c:	74fb      	strb	r3, [r7, #19]
        }
        for(row = font_nrows; row > 0; row--){
 800091e:	4b99      	ldr	r3, [pc, #612]	; (8000b84 <drawChar+0x2a8>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	77fb      	strb	r3, [r7, #31]
 8000924:	e088      	b.n	8000a38 <drawChar+0x15c>
            font_pointer = (ascii_off*4)+8;                                     // skip header
 8000926:	7cfb      	ldrb	r3, [r7, #19]
 8000928:	3302      	adds	r3, #2
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	60fb      	str	r3, [r7, #12]
            last_width = guiFont_Roboto_Mono11x23_Regular[font_pointer];               // character width
 800092e:	4a96      	ldr	r2, [pc, #600]	; (8000b88 <drawChar+0x2ac>)
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4413      	add	r3, r2
 8000934:	781a      	ldrb	r2, [r3, #0]
 8000936:	4b95      	ldr	r3, [pc, #596]	; (8000b8c <drawChar+0x2b0>)
 8000938:	701a      	strb	r2, [r3, #0]
            font_offset = guiFont_Roboto_Mono11x23_Regular[font_pointer+1];            // 3 bytes offset value
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	3301      	adds	r3, #1
 800093e:	4a92      	ldr	r2, [pc, #584]	; (8000b88 <drawChar+0x2ac>)
 8000940:	5cd3      	ldrb	r3, [r2, r3]
 8000942:	617b      	str	r3, [r7, #20]
            font_offset |= guiFont_Roboto_Mono11x23_Regular[font_pointer+2] << 8;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3302      	adds	r3, #2
 8000948:	4a8f      	ldr	r2, [pc, #572]	; (8000b88 <drawChar+0x2ac>)
 800094a:	5cd3      	ldrb	r3, [r2, r3]
 800094c:	021b      	lsls	r3, r3, #8
 800094e:	461a      	mov	r2, r3
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	4313      	orrs	r3, r2
 8000954:	617b      	str	r3, [r7, #20]
            font_offset |= (unsigned long)guiFont_Roboto_Mono11x23_Regular[font_pointer+3] << 16;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	3303      	adds	r3, #3
 800095a:	4a8b      	ldr	r2, [pc, #556]	; (8000b88 <drawChar+0x2ac>)
 800095c:	5cd3      	ldrb	r3, [r2, r3]
 800095e:	041b      	lsls	r3, r3, #16
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	4313      	orrs	r3, r2
 8000964:	617b      	str	r3, [r7, #20]
            font_offset += row;
 8000966:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800096a:	697a      	ldr	r2, [r7, #20]
 800096c:	4413      	add	r3, r2
 800096e:	617b      	str	r3, [r7, #20]
            if(last_width > 8){                                                 // two bytes in each row
 8000970:	4b86      	ldr	r3, [pc, #536]	; (8000b8c <drawChar+0x2b0>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b08      	cmp	r3, #8
 8000976:	d904      	bls.n	8000982 <drawChar+0xa6>
                font_offset += row;
 8000978:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	4413      	add	r3, r2
 8000980:	617b      	str	r3, [r7, #20]
            }
            if(last_width > 16){                                                // 3 bytes in each row
 8000982:	4b82      	ldr	r3, [pc, #520]	; (8000b8c <drawChar+0x2b0>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b10      	cmp	r3, #16
 8000988:	d904      	bls.n	8000994 <drawChar+0xb8>
                font_offset += row;
 800098a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800098e:	697a      	ldr	r2, [r7, #20]
 8000990:	4413      	add	r3, r2
 8000992:	617b      	str	r3, [r7, #20]
            }
            font_row = guiFont_Roboto_Mono11x23_Regular[font_offset];                  // build up row from 1, 2 or 3 bytes
 8000994:	4a7c      	ldr	r2, [pc, #496]	; (8000b88 <drawChar+0x2ac>)
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	4413      	add	r3, r2
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	61bb      	str	r3, [r7, #24]
            if(last_width > 8){
 800099e:	4b7b      	ldr	r3, [pc, #492]	; (8000b8c <drawChar+0x2b0>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b08      	cmp	r3, #8
 80009a4:	d908      	bls.n	80009b8 <drawChar+0xdc>
                font_row |= (guiFont_Roboto_Mono11x23_Regular[font_offset+1]) << 8;
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	3301      	adds	r3, #1
 80009aa:	4a77      	ldr	r2, [pc, #476]	; (8000b88 <drawChar+0x2ac>)
 80009ac:	5cd3      	ldrb	r3, [r2, r3]
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	461a      	mov	r2, r3
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]
            }
            if(last_width > 16){
 80009b8:	4b74      	ldr	r3, [pc, #464]	; (8000b8c <drawChar+0x2b0>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b10      	cmp	r3, #16
 80009be:	d907      	bls.n	80009d0 <drawChar+0xf4>
                font_row |= (unsigned long)(guiFont_Roboto_Mono11x23_Regular[font_offset+2]) << 16;   // force long arithmetic
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	3302      	adds	r3, #2
 80009c4:	4a70      	ldr	r2, [pc, #448]	; (8000b88 <drawChar+0x2ac>)
 80009c6:	5cd3      	ldrb	r3, [r2, r3]
 80009c8:	041b      	lsls	r3, r3, #16
 80009ca:	69ba      	ldr	r2, [r7, #24]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	61bb      	str	r3, [r7, #24]
            }
            for(col = 0; col <= last_width ; col++){                            // count through pixels in row
 80009d0:	2300      	movs	r3, #0
 80009d2:	77bb      	strb	r3, [r7, #30]
 80009d4:	e025      	b.n	8000a22 <drawChar+0x146>
                DDRAM_access();
 80009d6:	f7ff ff23 	bl	8000820 <DDRAM_access>
                if((font_row >> col)&0x01){
 80009da:	7fbb      	ldrb	r3, [r7, #30]
 80009dc:	69ba      	ldr	r2, [r7, #24]
 80009de:	fa22 f303 	lsr.w	r3, r2, r3
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00c      	beq.n	8000a04 <drawChar+0x128>
                    drawPixel(x_co_ord+col,y_co_ord+row,color);                 // if bit is set, draw coloured pixel
 80009ea:	79fa      	ldrb	r2, [r7, #7]
 80009ec:	7fbb      	ldrb	r3, [r7, #30]
 80009ee:	4413      	add	r3, r2
 80009f0:	b2d8      	uxtb	r0, r3
 80009f2:	7ffa      	ldrb	r2, [r7, #31]
 80009f4:	79bb      	ldrb	r3, [r7, #6]
 80009f6:	4413      	add	r3, r2
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	887a      	ldrh	r2, [r7, #2]
 80009fc:	4619      	mov	r1, r3
 80009fe:	f000 ffa3 	bl	8001948 <drawPixel>
 8000a02:	e00b      	b.n	8000a1c <drawChar+0x140>
                }
                else{
                    drawPixel(x_co_ord+col,y_co_ord+row,Color_Black);           // if bit is clear, draw black pixel
 8000a04:	79fa      	ldrb	r2, [r7, #7]
 8000a06:	7fbb      	ldrb	r3, [r7, #30]
 8000a08:	4413      	add	r3, r2
 8000a0a:	b2d8      	uxtb	r0, r3
 8000a0c:	7ffa      	ldrb	r2, [r7, #31]
 8000a0e:	79bb      	ldrb	r3, [r7, #6]
 8000a10:	4413      	add	r3, r2
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	2200      	movs	r2, #0
 8000a16:	4619      	mov	r1, r3
 8000a18:	f000 ff96 	bl	8001948 <drawPixel>
            for(col = 0; col <= last_width ; col++){                            // count through pixels in row
 8000a1c:	7fbb      	ldrb	r3, [r7, #30]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	77bb      	strb	r3, [r7, #30]
 8000a22:	4b5a      	ldr	r3, [pc, #360]	; (8000b8c <drawChar+0x2b0>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	7fba      	ldrb	r2, [r7, #30]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d9d4      	bls.n	80009d6 <drawChar+0xfa>
        for(row = font_nrows; row > 0; row--){
 8000a2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	3b01      	subs	r3, #1
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	77fb      	strb	r3, [r7, #31]
 8000a38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f73f af72 	bgt.w	8000926 <drawChar+0x4a>
                }
            }
        }
        if( display_x <= (95-last_width)){                                      // are we still within display?
 8000a42:	4b53      	ldr	r3, [pc, #332]	; (8000b90 <drawChar+0x2b4>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	461a      	mov	r2, r3
 8000a48:	4b50      	ldr	r3, [pc, #320]	; (8000b8c <drawChar+0x2b0>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	f1c3 035f 	rsb	r3, r3, #95	; 0x5f
 8000a50:	429a      	cmp	r2, r3
 8000a52:	dc0e      	bgt.n	8000a72 <drawChar+0x196>
            display_x += last_width;                                            // if so move x coordinate right
 8000a54:	4b4e      	ldr	r3, [pc, #312]	; (8000b90 <drawChar+0x2b4>)
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	4b4c      	ldr	r3, [pc, #304]	; (8000b8c <drawChar+0x2b0>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b4b      	ldr	r3, [pc, #300]	; (8000b90 <drawChar+0x2b4>)
 8000a62:	701a      	strb	r2, [r3, #0]
            display_x++;                                                        // inter-character gap
 8000a64:	4b4a      	ldr	r3, [pc, #296]	; (8000b90 <drawChar+0x2b4>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	4b48      	ldr	r3, [pc, #288]	; (8000b90 <drawChar+0x2b4>)
 8000a6e:	701a      	strb	r2, [r3, #0]
 8000a70:	e002      	b.n	8000a78 <drawChar+0x19c>
        }
        else{
            display_x = 95;                                                     // set right hand edge
 8000a72:	4b47      	ldr	r3, [pc, #284]	; (8000b90 <drawChar+0x2b4>)
 8000a74:	225f      	movs	r2, #95	; 0x5f
 8000a76:	701a      	strb	r2, [r3, #0]
        }
    }

    if (OLED_font == 2){
 8000a78:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	f040 80c5 	bne.w	8000c0c <drawChar+0x330>
        font_nrows = guiFont_Exo_2_Condensed10x16_Regular[6];
 8000a82:	2210      	movs	r2, #16
 8000a84:	4b3f      	ldr	r3, [pc, #252]	; (8000b84 <drawChar+0x2a8>)
 8000a86:	701a      	strb	r2, [r3, #0]

        ascii_off = ascii_in & 0x7f;                                            // map high values to low ones
 8000a88:	797b      	ldrb	r3, [r7, #5]
 8000a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a8e:	74fb      	strb	r3, [r7, #19]
        if(ascii_off >= 32){                                                    // always assume character 0x20 space as first character
 8000a90:	7cfb      	ldrb	r3, [r7, #19]
 8000a92:	2b1f      	cmp	r3, #31
 8000a94:	d902      	bls.n	8000a9c <drawChar+0x1c0>
            ascii_off -= 32;                                                    // remap
 8000a96:	7cfb      	ldrb	r3, [r7, #19]
 8000a98:	3b20      	subs	r3, #32
 8000a9a:	74fb      	strb	r3, [r7, #19]
        }
        for(row = font_nrows; row > 0; row--){
 8000a9c:	4b39      	ldr	r3, [pc, #228]	; (8000b84 <drawChar+0x2a8>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	77fb      	strb	r3, [r7, #31]
 8000aa2:	e093      	b.n	8000bcc <drawChar+0x2f0>
            font_pointer = (ascii_off*4)+8;                                     // skip header
 8000aa4:	7cfb      	ldrb	r3, [r7, #19]
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	60fb      	str	r3, [r7, #12]
            last_width = guiFont_Exo_2_Condensed10x16_Regular[font_pointer];               // character width
 8000aac:	4a39      	ldr	r2, [pc, #228]	; (8000b94 <drawChar+0x2b8>)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	781a      	ldrb	r2, [r3, #0]
 8000ab4:	4b35      	ldr	r3, [pc, #212]	; (8000b8c <drawChar+0x2b0>)
 8000ab6:	701a      	strb	r2, [r3, #0]
            font_offset = guiFont_Exo_2_Condensed10x16_Regular[font_pointer+1];            // 3 bytes offset value
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	3301      	adds	r3, #1
 8000abc:	4a35      	ldr	r2, [pc, #212]	; (8000b94 <drawChar+0x2b8>)
 8000abe:	5cd3      	ldrb	r3, [r2, r3]
 8000ac0:	617b      	str	r3, [r7, #20]
            font_offset |= guiFont_Exo_2_Condensed10x16_Regular[font_pointer+2] << 8;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	3302      	adds	r3, #2
 8000ac6:	4a33      	ldr	r2, [pc, #204]	; (8000b94 <drawChar+0x2b8>)
 8000ac8:	5cd3      	ldrb	r3, [r2, r3]
 8000aca:	021b      	lsls	r3, r3, #8
 8000acc:	461a      	mov	r2, r3
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	617b      	str	r3, [r7, #20]
            font_offset |= (unsigned long)guiFont_Exo_2_Condensed10x16_Regular[font_pointer+3] << 16;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	3303      	adds	r3, #3
 8000ad8:	4a2e      	ldr	r2, [pc, #184]	; (8000b94 <drawChar+0x2b8>)
 8000ada:	5cd3      	ldrb	r3, [r2, r3]
 8000adc:	041b      	lsls	r3, r3, #16
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	617b      	str	r3, [r7, #20]
            font_offset += row;
 8000ae4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	4413      	add	r3, r2
 8000aec:	617b      	str	r3, [r7, #20]
            if(last_width > 8){                                                 // two bytes in each row
 8000aee:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <drawChar+0x2b0>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b08      	cmp	r3, #8
 8000af4:	d904      	bls.n	8000b00 <drawChar+0x224>
                font_offset += row;
 8000af6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	4413      	add	r3, r2
 8000afe:	617b      	str	r3, [r7, #20]
            }
            if(last_width > 16){                                                // 3 bytes in each row
 8000b00:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <drawChar+0x2b0>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b10      	cmp	r3, #16
 8000b06:	d904      	bls.n	8000b12 <drawChar+0x236>
                font_offset += row;
 8000b08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	4413      	add	r3, r2
 8000b10:	617b      	str	r3, [r7, #20]
            }
            font_row = guiFont_Exo_2_Condensed10x16_Regular[font_offset];                  // build up row from 1, 2 or 3 bytes
 8000b12:	4a20      	ldr	r2, [pc, #128]	; (8000b94 <drawChar+0x2b8>)
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	4413      	add	r3, r2
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	61bb      	str	r3, [r7, #24]
            if(last_width > 8){
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <drawChar+0x2b0>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b08      	cmp	r3, #8
 8000b22:	d908      	bls.n	8000b36 <drawChar+0x25a>
                font_row |= (guiFont_Exo_2_Condensed10x16_Regular[font_offset+1]) << 8;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	3301      	adds	r3, #1
 8000b28:	4a1a      	ldr	r2, [pc, #104]	; (8000b94 <drawChar+0x2b8>)
 8000b2a:	5cd3      	ldrb	r3, [r2, r3]
 8000b2c:	021b      	lsls	r3, r3, #8
 8000b2e:	461a      	mov	r2, r3
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
            }
            if(last_width > 16){
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <drawChar+0x2b0>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b10      	cmp	r3, #16
 8000b3c:	d907      	bls.n	8000b4e <drawChar+0x272>
                font_row |= (unsigned long)(guiFont_Exo_2_Condensed10x16_Regular[font_offset+2]) << 16;   // force long arithmetic
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	3302      	adds	r3, #2
 8000b42:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <drawChar+0x2b8>)
 8000b44:	5cd3      	ldrb	r3, [r2, r3]
 8000b46:	041b      	lsls	r3, r3, #16
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	61bb      	str	r3, [r7, #24]
            }
            for(col = 0; col <= last_width ; col++){                            // count through pixels in row
 8000b4e:	2300      	movs	r3, #0
 8000b50:	77bb      	strb	r3, [r7, #30]
 8000b52:	e030      	b.n	8000bb6 <drawChar+0x2da>
                DDRAM_access();
 8000b54:	f7ff fe64 	bl	8000820 <DDRAM_access>
                if((font_row >> col)&0x01){
 8000b58:	7fbb      	ldrb	r3, [r7, #30]
 8000b5a:	69ba      	ldr	r2, [r7, #24]
 8000b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d017      	beq.n	8000b98 <drawChar+0x2bc>
                    drawPixel(x_co_ord+col,y_co_ord+row,color);                 // if bit is set, draw coloured pixel
 8000b68:	79fa      	ldrb	r2, [r7, #7]
 8000b6a:	7fbb      	ldrb	r3, [r7, #30]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	b2d8      	uxtb	r0, r3
 8000b70:	7ffa      	ldrb	r2, [r7, #31]
 8000b72:	79bb      	ldrb	r3, [r7, #6]
 8000b74:	4413      	add	r3, r2
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	887a      	ldrh	r2, [r7, #2]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f000 fee4 	bl	8001948 <drawPixel>
 8000b80:	e016      	b.n	8000bb0 <drawChar+0x2d4>
 8000b82:	bf00      	nop
 8000b84:	2000e6d8 	.word	0x2000e6d8
 8000b88:	0800e374 	.word	0x0800e374
 8000b8c:	2000e6d7 	.word	0x2000e6d7
 8000b90:	2000e6d5 	.word	0x2000e6d5
 8000b94:	0800af70 	.word	0x0800af70
                }
                else{
                    drawPixel(x_co_ord+col,y_co_ord+row,Color_Black);           // if bit is clear, draw black pixel
 8000b98:	79fa      	ldrb	r2, [r7, #7]
 8000b9a:	7fbb      	ldrb	r3, [r7, #30]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	b2d8      	uxtb	r0, r3
 8000ba0:	7ffa      	ldrb	r2, [r7, #31]
 8000ba2:	79bb      	ldrb	r3, [r7, #6]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2200      	movs	r2, #0
 8000baa:	4619      	mov	r1, r3
 8000bac:	f000 fecc 	bl	8001948 <drawPixel>
            for(col = 0; col <= last_width ; col++){                            // count through pixels in row
 8000bb0:	7fbb      	ldrb	r3, [r7, #30]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	77bb      	strb	r3, [r7, #30]
 8000bb6:	4b80      	ldr	r3, [pc, #512]	; (8000db8 <drawChar+0x4dc>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	7fba      	ldrb	r2, [r7, #30]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d9c9      	bls.n	8000b54 <drawChar+0x278>
        for(row = font_nrows; row > 0; row--){
 8000bc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	77fb      	strb	r3, [r7, #31]
 8000bcc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f73f af67 	bgt.w	8000aa4 <drawChar+0x1c8>
                }
            }
        }
        if( display_x <= (95-last_width)){                                      // are we still within display?
 8000bd6:	4b79      	ldr	r3, [pc, #484]	; (8000dbc <drawChar+0x4e0>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b76      	ldr	r3, [pc, #472]	; (8000db8 <drawChar+0x4dc>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	f1c3 035f 	rsb	r3, r3, #95	; 0x5f
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dc0e      	bgt.n	8000c06 <drawChar+0x32a>
            display_x += last_width;                                            // if so move x coordinate right
 8000be8:	4b74      	ldr	r3, [pc, #464]	; (8000dbc <drawChar+0x4e0>)
 8000bea:	781a      	ldrb	r2, [r3, #0]
 8000bec:	4b72      	ldr	r3, [pc, #456]	; (8000db8 <drawChar+0x4dc>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	4b71      	ldr	r3, [pc, #452]	; (8000dbc <drawChar+0x4e0>)
 8000bf6:	701a      	strb	r2, [r3, #0]
            display_x++;                                                        // inter-character gap
 8000bf8:	4b70      	ldr	r3, [pc, #448]	; (8000dbc <drawChar+0x4e0>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	4b6e      	ldr	r3, [pc, #440]	; (8000dbc <drawChar+0x4e0>)
 8000c02:	701a      	strb	r2, [r3, #0]
 8000c04:	e002      	b.n	8000c0c <drawChar+0x330>
        }
        else{
            display_x = 95;                                                     // set right hand edge
 8000c06:	4b6d      	ldr	r3, [pc, #436]	; (8000dbc <drawChar+0x4e0>)
 8000c08:	225f      	movs	r2, #95	; 0x5f
 8000c0a:	701a      	strb	r2, [r3, #0]
        }
    }

    if (OLED_font == 3){
 8000c0c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	f040 80ba 	bne.w	8000d8a <drawChar+0x4ae>
        font_nrows = guiFont_Exo_2_Condensed15x23_Regular[6];
 8000c16:	2217      	movs	r2, #23
 8000c18:	4b69      	ldr	r3, [pc, #420]	; (8000dc0 <drawChar+0x4e4>)
 8000c1a:	701a      	strb	r2, [r3, #0]

        ascii_off = ascii_in & 0x7f;                                            // map high values to low ones
 8000c1c:	797b      	ldrb	r3, [r7, #5]
 8000c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c22:	74fb      	strb	r3, [r7, #19]
        if(ascii_off >= 32){                                                    // always assume character 0x20 space as first character
 8000c24:	7cfb      	ldrb	r3, [r7, #19]
 8000c26:	2b1f      	cmp	r3, #31
 8000c28:	d902      	bls.n	8000c30 <drawChar+0x354>
            ascii_off -= 32;                                                    // remap
 8000c2a:	7cfb      	ldrb	r3, [r7, #19]
 8000c2c:	3b20      	subs	r3, #32
 8000c2e:	74fb      	strb	r3, [r7, #19]
        }
        for(row = font_nrows; row > 0; row--){
 8000c30:	4b63      	ldr	r3, [pc, #396]	; (8000dc0 <drawChar+0x4e4>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	77fb      	strb	r3, [r7, #31]
 8000c36:	e088      	b.n	8000d4a <drawChar+0x46e>
            font_pointer = (ascii_off*4)+8;                                     // skip header
 8000c38:	7cfb      	ldrb	r3, [r7, #19]
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	60fb      	str	r3, [r7, #12]
            last_width = guiFont_Exo_2_Condensed15x23_Regular[font_pointer];               // character width
 8000c40:	4a60      	ldr	r2, [pc, #384]	; (8000dc4 <drawChar+0x4e8>)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	4413      	add	r3, r2
 8000c46:	781a      	ldrb	r2, [r3, #0]
 8000c48:	4b5b      	ldr	r3, [pc, #364]	; (8000db8 <drawChar+0x4dc>)
 8000c4a:	701a      	strb	r2, [r3, #0]
            font_offset = guiFont_Exo_2_Condensed15x23_Regular[font_pointer+1];            // 3 bytes offset value
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	4a5c      	ldr	r2, [pc, #368]	; (8000dc4 <drawChar+0x4e8>)
 8000c52:	5cd3      	ldrb	r3, [r2, r3]
 8000c54:	617b      	str	r3, [r7, #20]
            font_offset |= guiFont_Exo_2_Condensed15x23_Regular[font_pointer+2] << 8;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	3302      	adds	r3, #2
 8000c5a:	4a5a      	ldr	r2, [pc, #360]	; (8000dc4 <drawChar+0x4e8>)
 8000c5c:	5cd3      	ldrb	r3, [r2, r3]
 8000c5e:	021b      	lsls	r3, r3, #8
 8000c60:	461a      	mov	r2, r3
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	617b      	str	r3, [r7, #20]
            font_offset |= (unsigned long)guiFont_Exo_2_Condensed15x23_Regular[font_pointer+3] << 16;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	3303      	adds	r3, #3
 8000c6c:	4a55      	ldr	r2, [pc, #340]	; (8000dc4 <drawChar+0x4e8>)
 8000c6e:	5cd3      	ldrb	r3, [r2, r3]
 8000c70:	041b      	lsls	r3, r3, #16
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	617b      	str	r3, [r7, #20]
            font_offset += row;
 8000c78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	4413      	add	r3, r2
 8000c80:	617b      	str	r3, [r7, #20]
            if(last_width > 8){                                                 // two bytes in each row
 8000c82:	4b4d      	ldr	r3, [pc, #308]	; (8000db8 <drawChar+0x4dc>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b08      	cmp	r3, #8
 8000c88:	d904      	bls.n	8000c94 <drawChar+0x3b8>
                font_offset += row;
 8000c8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	4413      	add	r3, r2
 8000c92:	617b      	str	r3, [r7, #20]
            }
            if(last_width > 16){                                                // 3 bytes in each row
 8000c94:	4b48      	ldr	r3, [pc, #288]	; (8000db8 <drawChar+0x4dc>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b10      	cmp	r3, #16
 8000c9a:	d904      	bls.n	8000ca6 <drawChar+0x3ca>
                font_offset += row;
 8000c9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	617b      	str	r3, [r7, #20]
            }
            font_row = guiFont_Exo_2_Condensed15x23_Regular[font_offset];                  // build up row from 1, 2 or 3 bytes
 8000ca6:	4a47      	ldr	r2, [pc, #284]	; (8000dc4 <drawChar+0x4e8>)
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	4413      	add	r3, r2
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	61bb      	str	r3, [r7, #24]
            if(last_width > 8){
 8000cb0:	4b41      	ldr	r3, [pc, #260]	; (8000db8 <drawChar+0x4dc>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b08      	cmp	r3, #8
 8000cb6:	d908      	bls.n	8000cca <drawChar+0x3ee>
                font_row |= (guiFont_Exo_2_Condensed15x23_Regular[font_offset+1]) << 8;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	4a41      	ldr	r2, [pc, #260]	; (8000dc4 <drawChar+0x4e8>)
 8000cbe:	5cd3      	ldrb	r3, [r2, r3]
 8000cc0:	021b      	lsls	r3, r3, #8
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
            }
            if(last_width > 16){
 8000cca:	4b3b      	ldr	r3, [pc, #236]	; (8000db8 <drawChar+0x4dc>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b10      	cmp	r3, #16
 8000cd0:	d907      	bls.n	8000ce2 <drawChar+0x406>
                font_row |= (unsigned long)(guiFont_Exo_2_Condensed15x23_Regular[font_offset+2]) << 16;   // force long arithmetic
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3302      	adds	r3, #2
 8000cd6:	4a3b      	ldr	r2, [pc, #236]	; (8000dc4 <drawChar+0x4e8>)
 8000cd8:	5cd3      	ldrb	r3, [r2, r3]
 8000cda:	041b      	lsls	r3, r3, #16
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
            }
            for(col = 0; col <= last_width ; col++){                            // count through pixels in row
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	77bb      	strb	r3, [r7, #30]
 8000ce6:	e025      	b.n	8000d34 <drawChar+0x458>
                DDRAM_access();
 8000ce8:	f7ff fd9a 	bl	8000820 <DDRAM_access>
                if((font_row >> col)&0x01){
 8000cec:	7fbb      	ldrb	r3, [r7, #30]
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d00c      	beq.n	8000d16 <drawChar+0x43a>
                    drawPixel(x_co_ord+col,y_co_ord+row,color);                 // if bit is set, draw coloured pixel
 8000cfc:	79fa      	ldrb	r2, [r7, #7]
 8000cfe:	7fbb      	ldrb	r3, [r7, #30]
 8000d00:	4413      	add	r3, r2
 8000d02:	b2d8      	uxtb	r0, r3
 8000d04:	7ffa      	ldrb	r2, [r7, #31]
 8000d06:	79bb      	ldrb	r3, [r7, #6]
 8000d08:	4413      	add	r3, r2
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	887a      	ldrh	r2, [r7, #2]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f000 fe1a 	bl	8001948 <drawPixel>
 8000d14:	e00b      	b.n	8000d2e <drawChar+0x452>
                }
                else{
                    drawPixel(x_co_ord+col,y_co_ord+row,Color_Black);           // if bit is clear, draw black pixel
 8000d16:	79fa      	ldrb	r2, [r7, #7]
 8000d18:	7fbb      	ldrb	r3, [r7, #30]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	b2d8      	uxtb	r0, r3
 8000d1e:	7ffa      	ldrb	r2, [r7, #31]
 8000d20:	79bb      	ldrb	r3, [r7, #6]
 8000d22:	4413      	add	r3, r2
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2200      	movs	r2, #0
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f000 fe0d 	bl	8001948 <drawPixel>
            for(col = 0; col <= last_width ; col++){                            // count through pixels in row
 8000d2e:	7fbb      	ldrb	r3, [r7, #30]
 8000d30:	3301      	adds	r3, #1
 8000d32:	77bb      	strb	r3, [r7, #30]
 8000d34:	4b20      	ldr	r3, [pc, #128]	; (8000db8 <drawChar+0x4dc>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	7fba      	ldrb	r2, [r7, #30]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d9d4      	bls.n	8000ce8 <drawChar+0x40c>
        for(row = font_nrows; row > 0; row--){
 8000d3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	3b01      	subs	r3, #1
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	77fb      	strb	r3, [r7, #31]
 8000d4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f73f af72 	bgt.w	8000c38 <drawChar+0x35c>
                }
            }
        }
        if( display_x <= (95-last_width)){                                      // are we still within display?
 8000d54:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <drawChar+0x4e0>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <drawChar+0x4dc>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	f1c3 035f 	rsb	r3, r3, #95	; 0x5f
 8000d62:	429a      	cmp	r2, r3
 8000d64:	dc0e      	bgt.n	8000d84 <drawChar+0x4a8>
            display_x += last_width;                                            // if so move x coordinate right
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <drawChar+0x4e0>)
 8000d68:	781a      	ldrb	r2, [r3, #0]
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <drawChar+0x4dc>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <drawChar+0x4e0>)
 8000d74:	701a      	strb	r2, [r3, #0]
            display_x++;                                                        // inter-character gap
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <drawChar+0x4e0>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <drawChar+0x4e0>)
 8000d80:	701a      	strb	r2, [r3, #0]
 8000d82:	e002      	b.n	8000d8a <drawChar+0x4ae>
        }
        else{
            display_x = 95;                                                     // set right hand edge
 8000d84:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <drawChar+0x4e0>)
 8000d86:	225f      	movs	r2, #95	; 0x5f
 8000d88:	701a      	strb	r2, [r3, #0]
        }
    }

    if (OLED_font == 4){
 8000d8a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	f040 80c3 	bne.w	8000f1a <drawChar+0x63e>
        font_nrows = guiFont_Exo_2_Condensed21x32_Regular[6];
 8000d94:	2220      	movs	r2, #32
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <drawChar+0x4e4>)
 8000d98:	701a      	strb	r2, [r3, #0]

        ascii_off = ascii_in & 0x7f;                                            // map high values to low ones
 8000d9a:	797b      	ldrb	r3, [r7, #5]
 8000d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000da0:	74fb      	strb	r3, [r7, #19]
        if(ascii_off >= 32){                                                    // always assume character 0x20 space as first character
 8000da2:	7cfb      	ldrb	r3, [r7, #19]
 8000da4:	2b1f      	cmp	r3, #31
 8000da6:	d902      	bls.n	8000dae <drawChar+0x4d2>
            ascii_off -= 32;                                                    // remap
 8000da8:	7cfb      	ldrb	r3, [r7, #19]
 8000daa:	3b20      	subs	r3, #32
 8000dac:	74fb      	strb	r3, [r7, #19]
        }
        for(row = font_nrows; row > 0; row--){
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <drawChar+0x4e4>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	77fb      	strb	r3, [r7, #31]
 8000db4:	e091      	b.n	8000eda <drawChar+0x5fe>
 8000db6:	bf00      	nop
 8000db8:	2000e6d7 	.word	0x2000e6d7
 8000dbc:	2000e6d5 	.word	0x2000e6d5
 8000dc0:	2000e6d8 	.word	0x2000e6d8
 8000dc4:	0800b718 	.word	0x0800b718
            font_pointer = (ascii_off*4)+8;                                     // skip header
 8000dc8:	7cfb      	ldrb	r3, [r7, #19]
 8000dca:	3302      	adds	r3, #2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	60fb      	str	r3, [r7, #12]
            last_width = guiFont_Exo_2_Condensed21x32_Regular[font_pointer];               // character width
 8000dd0:	4a8a      	ldr	r2, [pc, #552]	; (8000ffc <drawChar+0x720>)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	781a      	ldrb	r2, [r3, #0]
 8000dd8:	4b89      	ldr	r3, [pc, #548]	; (8001000 <drawChar+0x724>)
 8000dda:	701a      	strb	r2, [r3, #0]
            font_offset = guiFont_Exo_2_Condensed21x32_Regular[font_pointer+1];            // 3 bytes offset value
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	3301      	adds	r3, #1
 8000de0:	4a86      	ldr	r2, [pc, #536]	; (8000ffc <drawChar+0x720>)
 8000de2:	5cd3      	ldrb	r3, [r2, r3]
 8000de4:	617b      	str	r3, [r7, #20]
            font_offset |= guiFont_Exo_2_Condensed21x32_Regular[font_pointer+2] << 8;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	3302      	adds	r3, #2
 8000dea:	4a84      	ldr	r2, [pc, #528]	; (8000ffc <drawChar+0x720>)
 8000dec:	5cd3      	ldrb	r3, [r2, r3]
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	461a      	mov	r2, r3
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	617b      	str	r3, [r7, #20]
            font_offset |= (unsigned long)guiFont_Exo_2_Condensed21x32_Regular[font_pointer+3] << 16;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	3303      	adds	r3, #3
 8000dfc:	4a7f      	ldr	r2, [pc, #508]	; (8000ffc <drawChar+0x720>)
 8000dfe:	5cd3      	ldrb	r3, [r2, r3]
 8000e00:	041b      	lsls	r3, r3, #16
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	617b      	str	r3, [r7, #20]
            font_offset += row;
 8000e08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	4413      	add	r3, r2
 8000e10:	617b      	str	r3, [r7, #20]
            if(last_width > 8){                                                 // two bytes in each row
 8000e12:	4b7b      	ldr	r3, [pc, #492]	; (8001000 <drawChar+0x724>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b08      	cmp	r3, #8
 8000e18:	d904      	bls.n	8000e24 <drawChar+0x548>
                font_offset += row;
 8000e1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4413      	add	r3, r2
 8000e22:	617b      	str	r3, [r7, #20]
            }
            if(last_width > 16){                                                // 3 bytes in each row
 8000e24:	4b76      	ldr	r3, [pc, #472]	; (8001000 <drawChar+0x724>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b10      	cmp	r3, #16
 8000e2a:	d904      	bls.n	8000e36 <drawChar+0x55a>
                font_offset += row;
 8000e2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e30:	697a      	ldr	r2, [r7, #20]
 8000e32:	4413      	add	r3, r2
 8000e34:	617b      	str	r3, [r7, #20]
            }
            font_row = guiFont_Exo_2_Condensed21x32_Regular[font_offset];                  // build up row from 1, 2 or 3 bytes
 8000e36:	4a71      	ldr	r2, [pc, #452]	; (8000ffc <drawChar+0x720>)
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	61bb      	str	r3, [r7, #24]
            if(last_width > 8){
 8000e40:	4b6f      	ldr	r3, [pc, #444]	; (8001000 <drawChar+0x724>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b08      	cmp	r3, #8
 8000e46:	d908      	bls.n	8000e5a <drawChar+0x57e>
                font_row |= (guiFont_Exo_2_Condensed21x32_Regular[font_offset+1]) << 8;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	4a6b      	ldr	r2, [pc, #428]	; (8000ffc <drawChar+0x720>)
 8000e4e:	5cd3      	ldrb	r3, [r2, r3]
 8000e50:	021b      	lsls	r3, r3, #8
 8000e52:	461a      	mov	r2, r3
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
            }
            if(last_width > 16){
 8000e5a:	4b69      	ldr	r3, [pc, #420]	; (8001000 <drawChar+0x724>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b10      	cmp	r3, #16
 8000e60:	d907      	bls.n	8000e72 <drawChar+0x596>
                font_row |= (unsigned long)(guiFont_Exo_2_Condensed21x32_Regular[font_offset+2]) << 16;   // force long arithmetic
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	3302      	adds	r3, #2
 8000e66:	4a65      	ldr	r2, [pc, #404]	; (8000ffc <drawChar+0x720>)
 8000e68:	5cd3      	ldrb	r3, [r2, r3]
 8000e6a:	041b      	lsls	r3, r3, #16
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
            }
            for(col = 0; col <= last_width ; col++){                            // count through pixels in row
 8000e72:	2300      	movs	r3, #0
 8000e74:	77bb      	strb	r3, [r7, #30]
 8000e76:	e025      	b.n	8000ec4 <drawChar+0x5e8>
                DDRAM_access();
 8000e78:	f7ff fcd2 	bl	8000820 <DDRAM_access>
                if((font_row >> col)&0x01){
 8000e7c:	7fbb      	ldrb	r3, [r7, #30]
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	fa22 f303 	lsr.w	r3, r2, r3
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d00c      	beq.n	8000ea6 <drawChar+0x5ca>
                    drawPixel(x_co_ord+col,y_co_ord+row,color);                 // if bit is set, draw coloured pixel
 8000e8c:	79fa      	ldrb	r2, [r7, #7]
 8000e8e:	7fbb      	ldrb	r3, [r7, #30]
 8000e90:	4413      	add	r3, r2
 8000e92:	b2d8      	uxtb	r0, r3
 8000e94:	7ffa      	ldrb	r2, [r7, #31]
 8000e96:	79bb      	ldrb	r3, [r7, #6]
 8000e98:	4413      	add	r3, r2
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	887a      	ldrh	r2, [r7, #2]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f000 fd52 	bl	8001948 <drawPixel>
 8000ea4:	e00b      	b.n	8000ebe <drawChar+0x5e2>
                }
                else{
                    drawPixel(x_co_ord+col,y_co_ord+row,Color_Black);           // if bit is clear, draw black pixel
 8000ea6:	79fa      	ldrb	r2, [r7, #7]
 8000ea8:	7fbb      	ldrb	r3, [r7, #30]
 8000eaa:	4413      	add	r3, r2
 8000eac:	b2d8      	uxtb	r0, r3
 8000eae:	7ffa      	ldrb	r2, [r7, #31]
 8000eb0:	79bb      	ldrb	r3, [r7, #6]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f000 fd45 	bl	8001948 <drawPixel>
            for(col = 0; col <= last_width ; col++){                            // count through pixels in row
 8000ebe:	7fbb      	ldrb	r3, [r7, #30]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	77bb      	strb	r3, [r7, #30]
 8000ec4:	4b4e      	ldr	r3, [pc, #312]	; (8001000 <drawChar+0x724>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	7fba      	ldrb	r2, [r7, #30]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d9d4      	bls.n	8000e78 <drawChar+0x59c>
        for(row = font_nrows; row > 0; row--){
 8000ece:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	77fb      	strb	r3, [r7, #31]
 8000eda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f73f af72 	bgt.w	8000dc8 <drawChar+0x4ec>
                }
            }
        }
        if( display_x <= (95-last_width)){                                      // are we still within display?
 8000ee4:	4b47      	ldr	r3, [pc, #284]	; (8001004 <drawChar+0x728>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b45      	ldr	r3, [pc, #276]	; (8001000 <drawChar+0x724>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	f1c3 035f 	rsb	r3, r3, #95	; 0x5f
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	dc0e      	bgt.n	8000f14 <drawChar+0x638>
            display_x += last_width;                                            // if so move x coordinate right
 8000ef6:	4b43      	ldr	r3, [pc, #268]	; (8001004 <drawChar+0x728>)
 8000ef8:	781a      	ldrb	r2, [r3, #0]
 8000efa:	4b41      	ldr	r3, [pc, #260]	; (8001000 <drawChar+0x724>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4b40      	ldr	r3, [pc, #256]	; (8001004 <drawChar+0x728>)
 8000f04:	701a      	strb	r2, [r3, #0]
            display_x++;                                                        // inter-character gap
 8000f06:	4b3f      	ldr	r3, [pc, #252]	; (8001004 <drawChar+0x728>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <drawChar+0x728>)
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	e002      	b.n	8000f1a <drawChar+0x63e>
        }
        else{
            display_x = 95;                                                     // set right hand edge
 8000f14:	4b3b      	ldr	r3, [pc, #236]	; (8001004 <drawChar+0x728>)
 8000f16:	225f      	movs	r2, #95	; 0x5f
 8000f18:	701a      	strb	r2, [r3, #0]
        }
    }


    if (OLED_font == 6){
 8000f1a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	f040 80b0 	bne.w	8001084 <drawChar+0x7a8>
        font_nrows = guiFont_Tahoma_6_Regular[6];                               // number of bytes in each entry
 8000f24:	220a      	movs	r2, #10
 8000f26:	4b38      	ldr	r3, [pc, #224]	; (8001008 <drawChar+0x72c>)
 8000f28:	701a      	strb	r2, [r3, #0]

        ascii_off = ascii_in & 0x7f;                                            // map high values to low ones
 8000f2a:	797b      	ldrb	r3, [r7, #5]
 8000f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f30:	74fb      	strb	r3, [r7, #19]
        if(ascii_off >= 32){                                                    // always assume character 0x20 space as first character
 8000f32:	7cfb      	ldrb	r3, [r7, #19]
 8000f34:	2b1f      	cmp	r3, #31
 8000f36:	d902      	bls.n	8000f3e <drawChar+0x662>
            ascii_off -= 32;                                                    // remap
 8000f38:	7cfb      	ldrb	r3, [r7, #19]
 8000f3a:	3b20      	subs	r3, #32
 8000f3c:	74fb      	strb	r3, [r7, #19]
        }
        for(row = font_nrows; row > 0; row--){                                  // read pixels right to left
 8000f3e:	4b32      	ldr	r3, [pc, #200]	; (8001008 <drawChar+0x72c>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	77fb      	strb	r3, [r7, #31]
 8000f44:	e07e      	b.n	8001044 <drawChar+0x768>
            font_pointer = (ascii_off*4)+8;                                     // skip 8 byte header
 8000f46:	7cfb      	ldrb	r3, [r7, #19]
 8000f48:	3302      	adds	r3, #2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	60fb      	str	r3, [r7, #12]
            last_width = guiFont_Tahoma_6_Regular[font_pointer];                // read out character width (excluding filler bytes)
 8000f4e:	4a2f      	ldr	r2, [pc, #188]	; (800100c <drawChar+0x730>)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <drawChar+0x724>)
 8000f58:	701a      	strb	r2, [r3, #0]
            font_offset = guiFont_Tahoma_6_Regular[font_pointer+1];             // get offset low
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	4a2b      	ldr	r2, [pc, #172]	; (800100c <drawChar+0x730>)
 8000f60:	5cd3      	ldrb	r3, [r2, r3]
 8000f62:	617b      	str	r3, [r7, #20]
            font_offset += guiFont_Tahoma_6_Regular[font_pointer+2]*256;        // get offset middle
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3302      	adds	r3, #2
 8000f68:	4a28      	ldr	r2, [pc, #160]	; (800100c <drawChar+0x730>)
 8000f6a:	5cd3      	ldrb	r3, [r2, r3]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	461a      	mov	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	4413      	add	r3, r2
 8000f74:	617b      	str	r3, [r7, #20]
            font_offset += (unsigned long)guiFont_Tahoma_6_Regular[font_pointer+3]*65536;  // get offset high and force long type calculation
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3303      	adds	r3, #3
 8000f7a:	4a24      	ldr	r2, [pc, #144]	; (800100c <drawChar+0x730>)
 8000f7c:	5cd3      	ldrb	r3, [r2, r3]
 8000f7e:	041b      	lsls	r3, r3, #16
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	4413      	add	r3, r2
 8000f84:	617b      	str	r3, [r7, #20]
            font_offset += row;                                                 // add in the row offset
 8000f86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	617b      	str	r3, [r7, #20]
            if(last_width > 8){                                                 // if width > 8 then we need 2 bytes per row
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <drawChar+0x724>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b08      	cmp	r3, #8
 8000f96:	d904      	bls.n	8000fa2 <drawChar+0x6c6>
                font_offset += row;                                             // so double up byte offset
 8000f98:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	617b      	str	r3, [r7, #20]
            }
            font_row = guiFont_Tahoma_6_Regular[font_offset];                   // get a row of up to 8 pixels
 8000fa2:	4a1a      	ldr	r2, [pc, #104]	; (800100c <drawChar+0x730>)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	61bb      	str	r3, [r7, #24]
            if(last_width > 8){                                                 // if width > 8 then need second byte of pixels
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <drawChar+0x724>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	d908      	bls.n	8000fc6 <drawChar+0x6ea>
                font_row += (guiFont_Tahoma_6_Regular[font_offset+1])*256;      // so go fetch a further byte
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	4a14      	ldr	r2, [pc, #80]	; (800100c <drawChar+0x730>)
 8000fba:	5cd3      	ldrb	r3, [r2, r3]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
            }
            for(col = 0; col <= last_width ; col++){                            // count through pixels in row
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	77bb      	strb	r3, [r7, #30]
 8000fca:	e030      	b.n	800102e <drawChar+0x752>
                DDRAM_access();
 8000fcc:	f7ff fc28 	bl	8000820 <DDRAM_access>
                if((font_row >> col)&0x01){
 8000fd0:	7fbb      	ldrb	r3, [r7, #30]
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d017      	beq.n	8001010 <drawChar+0x734>
                    drawPixel(x_co_ord+col,y_co_ord+row,color);                 // if bit is set, draw coloured pixel
 8000fe0:	79fa      	ldrb	r2, [r7, #7]
 8000fe2:	7fbb      	ldrb	r3, [r7, #30]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b2d8      	uxtb	r0, r3
 8000fe8:	7ffa      	ldrb	r2, [r7, #31]
 8000fea:	79bb      	ldrb	r3, [r7, #6]
 8000fec:	4413      	add	r3, r2
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	887a      	ldrh	r2, [r7, #2]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f000 fca8 	bl	8001948 <drawPixel>
 8000ff8:	e016      	b.n	8001028 <drawChar+0x74c>
 8000ffa:	bf00      	nop
 8000ffc:	080098a8 	.word	0x080098a8
 8001000:	2000e6d7 	.word	0x2000e6d7
 8001004:	2000e6d5 	.word	0x2000e6d5
 8001008:	2000e6d8 	.word	0x2000e6d8
 800100c:	08006df4 	.word	0x08006df4
                }
                else{
                    drawPixel(x_co_ord+col,y_co_ord+row,Color_Black);           // if bit is clear, draw black pixel
 8001010:	79fa      	ldrb	r2, [r7, #7]
 8001012:	7fbb      	ldrb	r3, [r7, #30]
 8001014:	4413      	add	r3, r2
 8001016:	b2d8      	uxtb	r0, r3
 8001018:	7ffa      	ldrb	r2, [r7, #31]
 800101a:	79bb      	ldrb	r3, [r7, #6]
 800101c:	4413      	add	r3, r2
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2200      	movs	r2, #0
 8001022:	4619      	mov	r1, r3
 8001024:	f000 fc90 	bl	8001948 <drawPixel>
            for(col = 0; col <= last_width ; col++){                            // count through pixels in row
 8001028:	7fbb      	ldrb	r3, [r7, #30]
 800102a:	3301      	adds	r3, #1
 800102c:	77bb      	strb	r3, [r7, #30]
 800102e:	4ba2      	ldr	r3, [pc, #648]	; (80012b8 <drawChar+0x9dc>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	7fba      	ldrb	r2, [r7, #30]
 8001034:	429a      	cmp	r2, r3
 8001036:	d9c9      	bls.n	8000fcc <drawChar+0x6f0>
        for(row = font_nrows; row > 0; row--){                                  // read pixels right to left
 8001038:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	3b01      	subs	r3, #1
 8001040:	b2db      	uxtb	r3, r3
 8001042:	77fb      	strb	r3, [r7, #31]
 8001044:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001048:	2b00      	cmp	r3, #0
 800104a:	f73f af7c 	bgt.w	8000f46 <drawChar+0x66a>
                }
            }
        }
        if( display_x <= (95-last_width)){                                      // are we still within display?
 800104e:	4b9b      	ldr	r3, [pc, #620]	; (80012bc <drawChar+0x9e0>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	4b98      	ldr	r3, [pc, #608]	; (80012b8 <drawChar+0x9dc>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	f1c3 035f 	rsb	r3, r3, #95	; 0x5f
 800105c:	429a      	cmp	r2, r3
 800105e:	dc0e      	bgt.n	800107e <drawChar+0x7a2>
            display_x += last_width;                                            // if so move x coordinate right
 8001060:	4b96      	ldr	r3, [pc, #600]	; (80012bc <drawChar+0x9e0>)
 8001062:	781a      	ldrb	r2, [r3, #0]
 8001064:	4b94      	ldr	r3, [pc, #592]	; (80012b8 <drawChar+0x9dc>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4413      	add	r3, r2
 800106a:	b2da      	uxtb	r2, r3
 800106c:	4b93      	ldr	r3, [pc, #588]	; (80012bc <drawChar+0x9e0>)
 800106e:	701a      	strb	r2, [r3, #0]
            display_x++;                                                        // inter-character gap
 8001070:	4b92      	ldr	r3, [pc, #584]	; (80012bc <drawChar+0x9e0>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	b2da      	uxtb	r2, r3
 8001078:	4b90      	ldr	r3, [pc, #576]	; (80012bc <drawChar+0x9e0>)
 800107a:	701a      	strb	r2, [r3, #0]
 800107c:	e002      	b.n	8001084 <drawChar+0x7a8>
        }
        else{
            display_x = 95;                                                     // set right hand edge
 800107e:	4b8f      	ldr	r3, [pc, #572]	; (80012bc <drawChar+0x9e0>)
 8001080:	225f      	movs	r2, #95	; 0x5f
 8001082:	701a      	strb	r2, [r3, #0]
        }
    }

    if (OLED_font == 7){
 8001084:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001088:	2b07      	cmp	r3, #7
 800108a:	f040 80a4 	bne.w	80011d6 <drawChar+0x8fa>
        font_nrows = guiFont_Tahoma_7_Regular[6];                               // number of bytes in each entry
 800108e:	220b      	movs	r2, #11
 8001090:	4b8b      	ldr	r3, [pc, #556]	; (80012c0 <drawChar+0x9e4>)
 8001092:	701a      	strb	r2, [r3, #0]

        ascii_off = ascii_in & 0x7f;                                            // map high values to low ones
 8001094:	797b      	ldrb	r3, [r7, #5]
 8001096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800109a:	74fb      	strb	r3, [r7, #19]
        if(ascii_off >= 32){                                                    // always assume character 0x20 space as first character
 800109c:	7cfb      	ldrb	r3, [r7, #19]
 800109e:	2b1f      	cmp	r3, #31
 80010a0:	d902      	bls.n	80010a8 <drawChar+0x7cc>
            ascii_off -= 32;                                                    // remap
 80010a2:	7cfb      	ldrb	r3, [r7, #19]
 80010a4:	3b20      	subs	r3, #32
 80010a6:	74fb      	strb	r3, [r7, #19]
        }
        for(row = font_nrows; row > 0; row--){                                  // read pixels right to left
 80010a8:	4b85      	ldr	r3, [pc, #532]	; (80012c0 <drawChar+0x9e4>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	77fb      	strb	r3, [r7, #31]
 80010ae:	e073      	b.n	8001198 <drawChar+0x8bc>
            font_pointer = (ascii_off*4)+8;                                     // skip 8 byte header
 80010b0:	7cfb      	ldrb	r3, [r7, #19]
 80010b2:	3302      	adds	r3, #2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	60fb      	str	r3, [r7, #12]
            last_width = guiFont_Tahoma_7_Regular[font_pointer];                // read out character width (excluding filler bytes)
 80010b8:	4a82      	ldr	r2, [pc, #520]	; (80012c4 <drawChar+0x9e8>)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4413      	add	r3, r2
 80010be:	781a      	ldrb	r2, [r3, #0]
 80010c0:	4b7d      	ldr	r3, [pc, #500]	; (80012b8 <drawChar+0x9dc>)
 80010c2:	701a      	strb	r2, [r3, #0]
            font_offset = guiFont_Tahoma_7_Regular[font_pointer+1];             // get offset low
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3301      	adds	r3, #1
 80010c8:	4a7e      	ldr	r2, [pc, #504]	; (80012c4 <drawChar+0x9e8>)
 80010ca:	5cd3      	ldrb	r3, [r2, r3]
 80010cc:	617b      	str	r3, [r7, #20]
            font_offset += guiFont_Tahoma_7_Regular[font_pointer+2]*256;        // get offset middle
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	3302      	adds	r3, #2
 80010d2:	4a7c      	ldr	r2, [pc, #496]	; (80012c4 <drawChar+0x9e8>)
 80010d4:	5cd3      	ldrb	r3, [r2, r3]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	461a      	mov	r2, r3
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	4413      	add	r3, r2
 80010de:	617b      	str	r3, [r7, #20]
            font_offset += (unsigned long)guiFont_Tahoma_7_Regular[font_pointer+3]*65536;  // get offset high and force long type calculation
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	3303      	adds	r3, #3
 80010e4:	4a77      	ldr	r2, [pc, #476]	; (80012c4 <drawChar+0x9e8>)
 80010e6:	5cd3      	ldrb	r3, [r2, r3]
 80010e8:	041b      	lsls	r3, r3, #16
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	4413      	add	r3, r2
 80010ee:	617b      	str	r3, [r7, #20]
            font_offset += row;                                                 // add in the row offset
 80010f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	4413      	add	r3, r2
 80010f8:	617b      	str	r3, [r7, #20]
            if(last_width > 8){                                                 // if width > 8 then we need 2 bytes per row
 80010fa:	4b6f      	ldr	r3, [pc, #444]	; (80012b8 <drawChar+0x9dc>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b08      	cmp	r3, #8
 8001100:	d904      	bls.n	800110c <drawChar+0x830>
                font_offset += row;                                             // so double up byte offset
 8001102:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	4413      	add	r3, r2
 800110a:	617b      	str	r3, [r7, #20]
            }
            font_row = guiFont_Tahoma_7_Regular[font_offset];                   // get a row of up to 8 pixels
 800110c:	4a6d      	ldr	r2, [pc, #436]	; (80012c4 <drawChar+0x9e8>)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	4413      	add	r3, r2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
            if(last_width > 8){                                                 // if width > 8 then need second byte of pixels
 8001116:	4b68      	ldr	r3, [pc, #416]	; (80012b8 <drawChar+0x9dc>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b08      	cmp	r3, #8
 800111c:	d908      	bls.n	8001130 <drawChar+0x854>
                font_row += (guiFont_Tahoma_7_Regular[font_offset+1])*256;      // so go fetch a further byte
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3301      	adds	r3, #1
 8001122:	4a68      	ldr	r2, [pc, #416]	; (80012c4 <drawChar+0x9e8>)
 8001124:	5cd3      	ldrb	r3, [r2, r3]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	461a      	mov	r2, r3
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	4413      	add	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
            }
            for(col = 0; col <= last_width ; col++){                            // count through pixels in row
 8001130:	2300      	movs	r3, #0
 8001132:	77bb      	strb	r3, [r7, #30]
 8001134:	e025      	b.n	8001182 <drawChar+0x8a6>
                DDRAM_access();
 8001136:	f7ff fb73 	bl	8000820 <DDRAM_access>
                if((font_row >> col)&0x01){
 800113a:	7fbb      	ldrb	r3, [r7, #30]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	fa22 f303 	lsr.w	r3, r2, r3
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00c      	beq.n	8001164 <drawChar+0x888>
                    drawPixel(x_co_ord+col,y_co_ord+row,color);                 // if bit is set, draw coloured pixel
 800114a:	79fa      	ldrb	r2, [r7, #7]
 800114c:	7fbb      	ldrb	r3, [r7, #30]
 800114e:	4413      	add	r3, r2
 8001150:	b2d8      	uxtb	r0, r3
 8001152:	7ffa      	ldrb	r2, [r7, #31]
 8001154:	79bb      	ldrb	r3, [r7, #6]
 8001156:	4413      	add	r3, r2
 8001158:	b2db      	uxtb	r3, r3
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	4619      	mov	r1, r3
 800115e:	f000 fbf3 	bl	8001948 <drawPixel>
 8001162:	e00b      	b.n	800117c <drawChar+0x8a0>
                }
                else{
                    drawPixel(x_co_ord+col,y_co_ord+row,Color_Black);           // if bit is clear, draw black pixel
 8001164:	79fa      	ldrb	r2, [r7, #7]
 8001166:	7fbb      	ldrb	r3, [r7, #30]
 8001168:	4413      	add	r3, r2
 800116a:	b2d8      	uxtb	r0, r3
 800116c:	7ffa      	ldrb	r2, [r7, #31]
 800116e:	79bb      	ldrb	r3, [r7, #6]
 8001170:	4413      	add	r3, r2
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2200      	movs	r2, #0
 8001176:	4619      	mov	r1, r3
 8001178:	f000 fbe6 	bl	8001948 <drawPixel>
            for(col = 0; col <= last_width ; col++){                            // count through pixels in row
 800117c:	7fbb      	ldrb	r3, [r7, #30]
 800117e:	3301      	adds	r3, #1
 8001180:	77bb      	strb	r3, [r7, #30]
 8001182:	4b4d      	ldr	r3, [pc, #308]	; (80012b8 <drawChar+0x9dc>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	7fba      	ldrb	r2, [r7, #30]
 8001188:	429a      	cmp	r2, r3
 800118a:	d9d4      	bls.n	8001136 <drawChar+0x85a>
        for(row = font_nrows; row > 0; row--){                                  // read pixels right to left
 800118c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	3b01      	subs	r3, #1
 8001194:	b2db      	uxtb	r3, r3
 8001196:	77fb      	strb	r3, [r7, #31]
 8001198:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800119c:	2b00      	cmp	r3, #0
 800119e:	dc87      	bgt.n	80010b0 <drawChar+0x7d4>
                }
            }
        }
        if( display_x <= (95-last_width)){                                      // are we still within display?
 80011a0:	4b46      	ldr	r3, [pc, #280]	; (80012bc <drawChar+0x9e0>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b44      	ldr	r3, [pc, #272]	; (80012b8 <drawChar+0x9dc>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	f1c3 035f 	rsb	r3, r3, #95	; 0x5f
 80011ae:	429a      	cmp	r2, r3
 80011b0:	dc0e      	bgt.n	80011d0 <drawChar+0x8f4>
            display_x += last_width;                                            // if so move x coordinate right
 80011b2:	4b42      	ldr	r3, [pc, #264]	; (80012bc <drawChar+0x9e0>)
 80011b4:	781a      	ldrb	r2, [r3, #0]
 80011b6:	4b40      	ldr	r3, [pc, #256]	; (80012b8 <drawChar+0x9dc>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b3f      	ldr	r3, [pc, #252]	; (80012bc <drawChar+0x9e0>)
 80011c0:	701a      	strb	r2, [r3, #0]
            display_x++;                                                        // inter-character gap
 80011c2:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <drawChar+0x9e0>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b3c      	ldr	r3, [pc, #240]	; (80012bc <drawChar+0x9e0>)
 80011cc:	701a      	strb	r2, [r3, #0]
 80011ce:	e002      	b.n	80011d6 <drawChar+0x8fa>
        }
        else{
            display_x = 95;                                                     // set right hand edge
 80011d0:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <drawChar+0x9e0>)
 80011d2:	225f      	movs	r2, #95	; 0x5f
 80011d4:	701a      	strb	r2, [r3, #0]
        }
    }

    if (OLED_font == 8){
 80011d6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80011da:	2b08      	cmp	r3, #8
 80011dc:	f040 80b0 	bne.w	8001340 <drawChar+0xa64>
        font_nrows = guiFont_Tahoma_8_Regular[6];                               // number of bytes in each entry
 80011e0:	220d      	movs	r2, #13
 80011e2:	4b37      	ldr	r3, [pc, #220]	; (80012c0 <drawChar+0x9e4>)
 80011e4:	701a      	strb	r2, [r3, #0]

        ascii_off = ascii_in & 0x7f;                                            // map high values to low ones
 80011e6:	797b      	ldrb	r3, [r7, #5]
 80011e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011ec:	74fb      	strb	r3, [r7, #19]
        if(ascii_off >= 32){                                                    // always assume character 0x20 space as first character
 80011ee:	7cfb      	ldrb	r3, [r7, #19]
 80011f0:	2b1f      	cmp	r3, #31
 80011f2:	d902      	bls.n	80011fa <drawChar+0x91e>
            ascii_off -= 32;                                                    // remap
 80011f4:	7cfb      	ldrb	r3, [r7, #19]
 80011f6:	3b20      	subs	r3, #32
 80011f8:	74fb      	strb	r3, [r7, #19]
        }
        for(row = font_nrows; row > 0; row--){                                  // read pixels right to left
 80011fa:	4b31      	ldr	r3, [pc, #196]	; (80012c0 <drawChar+0x9e4>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	77fb      	strb	r3, [r7, #31]
 8001200:	e07e      	b.n	8001300 <drawChar+0xa24>
            font_pointer = (ascii_off*4)+8;                                     // skip 8 byte header
 8001202:	7cfb      	ldrb	r3, [r7, #19]
 8001204:	3302      	adds	r3, #2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	60fb      	str	r3, [r7, #12]
            last_width = guiFont_Tahoma_8_Regular[font_pointer];                // read out character width (excluding filler bytes)
 800120a:	4a2f      	ldr	r2, [pc, #188]	; (80012c8 <drawChar+0x9ec>)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	781a      	ldrb	r2, [r3, #0]
 8001212:	4b29      	ldr	r3, [pc, #164]	; (80012b8 <drawChar+0x9dc>)
 8001214:	701a      	strb	r2, [r3, #0]
            font_offset = guiFont_Tahoma_8_Regular[font_pointer+1];             // get offset low
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3301      	adds	r3, #1
 800121a:	4a2b      	ldr	r2, [pc, #172]	; (80012c8 <drawChar+0x9ec>)
 800121c:	5cd3      	ldrb	r3, [r2, r3]
 800121e:	617b      	str	r3, [r7, #20]
            font_offset += guiFont_Tahoma_8_Regular[font_pointer+2]*256;        // get offset middle
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	3302      	adds	r3, #2
 8001224:	4a28      	ldr	r2, [pc, #160]	; (80012c8 <drawChar+0x9ec>)
 8001226:	5cd3      	ldrb	r3, [r2, r3]
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	461a      	mov	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	4413      	add	r3, r2
 8001230:	617b      	str	r3, [r7, #20]
            font_offset += (unsigned long)guiFont_Tahoma_8_Regular[font_pointer+3]*65536;  // get offset high and force long type calculation
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	3303      	adds	r3, #3
 8001236:	4a24      	ldr	r2, [pc, #144]	; (80012c8 <drawChar+0x9ec>)
 8001238:	5cd3      	ldrb	r3, [r2, r3]
 800123a:	041b      	lsls	r3, r3, #16
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	4413      	add	r3, r2
 8001240:	617b      	str	r3, [r7, #20]
            font_offset += row;                                                 // add in the row offset
 8001242:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	4413      	add	r3, r2
 800124a:	617b      	str	r3, [r7, #20]
            if(last_width > 8){                                                 // if width > 8 then we need 2 bytes per row
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <drawChar+0x9dc>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b08      	cmp	r3, #8
 8001252:	d904      	bls.n	800125e <drawChar+0x982>
                font_offset += row;                                             // so double up byte offset
 8001254:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	4413      	add	r3, r2
 800125c:	617b      	str	r3, [r7, #20]
            }
            font_row = guiFont_Tahoma_8_Regular[font_offset];                   // get a row of up to 8 pixels
 800125e:	4a1a      	ldr	r2, [pc, #104]	; (80012c8 <drawChar+0x9ec>)
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	4413      	add	r3, r2
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	61bb      	str	r3, [r7, #24]
            if(last_width > 8){                                                 // if width > 8 then need second byte of pixels
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <drawChar+0x9dc>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b08      	cmp	r3, #8
 800126e:	d908      	bls.n	8001282 <drawChar+0x9a6>
                font_row += (guiFont_Tahoma_8_Regular[font_offset+1])*256;      // so go fetch a further byte
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	3301      	adds	r3, #1
 8001274:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <drawChar+0x9ec>)
 8001276:	5cd3      	ldrb	r3, [r2, r3]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	461a      	mov	r2, r3
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	4413      	add	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
            }
            for(col = 0; col <= last_width ; col++){                            // count through pixels in row
 8001282:	2300      	movs	r3, #0
 8001284:	77bb      	strb	r3, [r7, #30]
 8001286:	e030      	b.n	80012ea <drawChar+0xa0e>
                DDRAM_access();
 8001288:	f7ff faca 	bl	8000820 <DDRAM_access>
                if((font_row >> col)&0x01){
 800128c:	7fbb      	ldrb	r3, [r7, #30]
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	fa22 f303 	lsr.w	r3, r2, r3
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	d017      	beq.n	80012cc <drawChar+0x9f0>
                    drawPixel(x_co_ord+col,y_co_ord+row,color);                 // if bit is set, draw coloured pixel
 800129c:	79fa      	ldrb	r2, [r7, #7]
 800129e:	7fbb      	ldrb	r3, [r7, #30]
 80012a0:	4413      	add	r3, r2
 80012a2:	b2d8      	uxtb	r0, r3
 80012a4:	7ffa      	ldrb	r2, [r7, #31]
 80012a6:	79bb      	ldrb	r3, [r7, #6]
 80012a8:	4413      	add	r3, r2
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	887a      	ldrh	r2, [r7, #2]
 80012ae:	4619      	mov	r1, r3
 80012b0:	f000 fb4a 	bl	8001948 <drawPixel>
 80012b4:	e016      	b.n	80012e4 <drawChar+0xa08>
 80012b6:	bf00      	nop
 80012b8:	2000e6d7 	.word	0x2000e6d7
 80012bc:	2000e6d5 	.word	0x2000e6d5
 80012c0:	2000e6d8 	.word	0x2000e6d8
 80012c4:	08006840 	.word	0x08006840
 80012c8:	0800d4ec 	.word	0x0800d4ec
                }
                else{
                    drawPixel(x_co_ord+col,y_co_ord+row,Color_Black);           // if bit is clear, draw black pixel
 80012cc:	79fa      	ldrb	r2, [r7, #7]
 80012ce:	7fbb      	ldrb	r3, [r7, #30]
 80012d0:	4413      	add	r3, r2
 80012d2:	b2d8      	uxtb	r0, r3
 80012d4:	7ffa      	ldrb	r2, [r7, #31]
 80012d6:	79bb      	ldrb	r3, [r7, #6]
 80012d8:	4413      	add	r3, r2
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	f000 fb32 	bl	8001948 <drawPixel>
            for(col = 0; col <= last_width ; col++){                            // count through pixels in row
 80012e4:	7fbb      	ldrb	r3, [r7, #30]
 80012e6:	3301      	adds	r3, #1
 80012e8:	77bb      	strb	r3, [r7, #30]
 80012ea:	4ba1      	ldr	r3, [pc, #644]	; (8001570 <drawChar+0xc94>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	7fba      	ldrb	r2, [r7, #30]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d9c9      	bls.n	8001288 <drawChar+0x9ac>
        for(row = font_nrows; row > 0; row--){                                  // read pixels right to left
 80012f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	3b01      	subs	r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	77fb      	strb	r3, [r7, #31]
 8001300:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001304:	2b00      	cmp	r3, #0
 8001306:	f73f af7c 	bgt.w	8001202 <drawChar+0x926>
                }
            }
        }
        if( display_x <= (95-last_width)){                                      // are we still within display?
 800130a:	4b9a      	ldr	r3, [pc, #616]	; (8001574 <drawChar+0xc98>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	4b97      	ldr	r3, [pc, #604]	; (8001570 <drawChar+0xc94>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	f1c3 035f 	rsb	r3, r3, #95	; 0x5f
 8001318:	429a      	cmp	r2, r3
 800131a:	dc0e      	bgt.n	800133a <drawChar+0xa5e>
            display_x += last_width;                                            // if so move x coordinate right
 800131c:	4b95      	ldr	r3, [pc, #596]	; (8001574 <drawChar+0xc98>)
 800131e:	781a      	ldrb	r2, [r3, #0]
 8001320:	4b93      	ldr	r3, [pc, #588]	; (8001570 <drawChar+0xc94>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4413      	add	r3, r2
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b92      	ldr	r3, [pc, #584]	; (8001574 <drawChar+0xc98>)
 800132a:	701a      	strb	r2, [r3, #0]
            display_x++;                                                        // inter-character gap
 800132c:	4b91      	ldr	r3, [pc, #580]	; (8001574 <drawChar+0xc98>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b8f      	ldr	r3, [pc, #572]	; (8001574 <drawChar+0xc98>)
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	e002      	b.n	8001340 <drawChar+0xa64>
        }
        else{
            display_x = 95;                                                     // set right hand edge
 800133a:	4b8e      	ldr	r3, [pc, #568]	; (8001574 <drawChar+0xc98>)
 800133c:	225f      	movs	r2, #95	; 0x5f
 800133e:	701a      	strb	r2, [r3, #0]
        }
    }

    if (OLED_font == 10){
 8001340:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001344:	2b0a      	cmp	r3, #10
 8001346:	f040 80a4 	bne.w	8001492 <drawChar+0xbb6>
        font_nrows = guiFont_Tahoma_10_Regular[6];                              // number of bytes in each entry
 800134a:	2210      	movs	r2, #16
 800134c:	4b8a      	ldr	r3, [pc, #552]	; (8001578 <drawChar+0xc9c>)
 800134e:	701a      	strb	r2, [r3, #0]

        ascii_off = ascii_in & 0x7f;                                            // map high values to low ones
 8001350:	797b      	ldrb	r3, [r7, #5]
 8001352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001356:	74fb      	strb	r3, [r7, #19]
        if(ascii_off >= 32){                                                    // always assume character 0x20 space as first character
 8001358:	7cfb      	ldrb	r3, [r7, #19]
 800135a:	2b1f      	cmp	r3, #31
 800135c:	d902      	bls.n	8001364 <drawChar+0xa88>
            ascii_off -= 32;                                                    // remap
 800135e:	7cfb      	ldrb	r3, [r7, #19]
 8001360:	3b20      	subs	r3, #32
 8001362:	74fb      	strb	r3, [r7, #19]
        }
        for(row = font_nrows; row > 0; row--){                                  // read pixels right to left
 8001364:	4b84      	ldr	r3, [pc, #528]	; (8001578 <drawChar+0xc9c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	77fb      	strb	r3, [r7, #31]
 800136a:	e073      	b.n	8001454 <drawChar+0xb78>
            font_pointer = (ascii_off*4)+8;                                     // skip 8 byte header
 800136c:	7cfb      	ldrb	r3, [r7, #19]
 800136e:	3302      	adds	r3, #2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	60fb      	str	r3, [r7, #12]
            last_width = guiFont_Tahoma_10_Regular[font_pointer];               // read out character width (excluding filler bytes)
 8001374:	4a81      	ldr	r2, [pc, #516]	; (800157c <drawChar+0xca0>)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4413      	add	r3, r2
 800137a:	781a      	ldrb	r2, [r3, #0]
 800137c:	4b7c      	ldr	r3, [pc, #496]	; (8001570 <drawChar+0xc94>)
 800137e:	701a      	strb	r2, [r3, #0]
            font_offset = guiFont_Tahoma_10_Regular[font_pointer+1];            // get offset low
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	3301      	adds	r3, #1
 8001384:	4a7d      	ldr	r2, [pc, #500]	; (800157c <drawChar+0xca0>)
 8001386:	5cd3      	ldrb	r3, [r2, r3]
 8001388:	617b      	str	r3, [r7, #20]
            font_offset += guiFont_Tahoma_10_Regular[font_pointer+2]*256;       // get offset middle
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	3302      	adds	r3, #2
 800138e:	4a7b      	ldr	r2, [pc, #492]	; (800157c <drawChar+0xca0>)
 8001390:	5cd3      	ldrb	r3, [r2, r3]
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	461a      	mov	r2, r3
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	4413      	add	r3, r2
 800139a:	617b      	str	r3, [r7, #20]
            font_offset += (unsigned long)guiFont_Tahoma_10_Regular[font_pointer+3]*65536;  // get offset high and force long type calculation
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3303      	adds	r3, #3
 80013a0:	4a76      	ldr	r2, [pc, #472]	; (800157c <drawChar+0xca0>)
 80013a2:	5cd3      	ldrb	r3, [r2, r3]
 80013a4:	041b      	lsls	r3, r3, #16
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	4413      	add	r3, r2
 80013aa:	617b      	str	r3, [r7, #20]
            font_offset += row;                                                 // add in the row offset
 80013ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	4413      	add	r3, r2
 80013b4:	617b      	str	r3, [r7, #20]
            if(last_width > 8){                                                 // if width > 8 then we need 2 bytes per row
 80013b6:	4b6e      	ldr	r3, [pc, #440]	; (8001570 <drawChar+0xc94>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d904      	bls.n	80013c8 <drawChar+0xaec>
                font_offset += row;                                             // so double up byte offset
 80013be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4413      	add	r3, r2
 80013c6:	617b      	str	r3, [r7, #20]
            }
            font_row = guiFont_Tahoma_10_Regular[font_offset];                  // get a row of up to 8 pixels
 80013c8:	4a6c      	ldr	r2, [pc, #432]	; (800157c <drawChar+0xca0>)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	4413      	add	r3, r2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	61bb      	str	r3, [r7, #24]
            if(last_width > 8){                                                 // if width > 8 then need second byte of pixels
 80013d2:	4b67      	ldr	r3, [pc, #412]	; (8001570 <drawChar+0xc94>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d908      	bls.n	80013ec <drawChar+0xb10>
                font_row += (guiFont_Tahoma_10_Regular[font_offset+1])*256;     // so go fetch a further byte
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3301      	adds	r3, #1
 80013de:	4a67      	ldr	r2, [pc, #412]	; (800157c <drawChar+0xca0>)
 80013e0:	5cd3      	ldrb	r3, [r2, r3]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	461a      	mov	r2, r3
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	4413      	add	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
            }
            for(col = 0; col <= last_width ; col++){                            // count through pixels in row
 80013ec:	2300      	movs	r3, #0
 80013ee:	77bb      	strb	r3, [r7, #30]
 80013f0:	e025      	b.n	800143e <drawChar+0xb62>
                DDRAM_access();
 80013f2:	f7ff fa15 	bl	8000820 <DDRAM_access>
                if((font_row >> col)&0x01){
 80013f6:	7fbb      	ldrb	r3, [r7, #30]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	fa22 f303 	lsr.w	r3, r2, r3
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00c      	beq.n	8001420 <drawChar+0xb44>
                    drawPixel(x_co_ord+col,y_co_ord+row,color);                 // if bit is set, draw coloured pixel
 8001406:	79fa      	ldrb	r2, [r7, #7]
 8001408:	7fbb      	ldrb	r3, [r7, #30]
 800140a:	4413      	add	r3, r2
 800140c:	b2d8      	uxtb	r0, r3
 800140e:	7ffa      	ldrb	r2, [r7, #31]
 8001410:	79bb      	ldrb	r3, [r7, #6]
 8001412:	4413      	add	r3, r2
 8001414:	b2db      	uxtb	r3, r3
 8001416:	887a      	ldrh	r2, [r7, #2]
 8001418:	4619      	mov	r1, r3
 800141a:	f000 fa95 	bl	8001948 <drawPixel>
 800141e:	e00b      	b.n	8001438 <drawChar+0xb5c>
                }
                else{
                    drawPixel(x_co_ord+col,y_co_ord+row,Color_Black);           // if bit is clear, draw black pixel
 8001420:	79fa      	ldrb	r2, [r7, #7]
 8001422:	7fbb      	ldrb	r3, [r7, #30]
 8001424:	4413      	add	r3, r2
 8001426:	b2d8      	uxtb	r0, r3
 8001428:	7ffa      	ldrb	r2, [r7, #31]
 800142a:	79bb      	ldrb	r3, [r7, #6]
 800142c:	4413      	add	r3, r2
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2200      	movs	r2, #0
 8001432:	4619      	mov	r1, r3
 8001434:	f000 fa88 	bl	8001948 <drawPixel>
            for(col = 0; col <= last_width ; col++){                            // count through pixels in row
 8001438:	7fbb      	ldrb	r3, [r7, #30]
 800143a:	3301      	adds	r3, #1
 800143c:	77bb      	strb	r3, [r7, #30]
 800143e:	4b4c      	ldr	r3, [pc, #304]	; (8001570 <drawChar+0xc94>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	7fba      	ldrb	r2, [r7, #30]
 8001444:	429a      	cmp	r2, r3
 8001446:	d9d4      	bls.n	80013f2 <drawChar+0xb16>
        for(row = font_nrows; row > 0; row--){                                  // read pixels right to left
 8001448:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	3b01      	subs	r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	77fb      	strb	r3, [r7, #31]
 8001454:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001458:	2b00      	cmp	r3, #0
 800145a:	dc87      	bgt.n	800136c <drawChar+0xa90>
                }
            }
        }
        if( display_x <= (95-last_width)){                                      // are we still within display?
 800145c:	4b45      	ldr	r3, [pc, #276]	; (8001574 <drawChar+0xc98>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b43      	ldr	r3, [pc, #268]	; (8001570 <drawChar+0xc94>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	f1c3 035f 	rsb	r3, r3, #95	; 0x5f
 800146a:	429a      	cmp	r2, r3
 800146c:	dc0e      	bgt.n	800148c <drawChar+0xbb0>
            display_x += last_width;                                            // if so move x coordinate right
 800146e:	4b41      	ldr	r3, [pc, #260]	; (8001574 <drawChar+0xc98>)
 8001470:	781a      	ldrb	r2, [r3, #0]
 8001472:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <drawChar+0xc94>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b3e      	ldr	r3, [pc, #248]	; (8001574 <drawChar+0xc98>)
 800147c:	701a      	strb	r2, [r3, #0]
            display_x++;                                                        // inter-character gap
 800147e:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <drawChar+0xc98>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	3301      	adds	r3, #1
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4b3b      	ldr	r3, [pc, #236]	; (8001574 <drawChar+0xc98>)
 8001488:	701a      	strb	r2, [r3, #0]
 800148a:	e002      	b.n	8001492 <drawChar+0xbb6>
        }
        else{
            display_x = 95;                                                     // set right hand edge
 800148c:	4b39      	ldr	r3, [pc, #228]	; (8001574 <drawChar+0xc98>)
 800148e:	225f      	movs	r2, #95	; 0x5f
 8001490:	701a      	strb	r2, [r3, #0]
        }
    }

    if (OLED_font == 14){
 8001492:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001496:	2b0e      	cmp	r3, #14
 8001498:	f040 80c5 	bne.w	8001626 <drawChar+0xd4a>
        font_nrows = guiFont_Tahoma_14_Regular[6];
 800149c:	2217      	movs	r2, #23
 800149e:	4b36      	ldr	r3, [pc, #216]	; (8001578 <drawChar+0xc9c>)
 80014a0:	701a      	strb	r2, [r3, #0]

        ascii_off = ascii_in & 0x7f;                                            // map high values to low ones
 80014a2:	797b      	ldrb	r3, [r7, #5]
 80014a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014a8:	74fb      	strb	r3, [r7, #19]
        if(ascii_off >= 32){                                                    // always assume character 0x20 space as first character
 80014aa:	7cfb      	ldrb	r3, [r7, #19]
 80014ac:	2b1f      	cmp	r3, #31
 80014ae:	d902      	bls.n	80014b6 <drawChar+0xbda>
            ascii_off -= 32;                                                    // remap
 80014b0:	7cfb      	ldrb	r3, [r7, #19]
 80014b2:	3b20      	subs	r3, #32
 80014b4:	74fb      	strb	r3, [r7, #19]
        }
        for(row = font_nrows; row > 0; row--){
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <drawChar+0xc9c>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	77fb      	strb	r3, [r7, #31]
 80014bc:	e093      	b.n	80015e6 <drawChar+0xd0a>
            font_pointer = (ascii_off*4)+8;                                     // skip header
 80014be:	7cfb      	ldrb	r3, [r7, #19]
 80014c0:	3302      	adds	r3, #2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	60fb      	str	r3, [r7, #12]
            last_width = guiFont_Tahoma_14_Regular[font_pointer];               // character width
 80014c6:	4a2e      	ldr	r2, [pc, #184]	; (8001580 <drawChar+0xca4>)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	781a      	ldrb	r2, [r3, #0]
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <drawChar+0xc94>)
 80014d0:	701a      	strb	r2, [r3, #0]
            font_offset = guiFont_Tahoma_14_Regular[font_pointer+1];            // 3 bytes offset value
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3301      	adds	r3, #1
 80014d6:	4a2a      	ldr	r2, [pc, #168]	; (8001580 <drawChar+0xca4>)
 80014d8:	5cd3      	ldrb	r3, [r2, r3]
 80014da:	617b      	str	r3, [r7, #20]
            font_offset |= guiFont_Tahoma_14_Regular[font_pointer+2] << 8;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	3302      	adds	r3, #2
 80014e0:	4a27      	ldr	r2, [pc, #156]	; (8001580 <drawChar+0xca4>)
 80014e2:	5cd3      	ldrb	r3, [r2, r3]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	461a      	mov	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	617b      	str	r3, [r7, #20]
            font_offset |= (unsigned long)guiFont_Tahoma_14_Regular[font_pointer+3] << 16;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3303      	adds	r3, #3
 80014f2:	4a23      	ldr	r2, [pc, #140]	; (8001580 <drawChar+0xca4>)
 80014f4:	5cd3      	ldrb	r3, [r2, r3]
 80014f6:	041b      	lsls	r3, r3, #16
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	617b      	str	r3, [r7, #20]
            font_offset += row;
 80014fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4413      	add	r3, r2
 8001506:	617b      	str	r3, [r7, #20]
            if(last_width > 8){                                                 // two bytes in each row
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <drawChar+0xc94>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b08      	cmp	r3, #8
 800150e:	d904      	bls.n	800151a <drawChar+0xc3e>
                font_offset += row;
 8001510:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	4413      	add	r3, r2
 8001518:	617b      	str	r3, [r7, #20]
            }
            if(last_width > 16){                                                // 3 bytes in each row
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <drawChar+0xc94>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b10      	cmp	r3, #16
 8001520:	d904      	bls.n	800152c <drawChar+0xc50>
                font_offset += row;
 8001522:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	4413      	add	r3, r2
 800152a:	617b      	str	r3, [r7, #20]
            }
            font_row = guiFont_Tahoma_14_Regular[font_offset];                  // build up row from 1, 2 or 3 bytes
 800152c:	4a14      	ldr	r2, [pc, #80]	; (8001580 <drawChar+0xca4>)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	4413      	add	r3, r2
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	61bb      	str	r3, [r7, #24]
            if(last_width > 8){
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <drawChar+0xc94>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b08      	cmp	r3, #8
 800153c:	d908      	bls.n	8001550 <drawChar+0xc74>
                font_row |= (guiFont_Tahoma_14_Regular[font_offset+1]) << 8;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <drawChar+0xca4>)
 8001544:	5cd3      	ldrb	r3, [r2, r3]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	461a      	mov	r2, r3
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
            }
            if(last_width > 16){
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <drawChar+0xc94>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b10      	cmp	r3, #16
 8001556:	d907      	bls.n	8001568 <drawChar+0xc8c>
                font_row |= (unsigned long)(guiFont_Tahoma_14_Regular[font_offset+2]) << 16;   // force long arithmetic
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	3302      	adds	r3, #2
 800155c:	4a08      	ldr	r2, [pc, #32]	; (8001580 <drawChar+0xca4>)
 800155e:	5cd3      	ldrb	r3, [r2, r3]
 8001560:	041b      	lsls	r3, r3, #16
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
            }
            for(col = 0; col <= last_width ; col++){                            // count through pixels in row
 8001568:	2300      	movs	r3, #0
 800156a:	77bb      	strb	r3, [r7, #30]
 800156c:	e030      	b.n	80015d0 <drawChar+0xcf4>
 800156e:	bf00      	nop
 8001570:	2000e6d7 	.word	0x2000e6d7
 8001574:	2000e6d5 	.word	0x2000e6d5
 8001578:	2000e6d8 	.word	0x2000e6d8
 800157c:	0800db7c 	.word	0x0800db7c
 8001580:	0800733c 	.word	0x0800733c
                DDRAM_access();
 8001584:	f7ff f94c 	bl	8000820 <DDRAM_access>
                if((font_row >> col)&0x01){
 8001588:	7fbb      	ldrb	r3, [r7, #30]
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	fa22 f303 	lsr.w	r3, r2, r3
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00c      	beq.n	80015b2 <drawChar+0xcd6>
                    drawPixel(x_co_ord+col,y_co_ord+row,color);                 // if bit is set, draw coloured pixel
 8001598:	79fa      	ldrb	r2, [r7, #7]
 800159a:	7fbb      	ldrb	r3, [r7, #30]
 800159c:	4413      	add	r3, r2
 800159e:	b2d8      	uxtb	r0, r3
 80015a0:	7ffa      	ldrb	r2, [r7, #31]
 80015a2:	79bb      	ldrb	r3, [r7, #6]
 80015a4:	4413      	add	r3, r2
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	887a      	ldrh	r2, [r7, #2]
 80015aa:	4619      	mov	r1, r3
 80015ac:	f000 f9cc 	bl	8001948 <drawPixel>
 80015b0:	e00b      	b.n	80015ca <drawChar+0xcee>
                }
                else{
                    drawPixel(x_co_ord+col,y_co_ord+row,Color_Black);           // if bit is clear, draw black pixel
 80015b2:	79fa      	ldrb	r2, [r7, #7]
 80015b4:	7fbb      	ldrb	r3, [r7, #30]
 80015b6:	4413      	add	r3, r2
 80015b8:	b2d8      	uxtb	r0, r3
 80015ba:	7ffa      	ldrb	r2, [r7, #31]
 80015bc:	79bb      	ldrb	r3, [r7, #6]
 80015be:	4413      	add	r3, r2
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2200      	movs	r2, #0
 80015c4:	4619      	mov	r1, r3
 80015c6:	f000 f9bf 	bl	8001948 <drawPixel>
            for(col = 0; col <= last_width ; col++){                            // count through pixels in row
 80015ca:	7fbb      	ldrb	r3, [r7, #30]
 80015cc:	3301      	adds	r3, #1
 80015ce:	77bb      	strb	r3, [r7, #30]
 80015d0:	4b7f      	ldr	r3, [pc, #508]	; (80017d0 <drawChar+0xef4>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	7fba      	ldrb	r2, [r7, #30]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d9d4      	bls.n	8001584 <drawChar+0xca8>
        for(row = font_nrows; row > 0; row--){
 80015da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	3b01      	subs	r3, #1
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	77fb      	strb	r3, [r7, #31]
 80015e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f73f af67 	bgt.w	80014be <drawChar+0xbe2>
                }
            }
        }
        if( display_x <= (95-last_width)){                                      // are we still within display?
 80015f0:	4b78      	ldr	r3, [pc, #480]	; (80017d4 <drawChar+0xef8>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b76      	ldr	r3, [pc, #472]	; (80017d0 <drawChar+0xef4>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	f1c3 035f 	rsb	r3, r3, #95	; 0x5f
 80015fe:	429a      	cmp	r2, r3
 8001600:	dc0e      	bgt.n	8001620 <drawChar+0xd44>
            display_x += last_width;                                            // if so move x coordinate right
 8001602:	4b74      	ldr	r3, [pc, #464]	; (80017d4 <drawChar+0xef8>)
 8001604:	781a      	ldrb	r2, [r3, #0]
 8001606:	4b72      	ldr	r3, [pc, #456]	; (80017d0 <drawChar+0xef4>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b71      	ldr	r3, [pc, #452]	; (80017d4 <drawChar+0xef8>)
 8001610:	701a      	strb	r2, [r3, #0]
            display_x++;                                                        // inter-character gap
 8001612:	4b70      	ldr	r3, [pc, #448]	; (80017d4 <drawChar+0xef8>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	3301      	adds	r3, #1
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4b6e      	ldr	r3, [pc, #440]	; (80017d4 <drawChar+0xef8>)
 800161c:	701a      	strb	r2, [r3, #0]
 800161e:	e002      	b.n	8001626 <drawChar+0xd4a>
        }
        else{
            display_x = 95;                                                     // set right hand edge
 8001620:	4b6c      	ldr	r3, [pc, #432]	; (80017d4 <drawChar+0xef8>)
 8001622:	225f      	movs	r2, #95	; 0x5f
 8001624:	701a      	strb	r2, [r3, #0]
        }
    }

    if (OLED_font == 16){
 8001626:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800162a:	2b10      	cmp	r3, #16
 800162c:	f040 80ba 	bne.w	80017a4 <drawChar+0xec8>
        font_nrows = guiFont_Tahoma_16_Regular[6];
 8001630:	2219      	movs	r2, #25
 8001632:	4b69      	ldr	r3, [pc, #420]	; (80017d8 <drawChar+0xefc>)
 8001634:	701a      	strb	r2, [r3, #0]

        ascii_off = ascii_in & 0x7f;                                            // map high values to low ones
 8001636:	797b      	ldrb	r3, [r7, #5]
 8001638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800163c:	74fb      	strb	r3, [r7, #19]
        if(ascii_off >= 32){                                                    // always assume character 0x20 space as first character
 800163e:	7cfb      	ldrb	r3, [r7, #19]
 8001640:	2b1f      	cmp	r3, #31
 8001642:	d902      	bls.n	800164a <drawChar+0xd6e>
            ascii_off -= 32;                                                    // remap
 8001644:	7cfb      	ldrb	r3, [r7, #19]
 8001646:	3b20      	subs	r3, #32
 8001648:	74fb      	strb	r3, [r7, #19]
        }
        for(row = font_nrows; row > 0; row--){
 800164a:	4b63      	ldr	r3, [pc, #396]	; (80017d8 <drawChar+0xefc>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	77fb      	strb	r3, [r7, #31]
 8001650:	e088      	b.n	8001764 <drawChar+0xe88>
            font_pointer = (ascii_off*4)+8;                                     // skip header
 8001652:	7cfb      	ldrb	r3, [r7, #19]
 8001654:	3302      	adds	r3, #2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	60fb      	str	r3, [r7, #12]
            last_width = guiFont_Tahoma_16_Regular[font_pointer];               // character width
 800165a:	4a60      	ldr	r2, [pc, #384]	; (80017dc <drawChar+0xf00>)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	781a      	ldrb	r2, [r3, #0]
 8001662:	4b5b      	ldr	r3, [pc, #364]	; (80017d0 <drawChar+0xef4>)
 8001664:	701a      	strb	r2, [r3, #0]
            font_offset = guiFont_Tahoma_16_Regular[font_pointer+1];            // 3 bytes offset value
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	3301      	adds	r3, #1
 800166a:	4a5c      	ldr	r2, [pc, #368]	; (80017dc <drawChar+0xf00>)
 800166c:	5cd3      	ldrb	r3, [r2, r3]
 800166e:	617b      	str	r3, [r7, #20]
            font_offset |= guiFont_Tahoma_16_Regular[font_pointer+2] << 8;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3302      	adds	r3, #2
 8001674:	4a59      	ldr	r2, [pc, #356]	; (80017dc <drawChar+0xf00>)
 8001676:	5cd3      	ldrb	r3, [r2, r3]
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	461a      	mov	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	4313      	orrs	r3, r2
 8001680:	617b      	str	r3, [r7, #20]
            font_offset |= (unsigned long)guiFont_Tahoma_16_Regular[font_pointer+3] << 16;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	3303      	adds	r3, #3
 8001686:	4a55      	ldr	r2, [pc, #340]	; (80017dc <drawChar+0xf00>)
 8001688:	5cd3      	ldrb	r3, [r2, r3]
 800168a:	041b      	lsls	r3, r3, #16
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	4313      	orrs	r3, r2
 8001690:	617b      	str	r3, [r7, #20]
            font_offset += row;
 8001692:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4413      	add	r3, r2
 800169a:	617b      	str	r3, [r7, #20]
            if(last_width > 8){                                                 // two bytes in each row
 800169c:	4b4c      	ldr	r3, [pc, #304]	; (80017d0 <drawChar+0xef4>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d904      	bls.n	80016ae <drawChar+0xdd2>
                font_offset += row;
 80016a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	4413      	add	r3, r2
 80016ac:	617b      	str	r3, [r7, #20]
            }
            if(last_width > 16){                                                // 3 bytes in each row
 80016ae:	4b48      	ldr	r3, [pc, #288]	; (80017d0 <drawChar+0xef4>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b10      	cmp	r3, #16
 80016b4:	d904      	bls.n	80016c0 <drawChar+0xde4>
                font_offset += row;
 80016b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4413      	add	r3, r2
 80016be:	617b      	str	r3, [r7, #20]
            }
            font_row = guiFont_Tahoma_16_Regular[font_offset];                  // build up row from 1, 2 or 3 bytes
 80016c0:	4a46      	ldr	r2, [pc, #280]	; (80017dc <drawChar+0xf00>)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	4413      	add	r3, r2
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	61bb      	str	r3, [r7, #24]
            if(last_width > 8){
 80016ca:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <drawChar+0xef4>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b08      	cmp	r3, #8
 80016d0:	d908      	bls.n	80016e4 <drawChar+0xe08>
                font_row |= (guiFont_Tahoma_16_Regular[font_offset+1]) << 8;
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3301      	adds	r3, #1
 80016d6:	4a41      	ldr	r2, [pc, #260]	; (80017dc <drawChar+0xf00>)
 80016d8:	5cd3      	ldrb	r3, [r2, r3]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	461a      	mov	r2, r3
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
            }
            if(last_width > 16){
 80016e4:	4b3a      	ldr	r3, [pc, #232]	; (80017d0 <drawChar+0xef4>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b10      	cmp	r3, #16
 80016ea:	d907      	bls.n	80016fc <drawChar+0xe20>
                font_row |= (unsigned long)(guiFont_Tahoma_16_Regular[font_offset+2]) << 16;   // force long arithmetic
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	3302      	adds	r3, #2
 80016f0:	4a3a      	ldr	r2, [pc, #232]	; (80017dc <drawChar+0xf00>)
 80016f2:	5cd3      	ldrb	r3, [r2, r3]
 80016f4:	041b      	lsls	r3, r3, #16
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
            }
            for(col = 0; col <= last_width ; col++){                            // count through pixels in row
 80016fc:	2300      	movs	r3, #0
 80016fe:	77bb      	strb	r3, [r7, #30]
 8001700:	e025      	b.n	800174e <drawChar+0xe72>
                DDRAM_access();
 8001702:	f7ff f88d 	bl	8000820 <DDRAM_access>
                if((font_row >> col)&0x01){
 8001706:	7fbb      	ldrb	r3, [r7, #30]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	fa22 f303 	lsr.w	r3, r2, r3
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00c      	beq.n	8001730 <drawChar+0xe54>
                    drawPixel(x_co_ord+col,y_co_ord+row,color);                 // if bit is set, draw coloured pixel
 8001716:	79fa      	ldrb	r2, [r7, #7]
 8001718:	7fbb      	ldrb	r3, [r7, #30]
 800171a:	4413      	add	r3, r2
 800171c:	b2d8      	uxtb	r0, r3
 800171e:	7ffa      	ldrb	r2, [r7, #31]
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	4413      	add	r3, r2
 8001724:	b2db      	uxtb	r3, r3
 8001726:	887a      	ldrh	r2, [r7, #2]
 8001728:	4619      	mov	r1, r3
 800172a:	f000 f90d 	bl	8001948 <drawPixel>
 800172e:	e00b      	b.n	8001748 <drawChar+0xe6c>
                }
                else{
                    drawPixel(x_co_ord+col,y_co_ord+row,Color_Black);           // if bit is clear, draw black pixel
 8001730:	79fa      	ldrb	r2, [r7, #7]
 8001732:	7fbb      	ldrb	r3, [r7, #30]
 8001734:	4413      	add	r3, r2
 8001736:	b2d8      	uxtb	r0, r3
 8001738:	7ffa      	ldrb	r2, [r7, #31]
 800173a:	79bb      	ldrb	r3, [r7, #6]
 800173c:	4413      	add	r3, r2
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2200      	movs	r2, #0
 8001742:	4619      	mov	r1, r3
 8001744:	f000 f900 	bl	8001948 <drawPixel>
            for(col = 0; col <= last_width ; col++){                            // count through pixels in row
 8001748:	7fbb      	ldrb	r3, [r7, #30]
 800174a:	3301      	adds	r3, #1
 800174c:	77bb      	strb	r3, [r7, #30]
 800174e:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <drawChar+0xef4>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	7fba      	ldrb	r2, [r7, #30]
 8001754:	429a      	cmp	r2, r3
 8001756:	d9d4      	bls.n	8001702 <drawChar+0xe26>
        for(row = font_nrows; row > 0; row--){
 8001758:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	3b01      	subs	r3, #1
 8001760:	b2db      	uxtb	r3, r3
 8001762:	77fb      	strb	r3, [r7, #31]
 8001764:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001768:	2b00      	cmp	r3, #0
 800176a:	f73f af72 	bgt.w	8001652 <drawChar+0xd76>
                }
            }
        }
        if( display_x <= (95-last_width)){                                      // are we still within display?
 800176e:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <drawChar+0xef8>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <drawChar+0xef4>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	f1c3 035f 	rsb	r3, r3, #95	; 0x5f
 800177c:	429a      	cmp	r2, r3
 800177e:	dc0e      	bgt.n	800179e <drawChar+0xec2>
            display_x += last_width;                                            // if so move x coordinate right
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <drawChar+0xef8>)
 8001782:	781a      	ldrb	r2, [r3, #0]
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <drawChar+0xef4>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	4413      	add	r3, r2
 800178a:	b2da      	uxtb	r2, r3
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <drawChar+0xef8>)
 800178e:	701a      	strb	r2, [r3, #0]
            display_x++;                                                        // inter-character gap
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <drawChar+0xef8>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <drawChar+0xef8>)
 800179a:	701a      	strb	r2, [r3, #0]
 800179c:	e002      	b.n	80017a4 <drawChar+0xec8>
        }
        else{
            display_x = 95;                                                     // set right hand edge
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <drawChar+0xef8>)
 80017a0:	225f      	movs	r2, #95	; 0x5f
 80017a2:	701a      	strb	r2, [r3, #0]
        }
    }

    if (OLED_font == 18){
 80017a4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017a8:	2b12      	cmp	r3, #18
 80017aa:	f040 80c2 	bne.w	8001932 <drawChar+0x1056>
        font_nrows = guiFont_Tahoma_18_Regular[6];
 80017ae:	221d      	movs	r2, #29
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <drawChar+0xefc>)
 80017b2:	701a      	strb	r2, [r3, #0]

        ascii_off = ascii_in & 0x7f;                                            // map high values to low ones
 80017b4:	797b      	ldrb	r3, [r7, #5]
 80017b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017ba:	74fb      	strb	r3, [r7, #19]
        if(ascii_off >= 32){                                                    // always assume character 0x20 space as first character
 80017bc:	7cfb      	ldrb	r3, [r7, #19]
 80017be:	2b1f      	cmp	r3, #31
 80017c0:	d902      	bls.n	80017c8 <drawChar+0xeec>
            ascii_off -= 32;                                                    // remap
 80017c2:	7cfb      	ldrb	r3, [r7, #19]
 80017c4:	3b20      	subs	r3, #32
 80017c6:	74fb      	strb	r3, [r7, #19]
        }
        for(row = font_nrows; row > 0; row--){
 80017c8:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <drawChar+0xefc>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	77fb      	strb	r3, [r7, #31]
 80017ce:	e090      	b.n	80018f2 <drawChar+0x1016>
 80017d0:	2000e6d7 	.word	0x2000e6d7
 80017d4:	2000e6d5 	.word	0x2000e6d5
 80017d8:	2000e6d8 	.word	0x2000e6d8
 80017dc:	0800c2e0 	.word	0x0800c2e0
            font_pointer = (ascii_off*4)+8;                                     // skip header
 80017e0:	7cfb      	ldrb	r3, [r7, #19]
 80017e2:	3302      	adds	r3, #2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	60fb      	str	r3, [r7, #12]
            last_width = guiFont_Tahoma_18_Regular[font_pointer];               // character width
 80017e8:	4a54      	ldr	r2, [pc, #336]	; (800193c <drawChar+0x1060>)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4413      	add	r3, r2
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	4b53      	ldr	r3, [pc, #332]	; (8001940 <drawChar+0x1064>)
 80017f2:	701a      	strb	r2, [r3, #0]
            font_offset = guiFont_Tahoma_18_Regular[font_pointer+1];            // 3 bytes offset value
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3301      	adds	r3, #1
 80017f8:	4a50      	ldr	r2, [pc, #320]	; (800193c <drawChar+0x1060>)
 80017fa:	5cd3      	ldrb	r3, [r2, r3]
 80017fc:	617b      	str	r3, [r7, #20]
            font_offset |= guiFont_Tahoma_18_Regular[font_pointer+2] << 8;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3302      	adds	r3, #2
 8001802:	4a4e      	ldr	r2, [pc, #312]	; (800193c <drawChar+0x1060>)
 8001804:	5cd3      	ldrb	r3, [r2, r3]
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	461a      	mov	r2, r3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	4313      	orrs	r3, r2
 800180e:	617b      	str	r3, [r7, #20]
            font_offset |= (unsigned long)guiFont_Tahoma_18_Regular[font_pointer+3] << 16;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3303      	adds	r3, #3
 8001814:	4a49      	ldr	r2, [pc, #292]	; (800193c <drawChar+0x1060>)
 8001816:	5cd3      	ldrb	r3, [r2, r3]
 8001818:	041b      	lsls	r3, r3, #16
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	4313      	orrs	r3, r2
 800181e:	617b      	str	r3, [r7, #20]
            font_offset += row;
 8001820:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	4413      	add	r3, r2
 8001828:	617b      	str	r3, [r7, #20]
            if(last_width > 8){                                                 // two bytes in each row
 800182a:	4b45      	ldr	r3, [pc, #276]	; (8001940 <drawChar+0x1064>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b08      	cmp	r3, #8
 8001830:	d904      	bls.n	800183c <drawChar+0xf60>
                font_offset += row;
 8001832:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4413      	add	r3, r2
 800183a:	617b      	str	r3, [r7, #20]
            }
            if(last_width > 16){                                                // 3 bytes in each row
 800183c:	4b40      	ldr	r3, [pc, #256]	; (8001940 <drawChar+0x1064>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b10      	cmp	r3, #16
 8001842:	d904      	bls.n	800184e <drawChar+0xf72>
                font_offset += row;
 8001844:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	4413      	add	r3, r2
 800184c:	617b      	str	r3, [r7, #20]
            }
            font_row = guiFont_Tahoma_18_Regular[font_offset];                  // build up row from 1, 2 or 3 bytes
 800184e:	4a3b      	ldr	r2, [pc, #236]	; (800193c <drawChar+0x1060>)
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	4413      	add	r3, r2
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	61bb      	str	r3, [r7, #24]
            if(last_width > 8){
 8001858:	4b39      	ldr	r3, [pc, #228]	; (8001940 <drawChar+0x1064>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b08      	cmp	r3, #8
 800185e:	d908      	bls.n	8001872 <drawChar+0xf96>
                font_row |= (guiFont_Tahoma_18_Regular[font_offset+1]) << 8;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3301      	adds	r3, #1
 8001864:	4a35      	ldr	r2, [pc, #212]	; (800193c <drawChar+0x1060>)
 8001866:	5cd3      	ldrb	r3, [r2, r3]
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	461a      	mov	r2, r3
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
            }
            if(last_width > 16){
 8001872:	4b33      	ldr	r3, [pc, #204]	; (8001940 <drawChar+0x1064>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b10      	cmp	r3, #16
 8001878:	d907      	bls.n	800188a <drawChar+0xfae>
                font_row |= (unsigned long)(guiFont_Tahoma_18_Regular[font_offset+2]) << 16;   // force long arithmetic
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	3302      	adds	r3, #2
 800187e:	4a2f      	ldr	r2, [pc, #188]	; (800193c <drawChar+0x1060>)
 8001880:	5cd3      	ldrb	r3, [r2, r3]
 8001882:	041b      	lsls	r3, r3, #16
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
            }
            for(col = 0; col <= last_width ; col++){                            // count through pixels in row
 800188a:	2300      	movs	r3, #0
 800188c:	77bb      	strb	r3, [r7, #30]
 800188e:	e025      	b.n	80018dc <drawChar+0x1000>
                DDRAM_access();
 8001890:	f7fe ffc6 	bl	8000820 <DDRAM_access>
                if((font_row >> col)&0x01){
 8001894:	7fbb      	ldrb	r3, [r7, #30]
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	fa22 f303 	lsr.w	r3, r2, r3
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00c      	beq.n	80018be <drawChar+0xfe2>
                    drawPixel(x_co_ord+col,y_co_ord+row,color);                 // if bit is set, draw coloured pixel
 80018a4:	79fa      	ldrb	r2, [r7, #7]
 80018a6:	7fbb      	ldrb	r3, [r7, #30]
 80018a8:	4413      	add	r3, r2
 80018aa:	b2d8      	uxtb	r0, r3
 80018ac:	7ffa      	ldrb	r2, [r7, #31]
 80018ae:	79bb      	ldrb	r3, [r7, #6]
 80018b0:	4413      	add	r3, r2
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	887a      	ldrh	r2, [r7, #2]
 80018b6:	4619      	mov	r1, r3
 80018b8:	f000 f846 	bl	8001948 <drawPixel>
 80018bc:	e00b      	b.n	80018d6 <drawChar+0xffa>
                }
                else{
                    drawPixel(x_co_ord+col,y_co_ord+row,Color_Black);           // if bit is clear, draw black pixel
 80018be:	79fa      	ldrb	r2, [r7, #7]
 80018c0:	7fbb      	ldrb	r3, [r7, #30]
 80018c2:	4413      	add	r3, r2
 80018c4:	b2d8      	uxtb	r0, r3
 80018c6:	7ffa      	ldrb	r2, [r7, #31]
 80018c8:	79bb      	ldrb	r3, [r7, #6]
 80018ca:	4413      	add	r3, r2
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2200      	movs	r2, #0
 80018d0:	4619      	mov	r1, r3
 80018d2:	f000 f839 	bl	8001948 <drawPixel>
            for(col = 0; col <= last_width ; col++){                            // count through pixels in row
 80018d6:	7fbb      	ldrb	r3, [r7, #30]
 80018d8:	3301      	adds	r3, #1
 80018da:	77bb      	strb	r3, [r7, #30]
 80018dc:	4b18      	ldr	r3, [pc, #96]	; (8001940 <drawChar+0x1064>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	7fba      	ldrb	r2, [r7, #30]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d9d4      	bls.n	8001890 <drawChar+0xfb4>
        for(row = font_nrows; row > 0; row--){
 80018e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	77fb      	strb	r3, [r7, #31]
 80018f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f73f af72 	bgt.w	80017e0 <drawChar+0xf04>
                }
            }
        }
        if( display_x <= (95-last_width)){                                      // are we still within display?
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <drawChar+0x1068>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <drawChar+0x1064>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	f1c3 035f 	rsb	r3, r3, #95	; 0x5f
 800190a:	429a      	cmp	r2, r3
 800190c:	dc0e      	bgt.n	800192c <drawChar+0x1050>
            display_x += last_width;                                            // if so move x coordinate right
 800190e:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <drawChar+0x1068>)
 8001910:	781a      	ldrb	r2, [r3, #0]
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <drawChar+0x1064>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <drawChar+0x1068>)
 800191c:	701a      	strb	r2, [r3, #0]
            display_x++;                                                        // inter-character gap
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <drawChar+0x1068>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	3301      	adds	r3, #1
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <drawChar+0x1068>)
 8001928:	701a      	strb	r2, [r3, #0]
            display_x = 95;                                                     // set right hand edge
        }
    }


}
 800192a:	e002      	b.n	8001932 <drawChar+0x1056>
            display_x = 95;                                                     // set right hand edge
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <drawChar+0x1068>)
 800192e:	225f      	movs	r2, #95	; 0x5f
 8001930:	701a      	strb	r2, [r3, #0]
}
 8001932:	bf00      	nop
 8001934:	3724      	adds	r7, #36	; 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd90      	pop	{r4, r7, pc}
 800193a:	bf00      	nop
 800193c:	08008310 	.word	0x08008310
 8001940:	2000e6d7 	.word	0x2000e6d7
 8001944:	2000e6d5 	.word	0x2000e6d5

08001948 <drawPixel>:

void drawPixel(char px, char py, uint16_t color){
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
 8001952:	460b      	mov	r3, r1
 8001954:	71bb      	strb	r3, [r7, #6]
 8001956:	4613      	mov	r3, r2
 8001958:	80bb      	strh	r3, [r7, #4]
	char swapped_x;

    if(px <96){                                                                 // check on screen
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	2b5f      	cmp	r3, #95	; 0x5f
 800195e:	d804      	bhi.n	800196a <drawPixel+0x22>
        swapped_x = 95 - px;                                                    // move x coordinate left/right
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	f1c3 035f 	rsb	r3, r3, #95	; 0x5f
 8001966:	73fb      	strb	r3, [r7, #15]
 8001968:	e001      	b.n	800196e <drawPixel+0x26>
    }
    else{
        swapped_x = 95;                                                         // left side of screen
 800196a:	235f      	movs	r3, #95	; 0x5f
 800196c:	73fb      	strb	r3, [r7, #15]
    }
    OLED_C_MemorySize( swapped_x,  swapped_x,  py,  py);                        // set display position
 800196e:	79bb      	ldrb	r3, [r7, #6]
 8001970:	79ba      	ldrb	r2, [r7, #6]
 8001972:	7bf9      	ldrb	r1, [r7, #15]
 8001974:	7bf8      	ldrb	r0, [r7, #15]
 8001976:	f7fe ff75 	bl	8000864 <OLED_C_MemorySize>
    DDRAM_access();                                                             // select data memory on display
 800197a:	f7fe ff51 	bl	8000820 <DDRAM_access>
    OLED_C_Color(color >> 8,color & 0xff);                                      // white
 800197e:	88bb      	ldrh	r3, [r7, #4]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	b29b      	uxth	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	88ba      	ldrh	r2, [r7, #4]
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe ff90 	bl	80008b2 <OLED_C_Color>
}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <drawFullScreenBitmap>:


void drawFullScreenBitmap(uint8_t bitmap[], int size_of_bitmap){
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
//	startscroll();
	int y_offset = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
    OLED_C_command(0x1D,0x02);                                                  // Set Memory Read/Write mode
 80019a8:	2102      	movs	r1, #2
 80019aa:	201d      	movs	r0, #29
 80019ac:	f7fe fe1c 	bl	80005e8 <OLED_C_command>
    OLED_C_MemorySize(0x00,0x5F,0x00,0x5F);                                     // whole screen
 80019b0:	235f      	movs	r3, #95	; 0x5f
 80019b2:	2200      	movs	r2, #0
 80019b4:	215f      	movs	r1, #95	; 0x5f
 80019b6:	2000      	movs	r0, #0
 80019b8:	f7fe ff54 	bl	8000864 <OLED_C_MemorySize>
    DDRAM_access();
 80019bc:	f7fe ff30 	bl	8000820 <DDRAM_access>
    int counter = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
	for(int i=size_of_bitmap; i>=1; i--)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	e029      	b.n	8001a1e <drawFullScreenBitmap+0x84>
	{
		counter++;
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	3301      	adds	r3, #1
 80019ce:	613b      	str	r3, [r7, #16]
		if((size_of_bitmap>96*96*2)&&(counter>=96*96))
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	f5b3 4f90 	cmp.w	r3, #18432	; 0x4800
 80019d6:	dd11      	ble.n	80019fc <drawFullScreenBitmap+0x62>
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 80019de:	db0d      	blt.n	80019fc <drawFullScreenBitmap+0x62>
		{                                            // Set Memory Read/Write mode
//		    OLED_C_MemorySize(0x00,0x5F,0x00,0x5F);
//		    DDRAM_access();// whole screen
			y_offset=y_offset+2;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	3302      	adds	r3, #2
 80019e4:	617b      	str	r3, [r7, #20]
			counter = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
			i=size_of_bitmap-y_offset*96;
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4613      	mov	r3, r2
 80019ee:	0092      	lsls	r2, r2, #2
 80019f0:	1a9b      	subs	r3, r3, r2
 80019f2:	015b      	lsls	r3, r3, #5
 80019f4:	461a      	mov	r2, r3
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	4413      	add	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
		}
		OLED_C_Color(bitmap[i--],bitmap[i]);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	1e5a      	subs	r2, r3, #1
 8001a00:	60fa      	str	r2, [r7, #12]
 8001a02:	461a      	mov	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4413      	add	r3, r2
 8001a08:	7818      	ldrb	r0, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	4413      	add	r3, r2
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	4619      	mov	r1, r3
 8001a14:	f7fe ff4d 	bl	80008b2 <OLED_C_Color>
	for(int i=size_of_bitmap; i>=1; i--)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	dcd2      	bgt.n	80019ca <drawFullScreenBitmap+0x30>
	}


}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <drawPokemonAndPokedex>:
void drawPokemonAndPokedex(uint8_t bitmap[], int size_of_bitmap, char *string, int size_of_string){
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b084      	sub	sp, #16
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
 8001a3a:	603b      	str	r3, [r7, #0]
	drawFullScreenBitmap(bitmap , size_of_bitmap);
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f7ff ffab 	bl	800199a <drawFullScreenBitmap>
	HAL_Delay(3000);
 8001a44:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a48:	f000 fd28 	bl	800249c <HAL_Delay>
	drawString(0x00, 0x00, string);
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	2100      	movs	r1, #0
 8001a50:	2000      	movs	r0, #0
 8001a52:	f000 f805 	bl	8001a60 <drawString>

}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <drawString>:


void drawString(char x_pos, char y_pos, char *text){                              // output text to OLED using current font and colour
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	4603      	mov	r3, r0
 8001a68:	603a      	str	r2, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	71bb      	strb	r3, [r7, #6]
char ochar;
unsigned int opoint = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]

    display_x = x_pos;
 8001a74:	4a26      	ldr	r2, [pc, #152]	; (8001b10 <drawString+0xb0>)
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	7013      	strb	r3, [r2, #0]
    display_y = y_pos;
 8001a7a:	4a26      	ldr	r2, [pc, #152]	; (8001b14 <drawString+0xb4>)
 8001a7c:	79bb      	ldrb	r3, [r7, #6]
 8001a7e:	7013      	strb	r3, [r2, #0]
    do{
        ochar = text[opoint];                                                   // get next chc in string
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4413      	add	r3, r2
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	72fb      	strb	r3, [r7, #11]
        if(ochar){
 8001a8a:	7afb      	ldrb	r3, [r7, #11]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d02f      	beq.n	8001af0 <drawString+0x90>
            if((display_x>50&&text[opoint]==' ')||text[opoint]=='\n')
 8001a90:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <drawString+0xb0>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b32      	cmp	r3, #50	; 0x32
 8001a96:	d905      	bls.n	8001aa4 <drawString+0x44>
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b20      	cmp	r3, #32
 8001aa2:	d005      	beq.n	8001ab0 <drawString+0x50>
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b0a      	cmp	r3, #10
 8001aae:	d10e      	bne.n	8001ace <drawString+0x6e>
            {
            	opoint++;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	60fb      	str	r3, [r7, #12]
            	display_y = display_y + font_nrows;
 8001ab6:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <drawString+0xb4>)
 8001ab8:	781a      	ldrb	r2, [r3, #0]
 8001aba:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <drawString+0xb8>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <drawString+0xb4>)
 8001ac4:	701a      	strb	r2, [r3, #0]
            	display_x = 0;
 8001ac6:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <drawString+0xb0>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
            	continue;
 8001acc:	e010      	b.n	8001af0 <drawString+0x90>
            }// do not process null terminator
            drawChar(display_x,display_y,ochar,display_color,display_font);
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <drawString+0xb0>)
 8001ad0:	7818      	ldrb	r0, [r3, #0]
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <drawString+0xb4>)
 8001ad4:	7819      	ldrb	r1, [r3, #0]
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <drawString+0xbc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	b29c      	uxth	r4, r3
 8001adc:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <drawString+0xc0>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	7afa      	ldrb	r2, [r7, #11]
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	4623      	mov	r3, r4
 8001ae6:	f7fe fef9 	bl	80008dc <drawChar>
            opoint++;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	3301      	adds	r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]

           }
            	// go for next chc

    }while(ochar);                                                              // loop until null terminator found
 8001af0:	7afb      	ldrb	r3, [r7, #11]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1c4      	bne.n	8001a80 <drawString+0x20>
    display_y = display_y + font_nrows;
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <drawString+0xb4>)
 8001af8:	781a      	ldrb	r2, [r3, #0]
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <drawString+0xb8>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <drawString+0xb4>)
 8001b04:	701a      	strb	r2, [r3, #0]
}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd90      	pop	{r4, r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000e6d5 	.word	0x2000e6d5
 8001b14:	2000e6d6 	.word	0x2000e6d6
 8001b18:	2000e6d8 	.word	0x2000e6d8
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	2000e6d4 	.word	0x2000e6d4

08001b24 <responseHandler>:
uint16_t rxIdx;
uint8_t rxFlag;

//Handles the resaponce from uart

void responseHandler(char* receivedString){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]


	if(receivedString[0]=='r'){
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b72      	cmp	r3, #114	; 0x72
 8001b32:	d107      	bne.n	8001b44 <responseHandler+0x20>
		drawPokemonAndPokedex(charmander,
 8001b34:	231c      	movs	r3, #28
 8001b36:	4a2f      	ldr	r2, [pc, #188]	; (8001bf4 <responseHandler+0xd0>)
 8001b38:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8001b3c:	482e      	ldr	r0, [pc, #184]	; (8001bf8 <responseHandler+0xd4>)
 8001b3e:	f7ff ff76 	bl	8001a2e <drawPokemonAndPokedex>
			sizeof(charmander)/sizeof(charmander[0]),
			"Name: Charmander\nType: Fire",
			sizeof("Name: Charmander\nType: Fire")/sizeof(char));
			return;
 8001b42:	e054      	b.n	8001bee <responseHandler+0xca>
	}
	else if(receivedString[0]=='g'){
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b67      	cmp	r3, #103	; 0x67
 8001b4a:	d107      	bne.n	8001b5c <responseHandler+0x38>

		drawPokemonAndPokedex(bulbusor,
 8001b4c:	231b      	movs	r3, #27
 8001b4e:	4a2b      	ldr	r2, [pc, #172]	; (8001bfc <responseHandler+0xd8>)
 8001b50:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8001b54:	482a      	ldr	r0, [pc, #168]	; (8001c00 <responseHandler+0xdc>)
 8001b56:	f7ff ff6a 	bl	8001a2e <drawPokemonAndPokedex>
			sizeof(bulbusor)/sizeof(bulbusor[0]),
			"Name: Bulbasour\nType: Grass",
			sizeof("Name: Bulbasor\nType: Grass")/sizeof(char));
			return;
 8001b5a:	e048      	b.n	8001bee <responseHandler+0xca>

	}

	else if(receivedString[0]=='b'){
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b62      	cmp	r3, #98	; 0x62
 8001b62:	d107      	bne.n	8001b74 <responseHandler+0x50>
		drawPokemonAndPokedex(bigPika,
 8001b64:	231c      	movs	r3, #28
 8001b66:	4a27      	ldr	r2, [pc, #156]	; (8001c04 <responseHandler+0xe0>)
 8001b68:	f245 6140 	movw	r1, #22080	; 0x5640
 8001b6c:	4826      	ldr	r0, [pc, #152]	; (8001c08 <responseHandler+0xe4>)
 8001b6e:	f7ff ff5e 	bl	8001a2e <drawPokemonAndPokedex>
			sizeof(bigPika)/sizeof(bigPika[0]),
			"Name: Raichu\nType: Electric",
			sizeof("Name: Raichu\nType: Electric")/sizeof(char));
			return;
 8001b72:	e03c      	b.n	8001bee <responseHandler+0xca>
	}
	else{
		snprintf((char*)txBuffer, sizeof("Not valid\n"), "Not valid\n");
 8001b74:	4a25      	ldr	r2, [pc, #148]	; (8001c0c <responseHandler+0xe8>)
 8001b76:	210b      	movs	r1, #11
 8001b78:	4825      	ldr	r0, [pc, #148]	; (8001c10 <responseHandler+0xec>)
 8001b7a:	f004 f99d 	bl	8005eb8 <sniprintf>
		HAL_UART_Transmit(&huart2, txBuffer, strlen((char*) txBuffer),100);
 8001b7e:	4824      	ldr	r0, [pc, #144]	; (8001c10 <responseHandler+0xec>)
 8001b80:	f7fe fb26 	bl	80001d0 <strlen>
 8001b84:	4603      	mov	r3, r0
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	2364      	movs	r3, #100	; 0x64
 8001b8a:	4921      	ldr	r1, [pc, #132]	; (8001c10 <responseHandler+0xec>)
 8001b8c:	4821      	ldr	r0, [pc, #132]	; (8001c14 <responseHandler+0xf0>)
 8001b8e:	f002 ff1b 	bl	80049c8 <HAL_UART_Transmit>
		snprintf((char*)txBuffer, sizeof("Opts:\n"), "Optsn\n");
 8001b92:	4a21      	ldr	r2, [pc, #132]	; (8001c18 <responseHandler+0xf4>)
 8001b94:	2107      	movs	r1, #7
 8001b96:	481e      	ldr	r0, [pc, #120]	; (8001c10 <responseHandler+0xec>)
 8001b98:	f004 f98e 	bl	8005eb8 <sniprintf>
		HAL_UART_Transmit(&huart2, txBuffer, strlen((char*) txBuffer),100);
 8001b9c:	481c      	ldr	r0, [pc, #112]	; (8001c10 <responseHandler+0xec>)
 8001b9e:	f7fe fb17 	bl	80001d0 <strlen>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	2364      	movs	r3, #100	; 0x64
 8001ba8:	4919      	ldr	r1, [pc, #100]	; (8001c10 <responseHandler+0xec>)
 8001baa:	481a      	ldr	r0, [pc, #104]	; (8001c14 <responseHandler+0xf0>)
 8001bac:	f002 ff0c 	bl	80049c8 <HAL_UART_Transmit>
		snprintf((char*)txBuffer, sizeof("r,g,"), "r,g,");
 8001bb0:	4a1a      	ldr	r2, [pc, #104]	; (8001c1c <responseHandler+0xf8>)
 8001bb2:	2105      	movs	r1, #5
 8001bb4:	4816      	ldr	r0, [pc, #88]	; (8001c10 <responseHandler+0xec>)
 8001bb6:	f004 f97f 	bl	8005eb8 <sniprintf>
		HAL_UART_Transmit(&huart2, txBuffer, strlen((char*) txBuffer),100);
 8001bba:	4815      	ldr	r0, [pc, #84]	; (8001c10 <responseHandler+0xec>)
 8001bbc:	f7fe fb08 	bl	80001d0 <strlen>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	2364      	movs	r3, #100	; 0x64
 8001bc6:	4912      	ldr	r1, [pc, #72]	; (8001c10 <responseHandler+0xec>)
 8001bc8:	4812      	ldr	r0, [pc, #72]	; (8001c14 <responseHandler+0xf0>)
 8001bca:	f002 fefd 	bl	80049c8 <HAL_UART_Transmit>
		snprintf((char*)txBuffer, sizeof("b\n"), "b\n");
 8001bce:	4a14      	ldr	r2, [pc, #80]	; (8001c20 <responseHandler+0xfc>)
 8001bd0:	2103      	movs	r1, #3
 8001bd2:	480f      	ldr	r0, [pc, #60]	; (8001c10 <responseHandler+0xec>)
 8001bd4:	f004 f970 	bl	8005eb8 <sniprintf>
		HAL_UART_Transmit(&huart2, txBuffer, strlen((char*) txBuffer),100);
 8001bd8:	480d      	ldr	r0, [pc, #52]	; (8001c10 <responseHandler+0xec>)
 8001bda:	f7fe faf9 	bl	80001d0 <strlen>
 8001bde:	4603      	mov	r3, r0
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	2364      	movs	r3, #100	; 0x64
 8001be4:	490a      	ldr	r1, [pc, #40]	; (8001c10 <responseHandler+0xec>)
 8001be6:	480b      	ldr	r0, [pc, #44]	; (8001c14 <responseHandler+0xf0>)
 8001be8:	f002 feee 	bl	80049c8 <HAL_UART_Transmit>
		return;
 8001bec:	bf00      	nop
	}


}
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	080067b8 	.word	0x080067b8
 8001bf8:	20000004 	.word	0x20000004
 8001bfc:	080067d4 	.word	0x080067d4
 8001c00:	20004804 	.word	0x20004804
 8001c04:	080067f0 	.word	0x080067f0
 8001c08:	20009004 	.word	0x20009004
 8001c0c:	0800680c 	.word	0x0800680c
 8001c10:	2000e644 	.word	0x2000e644
 8001c14:	2000e7a4 	.word	0x2000e7a4
 8001c18:	08006818 	.word	0x08006818
 8001c1c:	08006820 	.word	0x08006820
 8001c20:	08006828 	.word	0x08006828

08001c24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b099      	sub	sp, #100	; 0x64
 8001c28:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c2a:	f000 fbc2 	bl	80023b2 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c2e:	f000 f861 	bl	8001cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c32:	f000 f94d 	bl	8001ed0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c36:	f000 f92d 	bl	8001e94 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001c3a:	f000 f8fb 	bl	8001e34 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001c3e:	f000 f8bb 	bl	8001db8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  InitMCU(hspi1);
 8001c42:	4c25      	ldr	r4, [pc, #148]	; (8001cd8 <main+0xb4>)
 8001c44:	4668      	mov	r0, sp
 8001c46:	f104 0310 	add.w	r3, r4, #16
 8001c4a:	2254      	movs	r2, #84	; 0x54
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f004 f91d 	bl	8005e8c <memcpy>
 8001c52:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c56:	f7fe fd27 	bl	80006a8 <InitMCU>
  //flush
  __HAL_UART_FLUSH_DRREGISTER(&huart2);
 8001c5a:	4b20      	ldr	r3, [pc, #128]	; (8001cdc <main+0xb8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	8b1b      	ldrh	r3, [r3, #24]
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <main+0xb8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0208 	orr.w	r2, r2, #8
 8001c6a:	b292      	uxth	r2, r2
 8001c6c:	831a      	strh	r2, [r3, #24]
 8001c6e:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <main+0xb8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	8b1b      	ldrh	r3, [r3, #24]
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <main+0xb8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0210 	orr.w	r2, r2, #16
 8001c7e:	b292      	uxth	r2, r2
 8001c80:	831a      	strh	r2, [r3, #24]
  //set up dma connection with the uart and rxByte
  HAL_UART_Receive_DMA(&huart2, &rxByte, 1);
 8001c82:	2201      	movs	r2, #1
 8001c84:	4916      	ldr	r1, [pc, #88]	; (8001ce0 <main+0xbc>)
 8001c86:	4815      	ldr	r0, [pc, #84]	; (8001cdc <main+0xb8>)
 8001c88:	f002 ff32 	bl	8004af0 <HAL_UART_Receive_DMA>
  drawString(0,0,"POKEMON\n      GO");
 8001c8c:	4a15      	ldr	r2, [pc, #84]	; (8001ce4 <main+0xc0>)
 8001c8e:	2100      	movs	r1, #0
 8001c90:	2000      	movs	r0, #0
 8001c92:	f7ff fee5 	bl	8001a60 <drawString>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(rxFlag == 1) {
 8001c96:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <main+0xc4>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d118      	bne.n	8001cd0 <main+0xac>
	      	rxFlag = 0;
 8001c9e:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <main+0xc4>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
	      	snprintf((char*)txBuffer, sizeof(rxBuffer), rxBuffer);
 8001ca4:	4a11      	ldr	r2, [pc, #68]	; (8001cec <main+0xc8>)
 8001ca6:	2118      	movs	r1, #24
 8001ca8:	4811      	ldr	r0, [pc, #68]	; (8001cf0 <main+0xcc>)
 8001caa:	f004 f905 	bl	8005eb8 <sniprintf>

	      	responseHandler((char*)rxBuffer);
 8001cae:	480f      	ldr	r0, [pc, #60]	; (8001cec <main+0xc8>)
 8001cb0:	f7ff ff38 	bl	8001b24 <responseHandler>
	      	//clean receive buffer
	      	for(int i=0;i<24;i++) rxBuffer[i] = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	e007      	b.n	8001cca <main+0xa6>
 8001cba:	4a0c      	ldr	r2, [pc, #48]	; (8001cec <main+0xc8>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b17      	cmp	r3, #23
 8001cce:	ddf4      	ble.n	8001cba <main+0x96>

	      	//HAL_UART_Transmit(&huart2, txBuffer, strlen((char*) txBuffer),100);
	      	//i++;
	      }
	      HAL_Delay(100);
 8001cd0:	2064      	movs	r0, #100	; 0x64
 8001cd2:	f000 fbe3 	bl	800249c <HAL_Delay>
	  if(rxFlag == 1) {
 8001cd6:	e7de      	b.n	8001c96 <main+0x72>
 8001cd8:	2000e740 	.word	0x2000e740
 8001cdc:	2000e7a4 	.word	0x2000e7a4
 8001ce0:	2000e888 	.word	0x2000e888
 8001ce4:	0800682c 	.word	0x0800682c
 8001ce8:	2000e88c 	.word	0x2000e88c
 8001cec:	2000e870 	.word	0x2000e870
 8001cf0:	2000e644 	.word	0x2000e644

08001cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b096      	sub	sp, #88	; 0x58
 8001cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	2244      	movs	r2, #68	; 0x44
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f004 f8d0 	bl	8005ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d08:	463b      	mov	r3, r7
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	60da      	str	r2, [r3, #12]
 8001d14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d16:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d1a:	f001 f90b 	bl	8002f34 <HAL_PWREx_ControlVoltageScaling>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001d24:	f000 f988 	bl	8002038 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d28:	f001 f8e6 	bl	8002ef8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001d2c:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <SystemClock_Config+0xc0>)
 8001d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d32:	4a20      	ldr	r2, [pc, #128]	; (8001db4 <SystemClock_Config+0xc0>)
 8001d34:	f023 0318 	bic.w	r3, r3, #24
 8001d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001d3c:	2314      	movs	r3, #20
 8001d3e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d40:	2301      	movs	r3, #1
 8001d42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d44:	2301      	movs	r3, #1
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001d4c:	2360      	movs	r3, #96	; 0x60
 8001d4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d50:	2302      	movs	r3, #2
 8001d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001d54:	2301      	movs	r3, #1
 8001d56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001d5c:	2310      	movs	r3, #16
 8001d5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d60:	2307      	movs	r3, #7
 8001d62:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d64:	2302      	movs	r3, #2
 8001d66:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	4618      	mov	r0, r3
 8001d72:	f001 f935 	bl	8002fe0 <HAL_RCC_OscConfig>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001d7c:	f000 f95c 	bl	8002038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d80:	230f      	movs	r3, #15
 8001d82:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d84:	2303      	movs	r3, #3
 8001d86:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d94:	463b      	mov	r3, r7
 8001d96:	2101      	movs	r1, #1
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f001 fd35 	bl	8003808 <HAL_RCC_ClockConfig>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001da4:	f000 f948 	bl	8002038 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001da8:	f002 f948 	bl	800403c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001dac:	bf00      	nop
 8001dae:	3758      	adds	r7, #88	; 0x58
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000

08001db8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <MX_SPI1_Init+0x74>)
 8001dbe:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <MX_SPI1_Init+0x78>)
 8001dc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <MX_SPI1_Init+0x74>)
 8001dc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dca:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <MX_SPI1_Init+0x74>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dd0:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <MX_SPI1_Init+0x74>)
 8001dd2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001dd6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001dd8:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <MX_SPI1_Init+0x74>)
 8001dda:	2202      	movs	r2, #2
 8001ddc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001dde:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <MX_SPI1_Init+0x74>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <MX_SPI1_Init+0x74>)
 8001de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dec:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <MX_SPI1_Init+0x74>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001df2:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <MX_SPI1_Init+0x74>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <MX_SPI1_Init+0x74>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <MX_SPI1_Init+0x74>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <MX_SPI1_Init+0x74>)
 8001e06:	2207      	movs	r2, #7
 8001e08:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <MX_SPI1_Init+0x74>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <MX_SPI1_Init+0x74>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e16:	4805      	ldr	r0, [pc, #20]	; (8001e2c <MX_SPI1_Init+0x74>)
 8001e18:	f002 fa12 	bl	8004240 <HAL_SPI_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e22:	f000 f909 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	2000e740 	.word	0x2000e740
 8001e30:	40013000 	.word	0x40013000

08001e34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e38:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <MX_USART2_UART_Init+0x58>)
 8001e3a:	4a15      	ldr	r2, [pc, #84]	; (8001e90 <MX_USART2_UART_Init+0x5c>)
 8001e3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <MX_USART2_UART_Init+0x58>)
 8001e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <MX_USART2_UART_Init+0x58>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <MX_USART2_UART_Init+0x58>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <MX_USART2_UART_Init+0x58>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <MX_USART2_UART_Init+0x58>)
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <MX_USART2_UART_Init+0x58>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <MX_USART2_UART_Init+0x58>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <MX_USART2_UART_Init+0x58>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <MX_USART2_UART_Init+0x58>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e76:	4805      	ldr	r0, [pc, #20]	; (8001e8c <MX_USART2_UART_Init+0x58>)
 8001e78:	f002 fd58 	bl	800492c <HAL_UART_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e82:	f000 f8d9 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	2000e7a4 	.word	0x2000e7a4
 8001e90:	40004400 	.word	0x40004400

08001e94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <MX_DMA_Init+0x38>)
 8001e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ecc <MX_DMA_Init+0x38>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6493      	str	r3, [r2, #72]	; 0x48
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <MX_DMA_Init+0x38>)
 8001ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2010      	movs	r0, #16
 8001eb8:	f000 fbef 	bl	800269a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001ebc:	2010      	movs	r0, #16
 8001ebe:	f000 fc08 	bl	80026d2 <HAL_NVIC_EnableIRQ>

}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000

08001ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
 8001ee4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee6:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <MX_GPIO_Init+0xbc>)
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eea:	4a28      	ldr	r2, [pc, #160]	; (8001f8c <MX_GPIO_Init+0xbc>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef2:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <MX_GPIO_Init+0xbc>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <MX_GPIO_Init+0xbc>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f02:	4a22      	ldr	r2, [pc, #136]	; (8001f8c <MX_GPIO_Init+0xbc>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <MX_GPIO_Init+0xbc>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <MX_GPIO_Init+0xbc>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1a:	4a1c      	ldr	r2, [pc, #112]	; (8001f8c <MX_GPIO_Init+0xbc>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f22:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <MX_GPIO_Init+0xbc>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f38:	f000 ffc6 	bl	8002ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|OLED_DC_Pin, GPIO_PIN_RESET);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2103      	movs	r1, #3
 8001f40:	4813      	ldr	r0, [pc, #76]	; (8001f90 <MX_GPIO_Init+0xc0>)
 8001f42:	f000 ffc1 	bl	8002ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_RST_Pin PA8 */
  GPIO_InitStruct.Pin = OLED_RST_Pin|GPIO_PIN_8;
 8001f46:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001f4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f58:	f107 030c 	add.w	r3, r7, #12
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f62:	f000 fe47 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 OLED_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|OLED_DC_Pin;
 8001f66:	2303      	movs	r3, #3
 8001f68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f76:	f107 030c 	add.w	r3, r7, #12
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4804      	ldr	r0, [pc, #16]	; (8001f90 <MX_GPIO_Init+0xc0>)
 8001f7e:	f000 fe39 	bl	8002bf4 <HAL_GPIO_Init>

}
 8001f82:	bf00      	nop
 8001f84:	3720      	adds	r7, #32
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	48000400 	.word	0x48000400

08001f94 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART2) {
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1f      	ldr	r2, [pc, #124]	; (8002020 <HAL_UART_RxCpltCallback+0x8c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d136      	bne.n	8002014 <HAL_UART_RxCpltCallback+0x80>
		__HAL_UART_FLUSH_DRREGISTER(&huart2);
 8001fa6:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <HAL_UART_RxCpltCallback+0x90>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	8b1b      	ldrh	r3, [r3, #24]
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <HAL_UART_RxCpltCallback+0x90>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0208 	orr.w	r2, r2, #8
 8001fb6:	b292      	uxth	r2, r2
 8001fb8:	831a      	strh	r2, [r3, #24]
 8001fba:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <HAL_UART_RxCpltCallback+0x90>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	8b1b      	ldrh	r3, [r3, #24]
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_UART_RxCpltCallback+0x90>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0210 	orr.w	r2, r2, #16
 8001fca:	b292      	uxth	r2, r2
 8001fcc:	831a      	strh	r2, [r3, #24]
		if(rxByte == 10 || rxIdx >= 23) {
 8001fce:	4b16      	ldr	r3, [pc, #88]	; (8002028 <HAL_UART_RxCpltCallback+0x94>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b0a      	cmp	r3, #10
 8001fd4:	d003      	beq.n	8001fde <HAL_UART_RxCpltCallback+0x4a>
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <HAL_UART_RxCpltCallback+0x98>)
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	2b16      	cmp	r3, #22
 8001fdc:	d90d      	bls.n	8001ffa <HAL_UART_RxCpltCallback+0x66>
			rxBuffer[rxIdx] = rxByte;
 8001fde:	4b13      	ldr	r3, [pc, #76]	; (800202c <HAL_UART_RxCpltCallback+0x98>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_UART_RxCpltCallback+0x94>)
 8001fe6:	7819      	ldrb	r1, [r3, #0]
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <HAL_UART_RxCpltCallback+0x9c>)
 8001fea:	5499      	strb	r1, [r3, r2]
			rxFlag = 1;
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_UART_RxCpltCallback+0xa0>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]
			rxIdx = 0;
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_UART_RxCpltCallback+0x98>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	801a      	strh	r2, [r3, #0]
			rxBuffer[rxIdx] = rxByte;
			rxIdx++;
		}
	}

}
 8001ff8:	e00c      	b.n	8002014 <HAL_UART_RxCpltCallback+0x80>
			rxBuffer[rxIdx] = rxByte;
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	; (800202c <HAL_UART_RxCpltCallback+0x98>)
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b09      	ldr	r3, [pc, #36]	; (8002028 <HAL_UART_RxCpltCallback+0x94>)
 8002002:	7819      	ldrb	r1, [r3, #0]
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_UART_RxCpltCallback+0x9c>)
 8002006:	5499      	strb	r1, [r3, r2]
			rxIdx++;
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <HAL_UART_RxCpltCallback+0x98>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	3301      	adds	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_UART_RxCpltCallback+0x98>)
 8002012:	801a      	strh	r2, [r3, #0]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	40004400 	.word	0x40004400
 8002024:	2000e7a4 	.word	0x2000e7a4
 8002028:	2000e888 	.word	0x2000e888
 800202c:	2000e88a 	.word	0x2000e88a
 8002030:	2000e870 	.word	0x2000e870
 8002034:	2000e88c 	.word	0x2000e88c

08002038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800203c:	b672      	cpsid	i
}
 800203e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002040:	e7fe      	b.n	8002040 <Error_Handler+0x8>
	...

08002044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <HAL_MspInit+0x44>)
 800204c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204e:	4a0e      	ldr	r2, [pc, #56]	; (8002088 <HAL_MspInit+0x44>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6613      	str	r3, [r2, #96]	; 0x60
 8002056:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <HAL_MspInit+0x44>)
 8002058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_MspInit+0x44>)
 8002064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002066:	4a08      	ldr	r2, [pc, #32]	; (8002088 <HAL_MspInit+0x44>)
 8002068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206c:	6593      	str	r3, [r2, #88]	; 0x58
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_MspInit+0x44>)
 8002070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000

0800208c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a17      	ldr	r2, [pc, #92]	; (8002108 <HAL_SPI_MspInit+0x7c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d127      	bne.n	80020fe <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020ae:	4b17      	ldr	r3, [pc, #92]	; (800210c <HAL_SPI_MspInit+0x80>)
 80020b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b2:	4a16      	ldr	r2, [pc, #88]	; (800210c <HAL_SPI_MspInit+0x80>)
 80020b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020b8:	6613      	str	r3, [r2, #96]	; 0x60
 80020ba:	4b14      	ldr	r3, [pc, #80]	; (800210c <HAL_SPI_MspInit+0x80>)
 80020bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <HAL_SPI_MspInit+0x80>)
 80020c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ca:	4a10      	ldr	r2, [pc, #64]	; (800210c <HAL_SPI_MspInit+0x80>)
 80020cc:	f043 0302 	orr.w	r3, r3, #2
 80020d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <HAL_SPI_MspInit+0x80>)
 80020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80020de:	2338      	movs	r3, #56	; 0x38
 80020e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ea:	2303      	movs	r3, #3
 80020ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020ee:	2305      	movs	r3, #5
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	4619      	mov	r1, r3
 80020f8:	4805      	ldr	r0, [pc, #20]	; (8002110 <HAL_SPI_MspInit+0x84>)
 80020fa:	f000 fd7b 	bl	8002bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020fe:	bf00      	nop
 8002100:	3728      	adds	r7, #40	; 0x28
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40013000 	.word	0x40013000
 800210c:	40021000 	.word	0x40021000
 8002110:	48000400 	.word	0x48000400

08002114 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b09e      	sub	sp, #120	; 0x78
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800212c:	f107 0310 	add.w	r3, r7, #16
 8002130:	2254      	movs	r2, #84	; 0x54
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f003 feb7 	bl	8005ea8 <memset>
  if(huart->Instance==USART2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a41      	ldr	r2, [pc, #260]	; (8002244 <HAL_UART_MspInit+0x130>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d17a      	bne.n	800223a <HAL_UART_MspInit+0x126>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002144:	2302      	movs	r3, #2
 8002146:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002148:	2300      	movs	r3, #0
 800214a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800214c:	f107 0310 	add.w	r3, r7, #16
 8002150:	4618      	mov	r0, r3
 8002152:	f001 fd7d 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800215c:	f7ff ff6c 	bl	8002038 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002160:	4b39      	ldr	r3, [pc, #228]	; (8002248 <HAL_UART_MspInit+0x134>)
 8002162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002164:	4a38      	ldr	r2, [pc, #224]	; (8002248 <HAL_UART_MspInit+0x134>)
 8002166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800216a:	6593      	str	r3, [r2, #88]	; 0x58
 800216c:	4b36      	ldr	r3, [pc, #216]	; (8002248 <HAL_UART_MspInit+0x134>)
 800216e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002178:	4b33      	ldr	r3, [pc, #204]	; (8002248 <HAL_UART_MspInit+0x134>)
 800217a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217c:	4a32      	ldr	r2, [pc, #200]	; (8002248 <HAL_UART_MspInit+0x134>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002184:	4b30      	ldr	r3, [pc, #192]	; (8002248 <HAL_UART_MspInit+0x134>)
 8002186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002190:	2304      	movs	r3, #4
 8002192:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021a0:	2307      	movs	r3, #7
 80021a2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80021a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021a8:	4619      	mov	r1, r3
 80021aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ae:	f000 fd21 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80021b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021b6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c0:	2303      	movs	r3, #3
 80021c2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80021c4:	2303      	movs	r3, #3
 80021c6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80021c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021cc:	4619      	mov	r1, r3
 80021ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d2:	f000 fd0f 	bl	8002bf4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80021d6:	4b1d      	ldr	r3, [pc, #116]	; (800224c <HAL_UART_MspInit+0x138>)
 80021d8:	4a1d      	ldr	r2, [pc, #116]	; (8002250 <HAL_UART_MspInit+0x13c>)
 80021da:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80021dc:	4b1b      	ldr	r3, [pc, #108]	; (800224c <HAL_UART_MspInit+0x138>)
 80021de:	2202      	movs	r2, #2
 80021e0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021e2:	4b1a      	ldr	r3, [pc, #104]	; (800224c <HAL_UART_MspInit+0x138>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e8:	4b18      	ldr	r3, [pc, #96]	; (800224c <HAL_UART_MspInit+0x138>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_DISABLE;
 80021ee:	4b17      	ldr	r3, [pc, #92]	; (800224c <HAL_UART_MspInit+0x138>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021f4:	4b15      	ldr	r3, [pc, #84]	; (800224c <HAL_UART_MspInit+0x138>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021fa:	4b14      	ldr	r3, [pc, #80]	; (800224c <HAL_UART_MspInit+0x138>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_UART_MspInit+0x138>)
 8002202:	2220      	movs	r2, #32
 8002204:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <HAL_UART_MspInit+0x138>)
 8002208:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800220c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800220e:	480f      	ldr	r0, [pc, #60]	; (800224c <HAL_UART_MspInit+0x138>)
 8002210:	f000 fa7a 	bl	8002708 <HAL_DMA_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800221a:	f7ff ff0d 	bl	8002038 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a0a      	ldr	r2, [pc, #40]	; (800224c <HAL_UART_MspInit+0x138>)
 8002222:	671a      	str	r2, [r3, #112]	; 0x70
 8002224:	4a09      	ldr	r2, [pc, #36]	; (800224c <HAL_UART_MspInit+0x138>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	2026      	movs	r0, #38	; 0x26
 8002230:	f000 fa33 	bl	800269a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002234:	2026      	movs	r0, #38	; 0x26
 8002236:	f000 fa4c 	bl	80026d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800223a:	bf00      	nop
 800223c:	3778      	adds	r7, #120	; 0x78
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40004400 	.word	0x40004400
 8002248:	40021000 	.word	0x40021000
 800224c:	2000e828 	.word	0x2000e828
 8002250:	4002006c 	.word	0x4002006c

08002254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002258:	e7fe      	b.n	8002258 <NMI_Handler+0x4>

0800225a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800225e:	e7fe      	b.n	800225e <HardFault_Handler+0x4>

08002260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002264:	e7fe      	b.n	8002264 <MemManage_Handler+0x4>

08002266 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800226a:	e7fe      	b.n	800226a <BusFault_Handler+0x4>

0800226c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002270:	e7fe      	b.n	8002270 <UsageFault_Handler+0x4>

08002272 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022a0:	f000 f8dc 	bl	800245c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <DMA1_Channel6_IRQHandler+0x10>)
 80022ae:	f000 fbc2 	bl	8002a36 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	2000e828 	.word	0x2000e828

080022bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022c0:	4802      	ldr	r0, [pc, #8]	; (80022cc <USART2_IRQHandler+0x10>)
 80022c2:	f002 fc6b 	bl	8004b9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	2000e7a4 	.word	0x2000e7a4

080022d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022d8:	4a14      	ldr	r2, [pc, #80]	; (800232c <_sbrk+0x5c>)
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <_sbrk+0x60>)
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e4:	4b13      	ldr	r3, [pc, #76]	; (8002334 <_sbrk+0x64>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d102      	bne.n	80022f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <_sbrk+0x64>)
 80022ee:	4a12      	ldr	r2, [pc, #72]	; (8002338 <_sbrk+0x68>)
 80022f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <_sbrk+0x64>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d207      	bcs.n	8002310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002300:	f003 fd9a 	bl	8005e38 <__errno>
 8002304:	4603      	mov	r3, r0
 8002306:	220c      	movs	r2, #12
 8002308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800230a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800230e:	e009      	b.n	8002324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <_sbrk+0x64>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002316:	4b07      	ldr	r3, [pc, #28]	; (8002334 <_sbrk+0x64>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	4a05      	ldr	r2, [pc, #20]	; (8002334 <_sbrk+0x64>)
 8002320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002322:	68fb      	ldr	r3, [r7, #12]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20010000 	.word	0x20010000
 8002330:	00000400 	.word	0x00000400
 8002334:	2000e890 	.word	0x2000e890
 8002338:	2000e8a8 	.word	0x2000e8a8

0800233c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <SystemInit+0x20>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002346:	4a05      	ldr	r2, [pc, #20]	; (800235c <SystemInit+0x20>)
 8002348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800234c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002398 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002364:	f7ff ffea 	bl	800233c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002368:	480c      	ldr	r0, [pc, #48]	; (800239c <LoopForever+0x6>)
  ldr r1, =_edata
 800236a:	490d      	ldr	r1, [pc, #52]	; (80023a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800236c:	4a0d      	ldr	r2, [pc, #52]	; (80023a4 <LoopForever+0xe>)
  movs r3, #0
 800236e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002370:	e002      	b.n	8002378 <LoopCopyDataInit>

08002372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002376:	3304      	adds	r3, #4

08002378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800237a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800237c:	d3f9      	bcc.n	8002372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800237e:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002380:	4c0a      	ldr	r4, [pc, #40]	; (80023ac <LoopForever+0x16>)
  movs r3, #0
 8002382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002384:	e001      	b.n	800238a <LoopFillZerobss>

08002386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002388:	3204      	adds	r2, #4

0800238a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800238a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800238c:	d3fb      	bcc.n	8002386 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800238e:	f003 fd59 	bl	8005e44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002392:	f7ff fc47 	bl	8001c24 <main>

08002396 <LoopForever>:

LoopForever:
    b LoopForever
 8002396:	e7fe      	b.n	8002396 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002398:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800239c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a0:	2000e6b8 	.word	0x2000e6b8
  ldr r2, =_sidata
 80023a4:	0800f544 	.word	0x0800f544
  ldr r2, =_sbss
 80023a8:	2000e6b8 	.word	0x2000e6b8
  ldr r4, =_ebss
 80023ac:	2000e8a8 	.word	0x2000e8a8

080023b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023b0:	e7fe      	b.n	80023b0 <ADC1_IRQHandler>

080023b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023bc:	2003      	movs	r0, #3
 80023be:	f000 f961 	bl	8002684 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023c2:	2000      	movs	r0, #0
 80023c4:	f000 f80e 	bl	80023e4 <HAL_InitTick>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	71fb      	strb	r3, [r7, #7]
 80023d2:	e001      	b.n	80023d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023d4:	f7ff fe36 	bl	8002044 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023d8:	79fb      	ldrb	r3, [r7, #7]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023f0:	4b17      	ldr	r3, [pc, #92]	; (8002450 <HAL_InitTick+0x6c>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d023      	beq.n	8002440 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023f8:	4b16      	ldr	r3, [pc, #88]	; (8002454 <HAL_InitTick+0x70>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b14      	ldr	r3, [pc, #80]	; (8002450 <HAL_InitTick+0x6c>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	4619      	mov	r1, r3
 8002402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002406:	fbb3 f3f1 	udiv	r3, r3, r1
 800240a:	fbb2 f3f3 	udiv	r3, r2, r3
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f96d 	bl	80026ee <HAL_SYSTICK_Config>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10f      	bne.n	800243a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b0f      	cmp	r3, #15
 800241e:	d809      	bhi.n	8002434 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002420:	2200      	movs	r2, #0
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002428:	f000 f937 	bl	800269a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800242c:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <HAL_InitTick+0x74>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e007      	b.n	8002444 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
 8002438:	e004      	b.n	8002444 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	e001      	b.n	8002444 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002444:	7bfb      	ldrb	r3, [r7, #15]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	2000e650 	.word	0x2000e650
 8002454:	2000e648 	.word	0x2000e648
 8002458:	2000e64c 	.word	0x2000e64c

0800245c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_IncTick+0x20>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_IncTick+0x24>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4413      	add	r3, r2
 800246c:	4a04      	ldr	r2, [pc, #16]	; (8002480 <HAL_IncTick+0x24>)
 800246e:	6013      	str	r3, [r2, #0]
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	2000e650 	.word	0x2000e650
 8002480:	2000e894 	.word	0x2000e894

08002484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return uwTick;
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <HAL_GetTick+0x14>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	2000e894 	.word	0x2000e894

0800249c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a4:	f7ff ffee 	bl	8002484 <HAL_GetTick>
 80024a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024b4:	d005      	beq.n	80024c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <HAL_Delay+0x44>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4413      	add	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024c2:	bf00      	nop
 80024c4:	f7ff ffde 	bl	8002484 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d8f7      	bhi.n	80024c4 <HAL_Delay+0x28>
  {
  }
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	2000e650 	.word	0x2000e650

080024e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f4:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <__NVIC_SetPriorityGrouping+0x44>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002500:	4013      	ands	r3, r2
 8002502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800250c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002516:	4a04      	ldr	r2, [pc, #16]	; (8002528 <__NVIC_SetPriorityGrouping+0x44>)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	60d3      	str	r3, [r2, #12]
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <__NVIC_GetPriorityGrouping+0x18>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	0a1b      	lsrs	r3, r3, #8
 8002536:	f003 0307 	and.w	r3, r3, #7
}
 800253a:	4618      	mov	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	2b00      	cmp	r3, #0
 8002558:	db0b      	blt.n	8002572 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	f003 021f 	and.w	r2, r3, #31
 8002560:	4907      	ldr	r1, [pc, #28]	; (8002580 <__NVIC_EnableIRQ+0x38>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	2001      	movs	r0, #1
 800256a:	fa00 f202 	lsl.w	r2, r0, r2
 800256e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000e100 	.word	0xe000e100

08002584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	6039      	str	r1, [r7, #0]
 800258e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	2b00      	cmp	r3, #0
 8002596:	db0a      	blt.n	80025ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	b2da      	uxtb	r2, r3
 800259c:	490c      	ldr	r1, [pc, #48]	; (80025d0 <__NVIC_SetPriority+0x4c>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	0112      	lsls	r2, r2, #4
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	440b      	add	r3, r1
 80025a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025ac:	e00a      	b.n	80025c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4908      	ldr	r1, [pc, #32]	; (80025d4 <__NVIC_SetPriority+0x50>)
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	3b04      	subs	r3, #4
 80025bc:	0112      	lsls	r2, r2, #4
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	440b      	add	r3, r1
 80025c2:	761a      	strb	r2, [r3, #24]
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000e100 	.word	0xe000e100
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d8:	b480      	push	{r7}
 80025da:	b089      	sub	sp, #36	; 0x24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f1c3 0307 	rsb	r3, r3, #7
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	bf28      	it	cs
 80025f6:	2304      	movcs	r3, #4
 80025f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3304      	adds	r3, #4
 80025fe:	2b06      	cmp	r3, #6
 8002600:	d902      	bls.n	8002608 <NVIC_EncodePriority+0x30>
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3b03      	subs	r3, #3
 8002606:	e000      	b.n	800260a <NVIC_EncodePriority+0x32>
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43da      	mvns	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	401a      	ands	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002620:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	43d9      	mvns	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	4313      	orrs	r3, r2
         );
}
 8002632:	4618      	mov	r0, r3
 8002634:	3724      	adds	r7, #36	; 0x24
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002650:	d301      	bcc.n	8002656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002652:	2301      	movs	r3, #1
 8002654:	e00f      	b.n	8002676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002656:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <SysTick_Config+0x40>)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3b01      	subs	r3, #1
 800265c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800265e:	210f      	movs	r1, #15
 8002660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002664:	f7ff ff8e 	bl	8002584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <SysTick_Config+0x40>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800266e:	4b04      	ldr	r3, [pc, #16]	; (8002680 <SysTick_Config+0x40>)
 8002670:	2207      	movs	r2, #7
 8002672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	e000e010 	.word	0xe000e010

08002684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff ff29 	bl	80024e4 <__NVIC_SetPriorityGrouping>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b086      	sub	sp, #24
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
 80026a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026ac:	f7ff ff3e 	bl	800252c <__NVIC_GetPriorityGrouping>
 80026b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	6978      	ldr	r0, [r7, #20]
 80026b8:	f7ff ff8e 	bl	80025d8 <NVIC_EncodePriority>
 80026bc:	4602      	mov	r2, r0
 80026be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff5d 	bl	8002584 <__NVIC_SetPriority>
}
 80026ca:	bf00      	nop
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	4603      	mov	r3, r0
 80026da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff ff31 	bl	8002548 <__NVIC_EnableIRQ>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff ffa2 	bl	8002640 <SysTick_Config>
 80026fc:	4603      	mov	r3, r0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e098      	b.n	800284c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	4b4d      	ldr	r3, [pc, #308]	; (8002858 <HAL_DMA_Init+0x150>)
 8002722:	429a      	cmp	r2, r3
 8002724:	d80f      	bhi.n	8002746 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	4b4b      	ldr	r3, [pc, #300]	; (800285c <HAL_DMA_Init+0x154>)
 800272e:	4413      	add	r3, r2
 8002730:	4a4b      	ldr	r2, [pc, #300]	; (8002860 <HAL_DMA_Init+0x158>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	091b      	lsrs	r3, r3, #4
 8002738:	009a      	lsls	r2, r3, #2
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a48      	ldr	r2, [pc, #288]	; (8002864 <HAL_DMA_Init+0x15c>)
 8002742:	641a      	str	r2, [r3, #64]	; 0x40
 8002744:	e00e      	b.n	8002764 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	4b46      	ldr	r3, [pc, #280]	; (8002868 <HAL_DMA_Init+0x160>)
 800274e:	4413      	add	r3, r2
 8002750:	4a43      	ldr	r2, [pc, #268]	; (8002860 <HAL_DMA_Init+0x158>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	009a      	lsls	r2, r3, #2
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a42      	ldr	r2, [pc, #264]	; (800286c <HAL_DMA_Init+0x164>)
 8002762:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800277a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002788:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002794:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027be:	d039      	beq.n	8002834 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	4a27      	ldr	r2, [pc, #156]	; (8002864 <HAL_DMA_Init+0x15c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d11a      	bne.n	8002800 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027ca:	4b29      	ldr	r3, [pc, #164]	; (8002870 <HAL_DMA_Init+0x168>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	f003 031c 	and.w	r3, r3, #28
 80027d6:	210f      	movs	r1, #15
 80027d8:	fa01 f303 	lsl.w	r3, r1, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	4924      	ldr	r1, [pc, #144]	; (8002870 <HAL_DMA_Init+0x168>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80027e4:	4b22      	ldr	r3, [pc, #136]	; (8002870 <HAL_DMA_Init+0x168>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6859      	ldr	r1, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	f003 031c 	and.w	r3, r3, #28
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	491d      	ldr	r1, [pc, #116]	; (8002870 <HAL_DMA_Init+0x168>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]
 80027fe:	e019      	b.n	8002834 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002800:	4b1c      	ldr	r3, [pc, #112]	; (8002874 <HAL_DMA_Init+0x16c>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002808:	f003 031c 	and.w	r3, r3, #28
 800280c:	210f      	movs	r1, #15
 800280e:	fa01 f303 	lsl.w	r3, r1, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	4917      	ldr	r1, [pc, #92]	; (8002874 <HAL_DMA_Init+0x16c>)
 8002816:	4013      	ands	r3, r2
 8002818:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800281a:	4b16      	ldr	r3, [pc, #88]	; (8002874 <HAL_DMA_Init+0x16c>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6859      	ldr	r1, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	f003 031c 	and.w	r3, r3, #28
 800282a:	fa01 f303 	lsl.w	r3, r1, r3
 800282e:	4911      	ldr	r1, [pc, #68]	; (8002874 <HAL_DMA_Init+0x16c>)
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	40020407 	.word	0x40020407
 800285c:	bffdfff8 	.word	0xbffdfff8
 8002860:	cccccccd 	.word	0xcccccccd
 8002864:	40020000 	.word	0x40020000
 8002868:	bffdfbf8 	.word	0xbffdfbf8
 800286c:	40020400 	.word	0x40020400
 8002870:	400200a8 	.word	0x400200a8
 8002874:	400204a8 	.word	0x400204a8

08002878 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_DMA_Start_IT+0x20>
 8002894:	2302      	movs	r3, #2
 8002896:	e04b      	b.n	8002930 <HAL_DMA_Start_IT+0xb8>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d13a      	bne.n	8002922 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0201 	bic.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	68b9      	ldr	r1, [r7, #8]
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f95f 	bl	8002b94 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d008      	beq.n	80028f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 020e 	orr.w	r2, r2, #14
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e00f      	b.n	8002910 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0204 	bic.w	r2, r2, #4
 80028fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 020a 	orr.w	r2, r2, #10
 800290e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	e005      	b.n	800292e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800292a:	2302      	movs	r3, #2
 800292c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800292e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d008      	beq.n	8002962 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2204      	movs	r2, #4
 8002954:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e022      	b.n	80029a8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 020e 	bic.w	r2, r2, #14
 8002970:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0201 	bic.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	f003 021c 	and.w	r2, r3, #28
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	2101      	movs	r1, #1
 8002990:	fa01 f202 	lsl.w	r2, r1, r2
 8002994:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d005      	beq.n	80029d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2204      	movs	r2, #4
 80029d0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	73fb      	strb	r3, [r7, #15]
 80029d6:	e029      	b.n	8002a2c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 020e 	bic.w	r2, r2, #14
 80029e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	f003 021c 	and.w	r2, r3, #28
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	2101      	movs	r1, #1
 8002a06:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4798      	blx	r3
    }
  }
  return status;
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	f003 031c 	and.w	r3, r3, #28
 8002a56:	2204      	movs	r2, #4
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d026      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x7a>
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d021      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d107      	bne.n	8002a8a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0204 	bic.w	r2, r2, #4
 8002a88:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f003 021c 	and.w	r2, r3, #28
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	2104      	movs	r1, #4
 8002a98:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d071      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002aae:	e06c      	b.n	8002b8a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab4:	f003 031c 	and.w	r3, r3, #28
 8002ab8:	2202      	movs	r2, #2
 8002aba:	409a      	lsls	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d02e      	beq.n	8002b22 <HAL_DMA_IRQHandler+0xec>
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d029      	beq.n	8002b22 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10b      	bne.n	8002af4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 020a 	bic.w	r2, r2, #10
 8002aea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af8:	f003 021c 	and.w	r2, r3, #28
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	2102      	movs	r1, #2
 8002b02:	fa01 f202 	lsl.w	r2, r1, r2
 8002b06:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d038      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b20:	e033      	b.n	8002b8a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	f003 031c 	and.w	r3, r3, #28
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4013      	ands	r3, r2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d02a      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x156>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d025      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 020e 	bic.w	r2, r2, #14
 8002b4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b54:	f003 021c 	and.w	r2, r3, #28
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b62:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d004      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b8a:	bf00      	nop
 8002b8c:	bf00      	nop
}
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	f003 021c 	and.w	r2, r3, #28
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	2101      	movs	r1, #1
 8002bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d108      	bne.n	8002bd8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bd6:	e007      	b.n	8002be8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	60da      	str	r2, [r3, #12]
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c02:	e148      	b.n	8002e96 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	2101      	movs	r1, #1
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c10:	4013      	ands	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 813a 	beq.w	8002e90 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d005      	beq.n	8002c34 <HAL_GPIO_Init+0x40>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d130      	bne.n	8002c96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	2203      	movs	r2, #3
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4013      	ands	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	091b      	lsrs	r3, r3, #4
 8002c80:	f003 0201 	and.w	r2, r3, #1
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d017      	beq.n	8002cd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	2203      	movs	r2, #3
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d123      	bne.n	8002d26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	08da      	lsrs	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3208      	adds	r2, #8
 8002ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	220f      	movs	r2, #15
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	08da      	lsrs	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3208      	adds	r2, #8
 8002d20:	6939      	ldr	r1, [r7, #16]
 8002d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	2203      	movs	r2, #3
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0203 	and.w	r2, r3, #3
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 8094 	beq.w	8002e90 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d68:	4b52      	ldr	r3, [pc, #328]	; (8002eb4 <HAL_GPIO_Init+0x2c0>)
 8002d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6c:	4a51      	ldr	r2, [pc, #324]	; (8002eb4 <HAL_GPIO_Init+0x2c0>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	6613      	str	r3, [r2, #96]	; 0x60
 8002d74:	4b4f      	ldr	r3, [pc, #316]	; (8002eb4 <HAL_GPIO_Init+0x2c0>)
 8002d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d80:	4a4d      	ldr	r2, [pc, #308]	; (8002eb8 <HAL_GPIO_Init+0x2c4>)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	089b      	lsrs	r3, r3, #2
 8002d86:	3302      	adds	r3, #2
 8002d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	220f      	movs	r2, #15
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002daa:	d00d      	beq.n	8002dc8 <HAL_GPIO_Init+0x1d4>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a43      	ldr	r2, [pc, #268]	; (8002ebc <HAL_GPIO_Init+0x2c8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d007      	beq.n	8002dc4 <HAL_GPIO_Init+0x1d0>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a42      	ldr	r2, [pc, #264]	; (8002ec0 <HAL_GPIO_Init+0x2cc>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d101      	bne.n	8002dc0 <HAL_GPIO_Init+0x1cc>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e004      	b.n	8002dca <HAL_GPIO_Init+0x1d6>
 8002dc0:	2307      	movs	r3, #7
 8002dc2:	e002      	b.n	8002dca <HAL_GPIO_Init+0x1d6>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e000      	b.n	8002dca <HAL_GPIO_Init+0x1d6>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	f002 0203 	and.w	r2, r2, #3
 8002dd0:	0092      	lsls	r2, r2, #2
 8002dd2:	4093      	lsls	r3, r2
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002dda:	4937      	ldr	r1, [pc, #220]	; (8002eb8 <HAL_GPIO_Init+0x2c4>)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	089b      	lsrs	r3, r3, #2
 8002de0:	3302      	adds	r3, #2
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002de8:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4013      	ands	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e0c:	4a2d      	ldr	r2, [pc, #180]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e12:	4b2c      	ldr	r3, [pc, #176]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e36:	4a23      	ldr	r2, [pc, #140]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e3c:	4b21      	ldr	r3, [pc, #132]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	43db      	mvns	r3, r3
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e60:	4a18      	ldr	r2, [pc, #96]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e66:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4013      	ands	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	3301      	adds	r3, #1
 8002e94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f47f aeaf 	bne.w	8002c04 <HAL_GPIO_Init+0x10>
  }
}
 8002ea6:	bf00      	nop
 8002ea8:	bf00      	nop
 8002eaa:	371c      	adds	r7, #28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40010000 	.word	0x40010000
 8002ebc:	48000400 	.word	0x48000400
 8002ec0:	48000800 	.word	0x48000800
 8002ec4:	40010400 	.word	0x40010400

08002ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ed8:	787b      	ldrb	r3, [r7, #1]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ede:	887a      	ldrh	r2, [r7, #2]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ee4:	e002      	b.n	8002eec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ee6:	887a      	ldrh	r2, [r7, #2]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a04      	ldr	r2, [pc, #16]	; (8002f14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f06:	6013      	str	r3, [r2, #0]
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40007000 	.word	0x40007000

08002f18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f1c:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40007000 	.word	0x40007000

08002f34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f42:	d130      	bne.n	8002fa6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f44:	4b23      	ldr	r3, [pc, #140]	; (8002fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f50:	d038      	beq.n	8002fc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f52:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f5a:	4a1e      	ldr	r2, [pc, #120]	; (8002fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f62:	4b1d      	ldr	r3, [pc, #116]	; (8002fd8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2232      	movs	r2, #50	; 0x32
 8002f68:	fb02 f303 	mul.w	r3, r2, r3
 8002f6c:	4a1b      	ldr	r2, [pc, #108]	; (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	0c9b      	lsrs	r3, r3, #18
 8002f74:	3301      	adds	r3, #1
 8002f76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f78:	e002      	b.n	8002f80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8c:	d102      	bne.n	8002f94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f2      	bne.n	8002f7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f94:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa0:	d110      	bne.n	8002fc4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e00f      	b.n	8002fc6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb2:	d007      	beq.n	8002fc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fb4:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fbc:	4a05      	ldr	r2, [pc, #20]	; (8002fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fc2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40007000 	.word	0x40007000
 8002fd8:	2000e648 	.word	0x2000e648
 8002fdc:	431bde83 	.word	0x431bde83

08002fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f000 bc02 	b.w	80037f8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ff4:	4b96      	ldr	r3, [pc, #600]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 030c 	and.w	r3, r3, #12
 8002ffc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ffe:	4b94      	ldr	r3, [pc, #592]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 80e4 	beq.w	80031de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d007      	beq.n	800302c <HAL_RCC_OscConfig+0x4c>
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	2b0c      	cmp	r3, #12
 8003020:	f040 808b 	bne.w	800313a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	2b01      	cmp	r3, #1
 8003028:	f040 8087 	bne.w	800313a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800302c:	4b88      	ldr	r3, [pc, #544]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <HAL_RCC_OscConfig+0x64>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e3d9      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1a      	ldr	r2, [r3, #32]
 8003048:	4b81      	ldr	r3, [pc, #516]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d004      	beq.n	800305e <HAL_RCC_OscConfig+0x7e>
 8003054:	4b7e      	ldr	r3, [pc, #504]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800305c:	e005      	b.n	800306a <HAL_RCC_OscConfig+0x8a>
 800305e:	4b7c      	ldr	r3, [pc, #496]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 8003060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800306a:	4293      	cmp	r3, r2
 800306c:	d223      	bcs.n	80030b6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fd8c 	bl	8003b90 <RCC_SetFlashLatencyFromMSIRange>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e3ba      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003082:	4b73      	ldr	r3, [pc, #460]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a72      	ldr	r2, [pc, #456]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 8003088:	f043 0308 	orr.w	r3, r3, #8
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	4b70      	ldr	r3, [pc, #448]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	496d      	ldr	r1, [pc, #436]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 800309c:	4313      	orrs	r3, r2
 800309e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030a0:	4b6b      	ldr	r3, [pc, #428]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	4968      	ldr	r1, [pc, #416]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]
 80030b4:	e025      	b.n	8003102 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030b6:	4b66      	ldr	r3, [pc, #408]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a65      	ldr	r2, [pc, #404]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 80030bc:	f043 0308 	orr.w	r3, r3, #8
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b63      	ldr	r3, [pc, #396]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	4960      	ldr	r1, [pc, #384]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d4:	4b5e      	ldr	r3, [pc, #376]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	495b      	ldr	r1, [pc, #364]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fd4c 	bl	8003b90 <RCC_SetFlashLatencyFromMSIRange>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e37a      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003102:	f000 fc81 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 8003106:	4602      	mov	r2, r0
 8003108:	4b51      	ldr	r3, [pc, #324]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	4950      	ldr	r1, [pc, #320]	; (8003254 <HAL_RCC_OscConfig+0x274>)
 8003114:	5ccb      	ldrb	r3, [r1, r3]
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	fa22 f303 	lsr.w	r3, r2, r3
 800311e:	4a4e      	ldr	r2, [pc, #312]	; (8003258 <HAL_RCC_OscConfig+0x278>)
 8003120:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003122:	4b4e      	ldr	r3, [pc, #312]	; (800325c <HAL_RCC_OscConfig+0x27c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff f95c 	bl	80023e4 <HAL_InitTick>
 800312c:	4603      	mov	r3, r0
 800312e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d052      	beq.n	80031dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	e35e      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d032      	beq.n	80031a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003142:	4b43      	ldr	r3, [pc, #268]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a42      	ldr	r2, [pc, #264]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800314e:	f7ff f999 	bl	8002484 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003156:	f7ff f995 	bl	8002484 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e347      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003168:	4b39      	ldr	r3, [pc, #228]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003174:	4b36      	ldr	r3, [pc, #216]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a35      	ldr	r2, [pc, #212]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 800317a:	f043 0308 	orr.w	r3, r3, #8
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	4b33      	ldr	r3, [pc, #204]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	4930      	ldr	r1, [pc, #192]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 800318e:	4313      	orrs	r3, r2
 8003190:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003192:	4b2f      	ldr	r3, [pc, #188]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	492b      	ldr	r1, [pc, #172]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]
 80031a6:	e01a      	b.n	80031de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031a8:	4b29      	ldr	r3, [pc, #164]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a28      	ldr	r2, [pc, #160]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 80031ae:	f023 0301 	bic.w	r3, r3, #1
 80031b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031b4:	f7ff f966 	bl	8002484 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031bc:	f7ff f962 	bl	8002484 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e314      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031ce:	4b20      	ldr	r3, [pc, #128]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_OscConfig+0x1dc>
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d073      	beq.n	80032d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_OscConfig+0x21c>
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b0c      	cmp	r3, #12
 80031f4:	d10e      	bne.n	8003214 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d10b      	bne.n	8003214 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031fc:	4b14      	ldr	r3, [pc, #80]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d063      	beq.n	80032d0 <HAL_RCC_OscConfig+0x2f0>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d15f      	bne.n	80032d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e2f1      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800321c:	d106      	bne.n	800322c <HAL_RCC_OscConfig+0x24c>
 800321e:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a0b      	ldr	r2, [pc, #44]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 8003224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e025      	b.n	8003278 <HAL_RCC_OscConfig+0x298>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003234:	d114      	bne.n	8003260 <HAL_RCC_OscConfig+0x280>
 8003236:	4b06      	ldr	r3, [pc, #24]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a05      	ldr	r2, [pc, #20]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 800323c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	4b03      	ldr	r3, [pc, #12]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a02      	ldr	r2, [pc, #8]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 8003248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	e013      	b.n	8003278 <HAL_RCC_OscConfig+0x298>
 8003250:	40021000 	.word	0x40021000
 8003254:	0800f4b8 	.word	0x0800f4b8
 8003258:	2000e648 	.word	0x2000e648
 800325c:	2000e64c 	.word	0x2000e64c
 8003260:	4ba0      	ldr	r3, [pc, #640]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a9f      	ldr	r2, [pc, #636]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 8003266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	4b9d      	ldr	r3, [pc, #628]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a9c      	ldr	r2, [pc, #624]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 8003272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d013      	beq.n	80032a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7ff f900 	bl	8002484 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003288:	f7ff f8fc 	bl	8002484 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	; 0x64
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e2ae      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800329a:	4b92      	ldr	r3, [pc, #584]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x2a8>
 80032a6:	e014      	b.n	80032d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7ff f8ec 	bl	8002484 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b0:	f7ff f8e8 	bl	8002484 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	; 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e29a      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032c2:	4b88      	ldr	r3, [pc, #544]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x2d0>
 80032ce:	e000      	b.n	80032d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d060      	beq.n	80033a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d005      	beq.n	80032f0 <HAL_RCC_OscConfig+0x310>
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	2b0c      	cmp	r3, #12
 80032e8:	d119      	bne.n	800331e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d116      	bne.n	800331e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032f0:	4b7c      	ldr	r3, [pc, #496]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_OscConfig+0x328>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e277      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003308:	4b76      	ldr	r3, [pc, #472]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	061b      	lsls	r3, r3, #24
 8003316:	4973      	ldr	r1, [pc, #460]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 8003318:	4313      	orrs	r3, r2
 800331a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800331c:	e040      	b.n	80033a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d023      	beq.n	800336e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003326:	4b6f      	ldr	r3, [pc, #444]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a6e      	ldr	r2, [pc, #440]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 800332c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003332:	f7ff f8a7 	bl	8002484 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333a:	f7ff f8a3 	bl	8002484 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e255      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800334c:	4b65      	ldr	r3, [pc, #404]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003358:	4b62      	ldr	r3, [pc, #392]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	061b      	lsls	r3, r3, #24
 8003366:	495f      	ldr	r1, [pc, #380]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 8003368:	4313      	orrs	r3, r2
 800336a:	604b      	str	r3, [r1, #4]
 800336c:	e018      	b.n	80033a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800336e:	4b5d      	ldr	r3, [pc, #372]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a5c      	ldr	r2, [pc, #368]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 8003374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7ff f883 	bl	8002484 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003382:	f7ff f87f 	bl	8002484 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e231      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003394:	4b53      	ldr	r3, [pc, #332]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f0      	bne.n	8003382 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d03c      	beq.n	8003426 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01c      	beq.n	80033ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b4:	4b4b      	ldr	r3, [pc, #300]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 80033b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ba:	4a4a      	ldr	r2, [pc, #296]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c4:	f7ff f85e 	bl	8002484 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033cc:	f7ff f85a 	bl	8002484 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e20c      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033de:	4b41      	ldr	r3, [pc, #260]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 80033e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0ef      	beq.n	80033cc <HAL_RCC_OscConfig+0x3ec>
 80033ec:	e01b      	b.n	8003426 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ee:	4b3d      	ldr	r3, [pc, #244]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 80033f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f4:	4a3b      	ldr	r2, [pc, #236]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 80033f6:	f023 0301 	bic.w	r3, r3, #1
 80033fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fe:	f7ff f841 	bl	8002484 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003406:	f7ff f83d 	bl	8002484 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e1ef      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003418:	4b32      	ldr	r3, [pc, #200]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 800341a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1ef      	bne.n	8003406 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 80a6 	beq.w	8003580 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003434:	2300      	movs	r3, #0
 8003436:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003438:	4b2a      	ldr	r3, [pc, #168]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 800343a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10d      	bne.n	8003460 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003444:	4b27      	ldr	r3, [pc, #156]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	4a26      	ldr	r2, [pc, #152]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 800344a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344e:	6593      	str	r3, [r2, #88]	; 0x58
 8003450:	4b24      	ldr	r3, [pc, #144]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 8003452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800345c:	2301      	movs	r3, #1
 800345e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003460:	4b21      	ldr	r3, [pc, #132]	; (80034e8 <HAL_RCC_OscConfig+0x508>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003468:	2b00      	cmp	r3, #0
 800346a:	d118      	bne.n	800349e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800346c:	4b1e      	ldr	r3, [pc, #120]	; (80034e8 <HAL_RCC_OscConfig+0x508>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1d      	ldr	r2, [pc, #116]	; (80034e8 <HAL_RCC_OscConfig+0x508>)
 8003472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003476:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003478:	f7ff f804 	bl	8002484 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003480:	f7ff f800 	bl	8002484 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e1b2      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003492:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <HAL_RCC_OscConfig+0x508>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d108      	bne.n	80034b8 <HAL_RCC_OscConfig+0x4d8>
 80034a6:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 80034a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ac:	4a0d      	ldr	r2, [pc, #52]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034b6:	e029      	b.n	800350c <HAL_RCC_OscConfig+0x52c>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b05      	cmp	r3, #5
 80034be:	d115      	bne.n	80034ec <HAL_RCC_OscConfig+0x50c>
 80034c0:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	4a07      	ldr	r2, [pc, #28]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 80034c8:	f043 0304 	orr.w	r3, r3, #4
 80034cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034d0:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d6:	4a03      	ldr	r2, [pc, #12]	; (80034e4 <HAL_RCC_OscConfig+0x504>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034e0:	e014      	b.n	800350c <HAL_RCC_OscConfig+0x52c>
 80034e2:	bf00      	nop
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40007000 	.word	0x40007000
 80034ec:	4b9a      	ldr	r3, [pc, #616]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f2:	4a99      	ldr	r2, [pc, #612]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 80034f4:	f023 0301 	bic.w	r3, r3, #1
 80034f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034fc:	4b96      	ldr	r3, [pc, #600]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003502:	4a95      	ldr	r2, [pc, #596]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 8003504:	f023 0304 	bic.w	r3, r3, #4
 8003508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d016      	beq.n	8003542 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003514:	f7fe ffb6 	bl	8002484 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800351a:	e00a      	b.n	8003532 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351c:	f7fe ffb2 	bl	8002484 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	; 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e162      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003532:	4b89      	ldr	r3, [pc, #548]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 8003534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0ed      	beq.n	800351c <HAL_RCC_OscConfig+0x53c>
 8003540:	e015      	b.n	800356e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003542:	f7fe ff9f 	bl	8002484 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003548:	e00a      	b.n	8003560 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354a:	f7fe ff9b 	bl	8002484 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	f241 3288 	movw	r2, #5000	; 0x1388
 8003558:	4293      	cmp	r3, r2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e14b      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003560:	4b7d      	ldr	r3, [pc, #500]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 8003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1ed      	bne.n	800354a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800356e:	7ffb      	ldrb	r3, [r7, #31]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d105      	bne.n	8003580 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003574:	4b78      	ldr	r3, [pc, #480]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	4a77      	ldr	r2, [pc, #476]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 800357a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800357e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0320 	and.w	r3, r3, #32
 8003588:	2b00      	cmp	r3, #0
 800358a:	d03c      	beq.n	8003606 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01c      	beq.n	80035ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003594:	4b70      	ldr	r3, [pc, #448]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 8003596:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800359a:	4a6f      	ldr	r2, [pc, #444]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a4:	f7fe ff6e 	bl	8002484 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035ac:	f7fe ff6a 	bl	8002484 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e11c      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035be:	4b66      	ldr	r3, [pc, #408]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 80035c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0ef      	beq.n	80035ac <HAL_RCC_OscConfig+0x5cc>
 80035cc:	e01b      	b.n	8003606 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035ce:	4b62      	ldr	r3, [pc, #392]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 80035d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035d4:	4a60      	ldr	r2, [pc, #384]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035de:	f7fe ff51 	bl	8002484 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035e6:	f7fe ff4d 	bl	8002484 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e0ff      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035f8:	4b57      	ldr	r3, [pc, #348]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 80035fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1ef      	bne.n	80035e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80f3 	beq.w	80037f6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	2b02      	cmp	r3, #2
 8003616:	f040 80c9 	bne.w	80037ac <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800361a:	4b4f      	ldr	r3, [pc, #316]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f003 0203 	and.w	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	429a      	cmp	r2, r3
 800362c:	d12c      	bne.n	8003688 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	3b01      	subs	r3, #1
 800363a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800363c:	429a      	cmp	r2, r3
 800363e:	d123      	bne.n	8003688 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800364c:	429a      	cmp	r2, r3
 800364e:	d11b      	bne.n	8003688 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800365c:	429a      	cmp	r2, r3
 800365e:	d113      	bne.n	8003688 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366a:	085b      	lsrs	r3, r3, #1
 800366c:	3b01      	subs	r3, #1
 800366e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003670:	429a      	cmp	r2, r3
 8003672:	d109      	bne.n	8003688 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	085b      	lsrs	r3, r3, #1
 8003680:	3b01      	subs	r3, #1
 8003682:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003684:	429a      	cmp	r2, r3
 8003686:	d06b      	beq.n	8003760 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	2b0c      	cmp	r3, #12
 800368c:	d062      	beq.n	8003754 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800368e:	4b32      	ldr	r3, [pc, #200]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e0ac      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800369e:	4b2e      	ldr	r3, [pc, #184]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a2d      	ldr	r2, [pc, #180]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 80036a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036aa:	f7fe feeb 	bl	8002484 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b2:	f7fe fee7 	bl	8002484 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e099      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c4:	4b24      	ldr	r3, [pc, #144]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f0      	bne.n	80036b2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036d0:	4b21      	ldr	r3, [pc, #132]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	4b21      	ldr	r3, [pc, #132]	; (800375c <HAL_RCC_OscConfig+0x77c>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036e0:	3a01      	subs	r2, #1
 80036e2:	0112      	lsls	r2, r2, #4
 80036e4:	4311      	orrs	r1, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036ea:	0212      	lsls	r2, r2, #8
 80036ec:	4311      	orrs	r1, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036f2:	0852      	lsrs	r2, r2, #1
 80036f4:	3a01      	subs	r2, #1
 80036f6:	0552      	lsls	r2, r2, #21
 80036f8:	4311      	orrs	r1, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036fe:	0852      	lsrs	r2, r2, #1
 8003700:	3a01      	subs	r2, #1
 8003702:	0652      	lsls	r2, r2, #25
 8003704:	4311      	orrs	r1, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800370a:	06d2      	lsls	r2, r2, #27
 800370c:	430a      	orrs	r2, r1
 800370e:	4912      	ldr	r1, [pc, #72]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 8003710:	4313      	orrs	r3, r2
 8003712:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003714:	4b10      	ldr	r3, [pc, #64]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a0f      	ldr	r2, [pc, #60]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 800371a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800371e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003720:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	4a0c      	ldr	r2, [pc, #48]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 8003726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800372a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800372c:	f7fe feaa 	bl	8002484 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003734:	f7fe fea6 	bl	8002484 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e058      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003746:	4b04      	ldr	r3, [pc, #16]	; (8003758 <HAL_RCC_OscConfig+0x778>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003752:	e050      	b.n	80037f6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e04f      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
 8003758:	40021000 	.word	0x40021000
 800375c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003760:	4b27      	ldr	r3, [pc, #156]	; (8003800 <HAL_RCC_OscConfig+0x820>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d144      	bne.n	80037f6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800376c:	4b24      	ldr	r3, [pc, #144]	; (8003800 <HAL_RCC_OscConfig+0x820>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a23      	ldr	r2, [pc, #140]	; (8003800 <HAL_RCC_OscConfig+0x820>)
 8003772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003776:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003778:	4b21      	ldr	r3, [pc, #132]	; (8003800 <HAL_RCC_OscConfig+0x820>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	4a20      	ldr	r2, [pc, #128]	; (8003800 <HAL_RCC_OscConfig+0x820>)
 800377e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003782:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003784:	f7fe fe7e 	bl	8002484 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378c:	f7fe fe7a 	bl	8002484 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e02c      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379e:	4b18      	ldr	r3, [pc, #96]	; (8003800 <HAL_RCC_OscConfig+0x820>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x7ac>
 80037aa:	e024      	b.n	80037f6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b0c      	cmp	r3, #12
 80037b0:	d01f      	beq.n	80037f2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b2:	4b13      	ldr	r3, [pc, #76]	; (8003800 <HAL_RCC_OscConfig+0x820>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a12      	ldr	r2, [pc, #72]	; (8003800 <HAL_RCC_OscConfig+0x820>)
 80037b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037be:	f7fe fe61 	bl	8002484 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c6:	f7fe fe5d 	bl	8002484 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e00f      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d8:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_RCC_OscConfig+0x820>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f0      	bne.n	80037c6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_RCC_OscConfig+0x820>)
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	4905      	ldr	r1, [pc, #20]	; (8003800 <HAL_RCC_OscConfig+0x820>)
 80037ea:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_RCC_OscConfig+0x824>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	60cb      	str	r3, [r1, #12]
 80037f0:	e001      	b.n	80037f6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3720      	adds	r7, #32
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40021000 	.word	0x40021000
 8003804:	feeefffc 	.word	0xfeeefffc

08003808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0e7      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800381c:	4b75      	ldr	r3, [pc, #468]	; (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d910      	bls.n	800384c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	4b72      	ldr	r3, [pc, #456]	; (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 0207 	bic.w	r2, r3, #7
 8003832:	4970      	ldr	r1, [pc, #448]	; (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383a:	4b6e      	ldr	r3, [pc, #440]	; (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0cf      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d010      	beq.n	800387a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	4b66      	ldr	r3, [pc, #408]	; (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003864:	429a      	cmp	r2, r3
 8003866:	d908      	bls.n	800387a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003868:	4b63      	ldr	r3, [pc, #396]	; (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4960      	ldr	r1, [pc, #384]	; (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d04c      	beq.n	8003920 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b03      	cmp	r3, #3
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800388e:	4b5a      	ldr	r3, [pc, #360]	; (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d121      	bne.n	80038de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e0a6      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038a6:	4b54      	ldr	r3, [pc, #336]	; (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d115      	bne.n	80038de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e09a      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d107      	bne.n	80038ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038be:	4b4e      	ldr	r3, [pc, #312]	; (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e08e      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ce:	4b4a      	ldr	r3, [pc, #296]	; (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e086      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038de:	4b46      	ldr	r3, [pc, #280]	; (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f023 0203 	bic.w	r2, r3, #3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4943      	ldr	r1, [pc, #268]	; (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f0:	f7fe fdc8 	bl	8002484 <HAL_GetTick>
 80038f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	e00a      	b.n	800390e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f8:	f7fe fdc4 	bl	8002484 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f241 3288 	movw	r2, #5000	; 0x1388
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e06e      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390e:	4b3a      	ldr	r3, [pc, #232]	; (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 020c 	and.w	r2, r3, #12
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	429a      	cmp	r2, r3
 800391e:	d1eb      	bne.n	80038f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d010      	beq.n	800394e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	4b31      	ldr	r3, [pc, #196]	; (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003938:	429a      	cmp	r2, r3
 800393a:	d208      	bcs.n	800394e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800393c:	4b2e      	ldr	r3, [pc, #184]	; (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	492b      	ldr	r1, [pc, #172]	; (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800394e:	4b29      	ldr	r3, [pc, #164]	; (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d210      	bcs.n	800397e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395c:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f023 0207 	bic.w	r2, r3, #7
 8003964:	4923      	ldr	r1, [pc, #140]	; (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	4313      	orrs	r3, r2
 800396a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396c:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d001      	beq.n	800397e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e036      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800398a:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	4918      	ldr	r1, [pc, #96]	; (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003998:	4313      	orrs	r3, r2
 800399a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d009      	beq.n	80039bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039a8:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4910      	ldr	r1, [pc, #64]	; (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039bc:	f000 f824 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	490b      	ldr	r1, [pc, #44]	; (80039fc <HAL_RCC_ClockConfig+0x1f4>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	fa22 f303 	lsr.w	r3, r2, r3
 80039d8:	4a09      	ldr	r2, [pc, #36]	; (8003a00 <HAL_RCC_ClockConfig+0x1f8>)
 80039da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039dc:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_RCC_ClockConfig+0x1fc>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fe fcff 	bl	80023e4 <HAL_InitTick>
 80039e6:	4603      	mov	r3, r0
 80039e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80039ea:	7afb      	ldrb	r3, [r7, #11]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40022000 	.word	0x40022000
 80039f8:	40021000 	.word	0x40021000
 80039fc:	0800f4b8 	.word	0x0800f4b8
 8003a00:	2000e648 	.word	0x2000e648
 8003a04:	2000e64c 	.word	0x2000e64c

08003a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b089      	sub	sp, #36	; 0x24
 8003a0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	2300      	movs	r3, #0
 8003a14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a16:	4b3e      	ldr	r3, [pc, #248]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a20:	4b3b      	ldr	r3, [pc, #236]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0x34>
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	2b0c      	cmp	r3, #12
 8003a34:	d121      	bne.n	8003a7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d11e      	bne.n	8003a7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a3c:	4b34      	ldr	r3, [pc, #208]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d107      	bne.n	8003a58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a48:	4b31      	ldr	r3, [pc, #196]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a4e:	0a1b      	lsrs	r3, r3, #8
 8003a50:	f003 030f 	and.w	r3, r3, #15
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	e005      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a58:	4b2d      	ldr	r3, [pc, #180]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a64:	4a2b      	ldr	r2, [pc, #172]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10d      	bne.n	8003a90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a78:	e00a      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d102      	bne.n	8003a86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a80:	4b25      	ldr	r3, [pc, #148]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a82:	61bb      	str	r3, [r7, #24]
 8003a84:	e004      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a8c:	4b23      	ldr	r3, [pc, #140]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x114>)
 8003a8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2b0c      	cmp	r3, #12
 8003a94:	d134      	bne.n	8003b00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a96:	4b1e      	ldr	r3, [pc, #120]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d003      	beq.n	8003aae <HAL_RCC_GetSysClockFreq+0xa6>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d003      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0xac>
 8003aac:	e005      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003aae:	4b1a      	ldr	r3, [pc, #104]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ab0:	617b      	str	r3, [r7, #20]
      break;
 8003ab2:	e005      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ab4:	4b19      	ldr	r3, [pc, #100]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ab6:	617b      	str	r3, [r7, #20]
      break;
 8003ab8:	e002      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	617b      	str	r3, [r7, #20]
      break;
 8003abe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ac0:	4b13      	ldr	r3, [pc, #76]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	3301      	adds	r3, #1
 8003acc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ace:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	0a1b      	lsrs	r3, r3, #8
 8003ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	fb03 f202 	mul.w	r2, r3, r2
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ae6:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	0e5b      	lsrs	r3, r3, #25
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	3301      	adds	r3, #1
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b00:	69bb      	ldr	r3, [r7, #24]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3724      	adds	r7, #36	; 0x24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40021000 	.word	0x40021000
 8003b14:	0800f4d0 	.word	0x0800f4d0
 8003b18:	00f42400 	.word	0x00f42400
 8003b1c:	007a1200 	.word	0x007a1200

08003b20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b24:	4b03      	ldr	r3, [pc, #12]	; (8003b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	2000e648 	.word	0x2000e648

08003b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b3c:	f7ff fff0 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b40:	4602      	mov	r2, r0
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	4904      	ldr	r1, [pc, #16]	; (8003b60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b4e:	5ccb      	ldrb	r3, [r1, r3]
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	0800f4c8 	.word	0x0800f4c8

08003b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b68:	f7ff ffda 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	0adb      	lsrs	r3, r3, #11
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	4904      	ldr	r1, [pc, #16]	; (8003b8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b7a:	5ccb      	ldrb	r3, [r1, r3]
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	0800f4c8 	.word	0x0800f4c8

08003b90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b98:	2300      	movs	r3, #0
 8003b9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b9c:	4b2a      	ldr	r3, [pc, #168]	; (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ba8:	f7ff f9b6 	bl	8002f18 <HAL_PWREx_GetVoltageRange>
 8003bac:	6178      	str	r0, [r7, #20]
 8003bae:	e014      	b.n	8003bda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bb0:	4b25      	ldr	r3, [pc, #148]	; (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb4:	4a24      	ldr	r2, [pc, #144]	; (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bba:	6593      	str	r3, [r2, #88]	; 0x58
 8003bbc:	4b22      	ldr	r3, [pc, #136]	; (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bc8:	f7ff f9a6 	bl	8002f18 <HAL_PWREx_GetVoltageRange>
 8003bcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bce:	4b1e      	ldr	r3, [pc, #120]	; (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd2:	4a1d      	ldr	r2, [pc, #116]	; (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be0:	d10b      	bne.n	8003bfa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b80      	cmp	r3, #128	; 0x80
 8003be6:	d919      	bls.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2ba0      	cmp	r3, #160	; 0xa0
 8003bec:	d902      	bls.n	8003bf4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bee:	2302      	movs	r3, #2
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	e013      	b.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	e010      	b.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b80      	cmp	r3, #128	; 0x80
 8003bfe:	d902      	bls.n	8003c06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c00:	2303      	movs	r3, #3
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	e00a      	b.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b80      	cmp	r3, #128	; 0x80
 8003c0a:	d102      	bne.n	8003c12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	e004      	b.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b70      	cmp	r3, #112	; 0x70
 8003c16:	d101      	bne.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c18:	2301      	movs	r3, #1
 8003c1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f023 0207 	bic.w	r2, r3, #7
 8003c24:	4909      	ldr	r1, [pc, #36]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c2c:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d001      	beq.n	8003c3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40022000 	.word	0x40022000

08003c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c58:	2300      	movs	r3, #0
 8003c5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d031      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c74:	d01a      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003c76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c7a:	d814      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d009      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c84:	d10f      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003c86:	4b5d      	ldr	r3, [pc, #372]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	4a5c      	ldr	r2, [pc, #368]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c90:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c92:	e00c      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3304      	adds	r3, #4
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 f9de 	bl	800405c <RCCEx_PLLSAI1_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ca4:	e003      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	74fb      	strb	r3, [r7, #19]
      break;
 8003caa:	e000      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003cac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cae:	7cfb      	ldrb	r3, [r7, #19]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10b      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cb4:	4b51      	ldr	r3, [pc, #324]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc2:	494e      	ldr	r1, [pc, #312]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cca:	e001      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ccc:	7cfb      	ldrb	r3, [r7, #19]
 8003cce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 809e 	beq.w	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ce2:	4b46      	ldr	r3, [pc, #280]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00d      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf8:	4b40      	ldr	r3, [pc, #256]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfc:	4a3f      	ldr	r2, [pc, #252]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d02:	6593      	str	r3, [r2, #88]	; 0x58
 8003d04:	4b3d      	ldr	r3, [pc, #244]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d10:	2301      	movs	r3, #1
 8003d12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d14:	4b3a      	ldr	r3, [pc, #232]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a39      	ldr	r2, [pc, #228]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d20:	f7fe fbb0 	bl	8002484 <HAL_GetTick>
 8003d24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d26:	e009      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d28:	f7fe fbac 	bl	8002484 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d902      	bls.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	74fb      	strb	r3, [r7, #19]
        break;
 8003d3a:	e005      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d3c:	4b30      	ldr	r3, [pc, #192]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0ef      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003d48:	7cfb      	ldrb	r3, [r7, #19]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d15a      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d4e:	4b2b      	ldr	r3, [pc, #172]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d01e      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d019      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d6a:	4b24      	ldr	r3, [pc, #144]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d74:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d76:	4b21      	ldr	r3, [pc, #132]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7c:	4a1f      	ldr	r2, [pc, #124]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d86:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8c:	4a1b      	ldr	r2, [pc, #108]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d96:	4a19      	ldr	r2, [pc, #100]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d016      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da8:	f7fe fb6c 	bl	8002484 <HAL_GetTick>
 8003dac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dae:	e00b      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db0:	f7fe fb68 	bl	8002484 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d902      	bls.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	74fb      	strb	r3, [r7, #19]
            break;
 8003dc6:	e006      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0ec      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003dd6:	7cfb      	ldrb	r3, [r7, #19]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10b      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ddc:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dea:	4904      	ldr	r1, [pc, #16]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003df2:	e009      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003df4:	7cfb      	ldrb	r3, [r7, #19]
 8003df6:	74bb      	strb	r3, [r7, #18]
 8003df8:	e006      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003dfa:	bf00      	nop
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e04:	7cfb      	ldrb	r3, [r7, #19]
 8003e06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e08:	7c7b      	ldrb	r3, [r7, #17]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d105      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e0e:	4b8a      	ldr	r3, [pc, #552]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e12:	4a89      	ldr	r2, [pc, #548]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e26:	4b84      	ldr	r3, [pc, #528]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2c:	f023 0203 	bic.w	r2, r3, #3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	4980      	ldr	r1, [pc, #512]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e48:	4b7b      	ldr	r3, [pc, #492]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4e:	f023 020c 	bic.w	r2, r3, #12
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	4978      	ldr	r1, [pc, #480]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e6a:	4b73      	ldr	r3, [pc, #460]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e78:	496f      	ldr	r1, [pc, #444]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e8c:	4b6a      	ldr	r3, [pc, #424]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e92:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9a:	4967      	ldr	r1, [pc, #412]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003eae:	4b62      	ldr	r3, [pc, #392]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	495e      	ldr	r1, [pc, #376]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ed0:	4b59      	ldr	r3, [pc, #356]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	4956      	ldr	r1, [pc, #344]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ef2:	4b51      	ldr	r3, [pc, #324]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	494d      	ldr	r1, [pc, #308]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d028      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f14:	4b48      	ldr	r3, [pc, #288]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	4945      	ldr	r1, [pc, #276]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f32:	d106      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f34:	4b40      	ldr	r3, [pc, #256]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4a3f      	ldr	r2, [pc, #252]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f3e:	60d3      	str	r3, [r2, #12]
 8003f40:	e011      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f4a:	d10c      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	2101      	movs	r1, #1
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 f882 	bl	800405c <RCCEx_PLLSAI1_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f5c:	7cfb      	ldrb	r3, [r7, #19]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003f62:	7cfb      	ldrb	r3, [r7, #19]
 8003f64:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d028      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f72:	4b31      	ldr	r3, [pc, #196]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f80:	492d      	ldr	r1, [pc, #180]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f90:	d106      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f92:	4b29      	ldr	r3, [pc, #164]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	4a28      	ldr	r2, [pc, #160]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f9c:	60d3      	str	r3, [r2, #12]
 8003f9e:	e011      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3304      	adds	r3, #4
 8003fae:	2101      	movs	r1, #1
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 f853 	bl	800405c <RCCEx_PLLSAI1_Config>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fba:	7cfb      	ldrb	r3, [r7, #19]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003fc0:	7cfb      	ldrb	r3, [r7, #19]
 8003fc2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d01c      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fd0:	4b19      	ldr	r3, [pc, #100]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fde:	4916      	ldr	r1, [pc, #88]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fee:	d10c      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f830 	bl	800405c <RCCEx_PLLSAI1_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004000:	7cfb      	ldrb	r3, [r7, #19]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004006:	7cfb      	ldrb	r3, [r7, #19]
 8004008:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004016:	4b08      	ldr	r3, [pc, #32]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004024:	4904      	ldr	r1, [pc, #16]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800402c:	7cbb      	ldrb	r3, [r7, #18]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40021000 	.word	0x40021000

0800403c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004040:	4b05      	ldr	r3, [pc, #20]	; (8004058 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a04      	ldr	r2, [pc, #16]	; (8004058 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004046:	f043 0304 	orr.w	r3, r3, #4
 800404a:	6013      	str	r3, [r2, #0]
}
 800404c:	bf00      	nop
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40021000 	.word	0x40021000

0800405c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800406a:	4b74      	ldr	r3, [pc, #464]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d018      	beq.n	80040a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004076:	4b71      	ldr	r3, [pc, #452]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f003 0203 	and.w	r2, r3, #3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d10d      	bne.n	80040a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
       ||
 800408a:	2b00      	cmp	r3, #0
 800408c:	d009      	beq.n	80040a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800408e:	4b6b      	ldr	r3, [pc, #428]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	091b      	lsrs	r3, r3, #4
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
       ||
 800409e:	429a      	cmp	r2, r3
 80040a0:	d047      	beq.n	8004132 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	73fb      	strb	r3, [r7, #15]
 80040a6:	e044      	b.n	8004132 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d018      	beq.n	80040e2 <RCCEx_PLLSAI1_Config+0x86>
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d825      	bhi.n	8004100 <RCCEx_PLLSAI1_Config+0xa4>
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d002      	beq.n	80040be <RCCEx_PLLSAI1_Config+0x62>
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d009      	beq.n	80040d0 <RCCEx_PLLSAI1_Config+0x74>
 80040bc:	e020      	b.n	8004100 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040be:	4b5f      	ldr	r3, [pc, #380]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d11d      	bne.n	8004106 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ce:	e01a      	b.n	8004106 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040d0:	4b5a      	ldr	r3, [pc, #360]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d116      	bne.n	800410a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e0:	e013      	b.n	800410a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040e2:	4b56      	ldr	r3, [pc, #344]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10f      	bne.n	800410e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040ee:	4b53      	ldr	r3, [pc, #332]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040fe:	e006      	b.n	800410e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	73fb      	strb	r3, [r7, #15]
      break;
 8004104:	e004      	b.n	8004110 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004106:	bf00      	nop
 8004108:	e002      	b.n	8004110 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800410a:	bf00      	nop
 800410c:	e000      	b.n	8004110 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800410e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004110:	7bfb      	ldrb	r3, [r7, #15]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10d      	bne.n	8004132 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004116:	4b49      	ldr	r3, [pc, #292]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6819      	ldr	r1, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	3b01      	subs	r3, #1
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	430b      	orrs	r3, r1
 800412c:	4943      	ldr	r1, [pc, #268]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 800412e:	4313      	orrs	r3, r2
 8004130:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004132:	7bfb      	ldrb	r3, [r7, #15]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d17c      	bne.n	8004232 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004138:	4b40      	ldr	r3, [pc, #256]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a3f      	ldr	r2, [pc, #252]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 800413e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004142:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004144:	f7fe f99e 	bl	8002484 <HAL_GetTick>
 8004148:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800414a:	e009      	b.n	8004160 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800414c:	f7fe f99a 	bl	8002484 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d902      	bls.n	8004160 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	73fb      	strb	r3, [r7, #15]
        break;
 800415e:	e005      	b.n	800416c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004160:	4b36      	ldr	r3, [pc, #216]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1ef      	bne.n	800414c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d15f      	bne.n	8004232 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d110      	bne.n	800419a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004178:	4b30      	ldr	r3, [pc, #192]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004180:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6892      	ldr	r2, [r2, #8]
 8004188:	0211      	lsls	r1, r2, #8
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	68d2      	ldr	r2, [r2, #12]
 800418e:	06d2      	lsls	r2, r2, #27
 8004190:	430a      	orrs	r2, r1
 8004192:	492a      	ldr	r1, [pc, #168]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004194:	4313      	orrs	r3, r2
 8004196:	610b      	str	r3, [r1, #16]
 8004198:	e027      	b.n	80041ea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d112      	bne.n	80041c6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041a0:	4b26      	ldr	r3, [pc, #152]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80041a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6892      	ldr	r2, [r2, #8]
 80041b0:	0211      	lsls	r1, r2, #8
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6912      	ldr	r2, [r2, #16]
 80041b6:	0852      	lsrs	r2, r2, #1
 80041b8:	3a01      	subs	r2, #1
 80041ba:	0552      	lsls	r2, r2, #21
 80041bc:	430a      	orrs	r2, r1
 80041be:	491f      	ldr	r1, [pc, #124]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	610b      	str	r3, [r1, #16]
 80041c4:	e011      	b.n	80041ea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041c6:	4b1d      	ldr	r3, [pc, #116]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6892      	ldr	r2, [r2, #8]
 80041d6:	0211      	lsls	r1, r2, #8
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6952      	ldr	r2, [r2, #20]
 80041dc:	0852      	lsrs	r2, r2, #1
 80041de:	3a01      	subs	r2, #1
 80041e0:	0652      	lsls	r2, r2, #25
 80041e2:	430a      	orrs	r2, r1
 80041e4:	4915      	ldr	r1, [pc, #84]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041ea:	4b14      	ldr	r3, [pc, #80]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a13      	ldr	r2, [pc, #76]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f6:	f7fe f945 	bl	8002484 <HAL_GetTick>
 80041fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041fc:	e009      	b.n	8004212 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041fe:	f7fe f941 	bl	8002484 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d902      	bls.n	8004212 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	73fb      	strb	r3, [r7, #15]
          break;
 8004210:	e005      	b.n	800421e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004212:	4b0a      	ldr	r3, [pc, #40]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0ef      	beq.n	80041fe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d106      	bne.n	8004232 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004224:	4b05      	ldr	r3, [pc, #20]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	4903      	ldr	r1, [pc, #12]	; (800423c <RCCEx_PLLSAI1_Config+0x1e0>)
 800422e:	4313      	orrs	r3, r2
 8004230:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004232:	7bfb      	ldrb	r3, [r7, #15]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40021000 	.word	0x40021000

08004240 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e095      	b.n	800437e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	2b00      	cmp	r3, #0
 8004258:	d108      	bne.n	800426c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004262:	d009      	beq.n	8004278 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	61da      	str	r2, [r3, #28]
 800426a:	e005      	b.n	8004278 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fd fefa 	bl	800208c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042b8:	d902      	bls.n	80042c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042ba:	2300      	movs	r3, #0
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	e002      	b.n	80042c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80042ce:	d007      	beq.n	80042e0 <HAL_SPI_Init+0xa0>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042d8:	d002      	beq.n	80042e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042f0:	431a      	orrs	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004322:	ea42 0103 	orr.w	r1, r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	0c1b      	lsrs	r3, r3, #16
 800433c:	f003 0204 	and.w	r2, r3, #4
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800435c:	ea42 0103 	orr.w	r1, r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b088      	sub	sp, #32
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	603b      	str	r3, [r7, #0]
 8004392:	4613      	mov	r3, r2
 8004394:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_SPI_Transmit+0x22>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e158      	b.n	800465a <HAL_SPI_Transmit+0x2d4>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043b0:	f7fe f868 	bl	8002484 <HAL_GetTick>
 80043b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d002      	beq.n	80043cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80043c6:	2302      	movs	r3, #2
 80043c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043ca:	e13d      	b.n	8004648 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <HAL_SPI_Transmit+0x52>
 80043d2:	88fb      	ldrh	r3, [r7, #6]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d102      	bne.n	80043de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043dc:	e134      	b.n	8004648 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2203      	movs	r2, #3
 80043e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	88fa      	ldrh	r2, [r7, #6]
 80043f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	88fa      	ldrh	r2, [r7, #6]
 80043fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004428:	d10f      	bne.n	800444a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004438:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004448:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004454:	2b40      	cmp	r3, #64	; 0x40
 8004456:	d007      	beq.n	8004468 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004466:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004470:	d94b      	bls.n	800450a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <HAL_SPI_Transmit+0xfa>
 800447a:	8afb      	ldrh	r3, [r7, #22]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d13e      	bne.n	80044fe <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	881a      	ldrh	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	1c9a      	adds	r2, r3, #2
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b01      	subs	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044a4:	e02b      	b.n	80044fe <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d112      	bne.n	80044da <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	881a      	ldrh	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c4:	1c9a      	adds	r2, r3, #2
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044d8:	e011      	b.n	80044fe <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044da:	f7fd ffd3 	bl	8002484 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d803      	bhi.n	80044f2 <HAL_SPI_Transmit+0x16c>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044f0:	d102      	bne.n	80044f8 <HAL_SPI_Transmit+0x172>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d102      	bne.n	80044fe <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044fc:	e0a4      	b.n	8004648 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004502:	b29b      	uxth	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1ce      	bne.n	80044a6 <HAL_SPI_Transmit+0x120>
 8004508:	e07c      	b.n	8004604 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <HAL_SPI_Transmit+0x192>
 8004512:	8afb      	ldrh	r3, [r7, #22]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d170      	bne.n	80045fa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b01      	cmp	r3, #1
 8004520:	d912      	bls.n	8004548 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	881a      	ldrh	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	1c9a      	adds	r2, r3, #2
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b02      	subs	r3, #2
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004546:	e058      	b.n	80045fa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	330c      	adds	r3, #12
 8004552:	7812      	ldrb	r2, [r2, #0]
 8004554:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800456e:	e044      	b.n	80045fa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b02      	cmp	r3, #2
 800457c:	d12b      	bne.n	80045d6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b01      	cmp	r3, #1
 8004586:	d912      	bls.n	80045ae <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	881a      	ldrh	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	1c9a      	adds	r2, r3, #2
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b02      	subs	r3, #2
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045ac:	e025      	b.n	80045fa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	330c      	adds	r3, #12
 80045b8:	7812      	ldrb	r2, [r2, #0]
 80045ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045d4:	e011      	b.n	80045fa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045d6:	f7fd ff55 	bl	8002484 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d803      	bhi.n	80045ee <HAL_SPI_Transmit+0x268>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045ec:	d102      	bne.n	80045f4 <HAL_SPI_Transmit+0x26e>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d102      	bne.n	80045fa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045f8:	e026      	b.n	8004648 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045fe:	b29b      	uxth	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1b5      	bne.n	8004570 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	6839      	ldr	r1, [r7, #0]
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 f949 	bl	80048a0 <SPI_EndRxTxTransaction>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2220      	movs	r2, #32
 8004618:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10a      	bne.n	8004638 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004622:	2300      	movs	r3, #0
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	613b      	str	r3, [r7, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	77fb      	strb	r3, [r7, #31]
 8004644:	e000      	b.n	8004648 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004646:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004658:	7ffb      	ldrb	r3, [r7, #31]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3720      	adds	r7, #32
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b088      	sub	sp, #32
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	4613      	mov	r3, r2
 8004672:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004674:	f7fd ff06 	bl	8002484 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	4413      	add	r3, r2
 8004682:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004684:	f7fd fefe 	bl	8002484 <HAL_GetTick>
 8004688:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800468a:	4b39      	ldr	r3, [pc, #228]	; (8004770 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	015b      	lsls	r3, r3, #5
 8004690:	0d1b      	lsrs	r3, r3, #20
 8004692:	69fa      	ldr	r2, [r7, #28]
 8004694:	fb02 f303 	mul.w	r3, r2, r3
 8004698:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800469a:	e054      	b.n	8004746 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046a2:	d050      	beq.n	8004746 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046a4:	f7fd feee 	bl	8002484 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d902      	bls.n	80046ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d13d      	bne.n	8004736 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046d2:	d111      	bne.n	80046f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046dc:	d004      	beq.n	80046e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e6:	d107      	bne.n	80046f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004700:	d10f      	bne.n	8004722 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004720:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e017      	b.n	8004766 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	3b01      	subs	r3, #1
 8004744:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4013      	ands	r3, r2
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	429a      	cmp	r2, r3
 8004754:	bf0c      	ite	eq
 8004756:	2301      	moveq	r3, #1
 8004758:	2300      	movne	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	461a      	mov	r2, r3
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	429a      	cmp	r2, r3
 8004762:	d19b      	bne.n	800469c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3720      	adds	r7, #32
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	2000e648 	.word	0x2000e648

08004774 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b08a      	sub	sp, #40	; 0x28
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004782:	2300      	movs	r3, #0
 8004784:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004786:	f7fd fe7d 	bl	8002484 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478e:	1a9b      	subs	r3, r3, r2
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	4413      	add	r3, r2
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004796:	f7fd fe75 	bl	8002484 <HAL_GetTick>
 800479a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	330c      	adds	r3, #12
 80047a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80047a4:	4b3d      	ldr	r3, [pc, #244]	; (800489c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	00da      	lsls	r2, r3, #3
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	0d1b      	lsrs	r3, r3, #20
 80047b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
 80047ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80047bc:	e060      	b.n	8004880 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047c4:	d107      	bne.n	80047d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d104      	bne.n	80047d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047dc:	d050      	beq.n	8004880 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047de:	f7fd fe51 	bl	8002484 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d902      	bls.n	80047f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d13d      	bne.n	8004870 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004802:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800480c:	d111      	bne.n	8004832 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004816:	d004      	beq.n	8004822 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004820:	d107      	bne.n	8004832 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004830:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800483a:	d10f      	bne.n	800485c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800485a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e010      	b.n	8004892 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	3b01      	subs	r3, #1
 800487e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	4013      	ands	r3, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	429a      	cmp	r2, r3
 800488e:	d196      	bne.n	80047be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3728      	adds	r7, #40	; 0x28
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	2000e648 	.word	0x2000e648

080048a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f7ff ff5b 	bl	8004774 <SPI_WaitFifoStateUntilTimeout>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c8:	f043 0220 	orr.w	r2, r3, #32
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e027      	b.n	8004924 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2200      	movs	r2, #0
 80048dc:	2180      	movs	r1, #128	; 0x80
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f7ff fec0 	bl	8004664 <SPI_WaitFlagStateUntilTimeout>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d007      	beq.n	80048fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ee:	f043 0220 	orr.w	r2, r3, #32
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e014      	b.n	8004924 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2200      	movs	r2, #0
 8004902:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f7ff ff34 	bl	8004774 <SPI_WaitFifoStateUntilTimeout>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d007      	beq.n	8004922 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004916:	f043 0220 	orr.w	r2, r3, #32
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e000      	b.n	8004924 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e040      	b.n	80049c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004942:	2b00      	cmp	r3, #0
 8004944:	d106      	bne.n	8004954 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fd fbe0 	bl	8002114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2224      	movs	r2, #36	; 0x24
 8004958:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0201 	bic.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fc22 	bl	80051b4 <UART_SetConfig>
 8004970:	4603      	mov	r3, r0
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e022      	b.n	80049c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fe42 	bl	800560c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004996:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fec9 	bl	8005750 <UART_CheckIdleState>
 80049be:	4603      	mov	r3, r0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08a      	sub	sp, #40	; 0x28
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	4613      	mov	r3, r2
 80049d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049dc:	2b20      	cmp	r3, #32
 80049de:	f040 8082 	bne.w	8004ae6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <HAL_UART_Transmit+0x26>
 80049e8:	88fb      	ldrh	r3, [r7, #6]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e07a      	b.n	8004ae8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_UART_Transmit+0x38>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e073      	b.n	8004ae8 <HAL_UART_Transmit+0x120>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2221      	movs	r2, #33	; 0x21
 8004a14:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a16:	f7fd fd35 	bl	8002484 <HAL_GetTick>
 8004a1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	88fa      	ldrh	r2, [r7, #6]
 8004a20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	88fa      	ldrh	r2, [r7, #6]
 8004a28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a34:	d108      	bne.n	8004a48 <HAL_UART_Transmit+0x80>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d104      	bne.n	8004a48 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	61bb      	str	r3, [r7, #24]
 8004a46:	e003      	b.n	8004a50 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004a58:	e02d      	b.n	8004ab6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2200      	movs	r2, #0
 8004a62:	2180      	movs	r1, #128	; 0x80
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 febc 	bl	80057e2 <UART_WaitOnFlagUntilTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e039      	b.n	8004ae8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10b      	bne.n	8004a92 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	881a      	ldrh	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a86:	b292      	uxth	r2, r2
 8004a88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	3302      	adds	r3, #2
 8004a8e:	61bb      	str	r3, [r7, #24]
 8004a90:	e008      	b.n	8004aa4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	781a      	ldrb	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	b292      	uxth	r2, r2
 8004a9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1cb      	bne.n	8004a5a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	2140      	movs	r1, #64	; 0x40
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 fe88 	bl	80057e2 <UART_WaitOnFlagUntilTimeout>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e005      	b.n	8004ae8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	e000      	b.n	8004ae8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004ae6:	2302      	movs	r3, #2
  }
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3720      	adds	r7, #32
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08a      	sub	sp, #40	; 0x28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	4613      	mov	r3, r2
 8004afc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d142      	bne.n	8004b8c <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <HAL_UART_Receive_DMA+0x22>
 8004b0c:	88fb      	ldrh	r3, [r7, #6]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e03b      	b.n	8004b8e <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_UART_Receive_DMA+0x34>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e034      	b.n	8004b8e <HAL_UART_Receive_DMA+0x9e>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <HAL_UART_Receive_DMA+0xa8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d01f      	beq.n	8004b7c <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d018      	beq.n	8004b7c <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	e853 3f00 	ldrex	r3, [r3]
 8004b56:	613b      	str	r3, [r7, #16]
   return(result);
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	461a      	mov	r2, r3
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	623b      	str	r3, [r7, #32]
 8004b6a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	69f9      	ldr	r1, [r7, #28]
 8004b6e:	6a3a      	ldr	r2, [r7, #32]
 8004b70:	e841 2300 	strex	r3, r2, [r1]
 8004b74:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1e6      	bne.n	8004b4a <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004b7c:	88fb      	ldrh	r3, [r7, #6]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fef2 	bl	800596c <UART_Start_Receive_DMA>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	e000      	b.n	8004b8e <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004b8c:	2302      	movs	r3, #2
  }
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3728      	adds	r7, #40	; 0x28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40008000 	.word	0x40008000

08004b9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b0ba      	sub	sp, #232	; 0xe8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004bc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004bc6:	f640 030f 	movw	r3, #2063	; 0x80f
 8004bca:	4013      	ands	r3, r2
 8004bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004bd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d115      	bne.n	8004c04 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bdc:	f003 0320 	and.w	r3, r3, #32
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00f      	beq.n	8004c04 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be8:	f003 0320 	and.w	r3, r3, #32
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d009      	beq.n	8004c04 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 82a6 	beq.w	8005146 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	4798      	blx	r3
      }
      return;
 8004c02:	e2a0      	b.n	8005146 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004c04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 8117 	beq.w	8004e3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004c1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004c1e:	4b85      	ldr	r3, [pc, #532]	; (8004e34 <HAL_UART_IRQHandler+0x298>)
 8004c20:	4013      	ands	r3, r2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 810a 	beq.w	8004e3c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d011      	beq.n	8004c58 <HAL_UART_IRQHandler+0xbc>
 8004c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00b      	beq.n	8004c58 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2201      	movs	r2, #1
 8004c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c4e:	f043 0201 	orr.w	r2, r3, #1
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d011      	beq.n	8004c88 <HAL_UART_IRQHandler+0xec>
 8004c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00b      	beq.n	8004c88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2202      	movs	r2, #2
 8004c76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c7e:	f043 0204 	orr.w	r2, r3, #4
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d011      	beq.n	8004cb8 <HAL_UART_IRQHandler+0x11c>
 8004c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00b      	beq.n	8004cb8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2204      	movs	r2, #4
 8004ca6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cae:	f043 0202 	orr.w	r2, r3, #2
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d017      	beq.n	8004cf4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d105      	bne.n	8004cdc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cd4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00b      	beq.n	8004cf4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2208      	movs	r2, #8
 8004ce2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cea:	f043 0208 	orr.w	r2, r3, #8
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d012      	beq.n	8004d26 <HAL_UART_IRQHandler+0x18a>
 8004d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00c      	beq.n	8004d26 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d1c:	f043 0220 	orr.w	r2, r3, #32
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 820c 	beq.w	800514a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00d      	beq.n	8004d5a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d007      	beq.n	8004d5a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	2b40      	cmp	r3, #64	; 0x40
 8004d70:	d005      	beq.n	8004d7e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d04f      	beq.n	8004e1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fec0 	bl	8005b04 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8e:	2b40      	cmp	r3, #64	; 0x40
 8004d90:	d141      	bne.n	8004e16 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3308      	adds	r3, #8
 8004d98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004db0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3308      	adds	r3, #8
 8004dba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004dbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004dca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004dce:	e841 2300 	strex	r3, r2, [r1]
 8004dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1d9      	bne.n	8004d92 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d013      	beq.n	8004e0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dea:	4a13      	ldr	r2, [pc, #76]	; (8004e38 <HAL_UART_IRQHandler+0x29c>)
 8004dec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fd fdde 	bl	80029b4 <HAL_DMA_Abort_IT>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d017      	beq.n	8004e2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004e08:	4610      	mov	r0, r2
 8004e0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e0c:	e00f      	b.n	8004e2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f9ba 	bl	8005188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e14:	e00b      	b.n	8004e2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f9b6 	bl	8005188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e1c:	e007      	b.n	8004e2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f9b2 	bl	8005188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004e2c:	e18d      	b.n	800514a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e2e:	bf00      	nop
    return;
 8004e30:	e18b      	b.n	800514a <HAL_UART_IRQHandler+0x5ae>
 8004e32:	bf00      	nop
 8004e34:	04000120 	.word	0x04000120
 8004e38:	08005da3 	.word	0x08005da3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	f040 8146 	bne.w	80050d2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e4a:	f003 0310 	and.w	r3, r3, #16
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 813f 	beq.w	80050d2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e58:	f003 0310 	and.w	r3, r3, #16
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 8138 	beq.w	80050d2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2210      	movs	r2, #16
 8004e68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e74:	2b40      	cmp	r3, #64	; 0x40
 8004e76:	f040 80b4 	bne.w	8004fe2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 815f 	beq.w	800514e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	f080 8157 	bcs.w	800514e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ea6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0320 	and.w	r3, r3, #32
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f040 8085 	bne.w	8004fc6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ee6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004eea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ef2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ef6:	e841 2300 	strex	r3, r2, [r1]
 8004efa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1da      	bne.n	8004ebc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3308      	adds	r3, #8
 8004f0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f18:	f023 0301 	bic.w	r3, r3, #1
 8004f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3308      	adds	r3, #8
 8004f26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e1      	bne.n	8004f06 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	3308      	adds	r3, #8
 8004f48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f4c:	e853 3f00 	ldrex	r3, [r3]
 8004f50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3308      	adds	r3, #8
 8004f62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f6e:	e841 2300 	strex	r3, r2, [r1]
 8004f72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1e3      	bne.n	8004f42 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f8e:	e853 3f00 	ldrex	r3, [r3]
 8004f92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f96:	f023 0310 	bic.w	r3, r3, #16
 8004f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004fa8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004faa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e4      	bne.n	8004f86 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fd fcb9 	bl	8002938 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	4619      	mov	r1, r3
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f8de 	bl	800519c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004fe0:	e0b5      	b.n	800514e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 80a7 	beq.w	8005152 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005004:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 80a2 	beq.w	8005152 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005016:	e853 3f00 	ldrex	r3, [r3]
 800501a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800501c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800501e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005022:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	461a      	mov	r2, r3
 800502c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005030:	647b      	str	r3, [r7, #68]	; 0x44
 8005032:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005034:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005036:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005038:	e841 2300 	strex	r3, r2, [r1]
 800503c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800503e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1e4      	bne.n	800500e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3308      	adds	r3, #8
 800504a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	623b      	str	r3, [r7, #32]
   return(result);
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	f023 0301 	bic.w	r3, r3, #1
 800505a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3308      	adds	r3, #8
 8005064:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005068:	633a      	str	r2, [r7, #48]	; 0x30
 800506a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800506e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005070:	e841 2300 	strex	r3, r2, [r1]
 8005074:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1e3      	bne.n	8005044 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	e853 3f00 	ldrex	r3, [r3]
 800509a:	60fb      	str	r3, [r7, #12]
   return(result);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f023 0310 	bic.w	r3, r3, #16
 80050a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050b0:	61fb      	str	r3, [r7, #28]
 80050b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b4:	69b9      	ldr	r1, [r7, #24]
 80050b6:	69fa      	ldr	r2, [r7, #28]
 80050b8:	e841 2300 	strex	r3, r2, [r1]
 80050bc:	617b      	str	r3, [r7, #20]
   return(result);
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1e4      	bne.n	800508e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050c8:	4619      	mov	r1, r3
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f866 	bl	800519c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80050d0:	e03f      	b.n	8005152 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80050d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00e      	beq.n	80050fc <HAL_UART_IRQHandler+0x560>
 80050de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d008      	beq.n	80050fc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80050f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fe94 	bl	8005e22 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050fa:	e02d      	b.n	8005158 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80050fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00e      	beq.n	8005126 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800510c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005110:	2b00      	cmp	r3, #0
 8005112:	d008      	beq.n	8005126 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01c      	beq.n	8005156 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	4798      	blx	r3
    }
    return;
 8005124:	e017      	b.n	8005156 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800512a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512e:	2b00      	cmp	r3, #0
 8005130:	d012      	beq.n	8005158 <HAL_UART_IRQHandler+0x5bc>
 8005132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00c      	beq.n	8005158 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fe45 	bl	8005dce <UART_EndTransmit_IT>
    return;
 8005144:	e008      	b.n	8005158 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005146:	bf00      	nop
 8005148:	e006      	b.n	8005158 <HAL_UART_IRQHandler+0x5bc>
    return;
 800514a:	bf00      	nop
 800514c:	e004      	b.n	8005158 <HAL_UART_IRQHandler+0x5bc>
      return;
 800514e:	bf00      	nop
 8005150:	e002      	b.n	8005158 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005152:	bf00      	nop
 8005154:	e000      	b.n	8005158 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005156:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005158:	37e8      	adds	r7, #232	; 0xe8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop

08005160 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051b8:	b08a      	sub	sp, #40	; 0x28
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	431a      	orrs	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	4313      	orrs	r3, r2
 80051da:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	4bb4      	ldr	r3, [pc, #720]	; (80054b4 <UART_SetConfig+0x300>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	6812      	ldr	r2, [r2, #0]
 80051ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051ec:	430b      	orrs	r3, r1
 80051ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4aa9      	ldr	r2, [pc, #676]	; (80054b8 <UART_SetConfig+0x304>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d004      	beq.n	8005220 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521c:	4313      	orrs	r3, r2
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005230:	430a      	orrs	r2, r1
 8005232:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4aa0      	ldr	r2, [pc, #640]	; (80054bc <UART_SetConfig+0x308>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d126      	bne.n	800528c <UART_SetConfig+0xd8>
 800523e:	4ba0      	ldr	r3, [pc, #640]	; (80054c0 <UART_SetConfig+0x30c>)
 8005240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005244:	f003 0303 	and.w	r3, r3, #3
 8005248:	2b03      	cmp	r3, #3
 800524a:	d81b      	bhi.n	8005284 <UART_SetConfig+0xd0>
 800524c:	a201      	add	r2, pc, #4	; (adr r2, 8005254 <UART_SetConfig+0xa0>)
 800524e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005252:	bf00      	nop
 8005254:	08005265 	.word	0x08005265
 8005258:	08005275 	.word	0x08005275
 800525c:	0800526d 	.word	0x0800526d
 8005260:	0800527d 	.word	0x0800527d
 8005264:	2301      	movs	r3, #1
 8005266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800526a:	e080      	b.n	800536e <UART_SetConfig+0x1ba>
 800526c:	2302      	movs	r3, #2
 800526e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005272:	e07c      	b.n	800536e <UART_SetConfig+0x1ba>
 8005274:	2304      	movs	r3, #4
 8005276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527a:	e078      	b.n	800536e <UART_SetConfig+0x1ba>
 800527c:	2308      	movs	r3, #8
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005282:	e074      	b.n	800536e <UART_SetConfig+0x1ba>
 8005284:	2310      	movs	r3, #16
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528a:	e070      	b.n	800536e <UART_SetConfig+0x1ba>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a8c      	ldr	r2, [pc, #560]	; (80054c4 <UART_SetConfig+0x310>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d138      	bne.n	8005308 <UART_SetConfig+0x154>
 8005296:	4b8a      	ldr	r3, [pc, #552]	; (80054c0 <UART_SetConfig+0x30c>)
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529c:	f003 030c 	and.w	r3, r3, #12
 80052a0:	2b0c      	cmp	r3, #12
 80052a2:	d82d      	bhi.n	8005300 <UART_SetConfig+0x14c>
 80052a4:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <UART_SetConfig+0xf8>)
 80052a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052aa:	bf00      	nop
 80052ac:	080052e1 	.word	0x080052e1
 80052b0:	08005301 	.word	0x08005301
 80052b4:	08005301 	.word	0x08005301
 80052b8:	08005301 	.word	0x08005301
 80052bc:	080052f1 	.word	0x080052f1
 80052c0:	08005301 	.word	0x08005301
 80052c4:	08005301 	.word	0x08005301
 80052c8:	08005301 	.word	0x08005301
 80052cc:	080052e9 	.word	0x080052e9
 80052d0:	08005301 	.word	0x08005301
 80052d4:	08005301 	.word	0x08005301
 80052d8:	08005301 	.word	0x08005301
 80052dc:	080052f9 	.word	0x080052f9
 80052e0:	2300      	movs	r3, #0
 80052e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e6:	e042      	b.n	800536e <UART_SetConfig+0x1ba>
 80052e8:	2302      	movs	r3, #2
 80052ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ee:	e03e      	b.n	800536e <UART_SetConfig+0x1ba>
 80052f0:	2304      	movs	r3, #4
 80052f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052f6:	e03a      	b.n	800536e <UART_SetConfig+0x1ba>
 80052f8:	2308      	movs	r3, #8
 80052fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052fe:	e036      	b.n	800536e <UART_SetConfig+0x1ba>
 8005300:	2310      	movs	r3, #16
 8005302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005306:	e032      	b.n	800536e <UART_SetConfig+0x1ba>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a6a      	ldr	r2, [pc, #424]	; (80054b8 <UART_SetConfig+0x304>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d12a      	bne.n	8005368 <UART_SetConfig+0x1b4>
 8005312:	4b6b      	ldr	r3, [pc, #428]	; (80054c0 <UART_SetConfig+0x30c>)
 8005314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005318:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800531c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005320:	d01a      	beq.n	8005358 <UART_SetConfig+0x1a4>
 8005322:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005326:	d81b      	bhi.n	8005360 <UART_SetConfig+0x1ac>
 8005328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800532c:	d00c      	beq.n	8005348 <UART_SetConfig+0x194>
 800532e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005332:	d815      	bhi.n	8005360 <UART_SetConfig+0x1ac>
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <UART_SetConfig+0x18c>
 8005338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533c:	d008      	beq.n	8005350 <UART_SetConfig+0x19c>
 800533e:	e00f      	b.n	8005360 <UART_SetConfig+0x1ac>
 8005340:	2300      	movs	r3, #0
 8005342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005346:	e012      	b.n	800536e <UART_SetConfig+0x1ba>
 8005348:	2302      	movs	r3, #2
 800534a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800534e:	e00e      	b.n	800536e <UART_SetConfig+0x1ba>
 8005350:	2304      	movs	r3, #4
 8005352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005356:	e00a      	b.n	800536e <UART_SetConfig+0x1ba>
 8005358:	2308      	movs	r3, #8
 800535a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800535e:	e006      	b.n	800536e <UART_SetConfig+0x1ba>
 8005360:	2310      	movs	r3, #16
 8005362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005366:	e002      	b.n	800536e <UART_SetConfig+0x1ba>
 8005368:	2310      	movs	r3, #16
 800536a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a51      	ldr	r2, [pc, #324]	; (80054b8 <UART_SetConfig+0x304>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d17a      	bne.n	800546e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005378:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800537c:	2b08      	cmp	r3, #8
 800537e:	d824      	bhi.n	80053ca <UART_SetConfig+0x216>
 8005380:	a201      	add	r2, pc, #4	; (adr r2, 8005388 <UART_SetConfig+0x1d4>)
 8005382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005386:	bf00      	nop
 8005388:	080053ad 	.word	0x080053ad
 800538c:	080053cb 	.word	0x080053cb
 8005390:	080053b5 	.word	0x080053b5
 8005394:	080053cb 	.word	0x080053cb
 8005398:	080053bb 	.word	0x080053bb
 800539c:	080053cb 	.word	0x080053cb
 80053a0:	080053cb 	.word	0x080053cb
 80053a4:	080053cb 	.word	0x080053cb
 80053a8:	080053c3 	.word	0x080053c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053ac:	f7fe fbc4 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 80053b0:	61f8      	str	r0, [r7, #28]
        break;
 80053b2:	e010      	b.n	80053d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053b4:	4b44      	ldr	r3, [pc, #272]	; (80054c8 <UART_SetConfig+0x314>)
 80053b6:	61fb      	str	r3, [r7, #28]
        break;
 80053b8:	e00d      	b.n	80053d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ba:	f7fe fb25 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 80053be:	61f8      	str	r0, [r7, #28]
        break;
 80053c0:	e009      	b.n	80053d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053c6:	61fb      	str	r3, [r7, #28]
        break;
 80053c8:	e005      	b.n	80053d6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 8107 	beq.w	80055ec <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	4613      	mov	r3, r2
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	4413      	add	r3, r2
 80053e8:	69fa      	ldr	r2, [r7, #28]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d305      	bcc.n	80053fa <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d903      	bls.n	8005402 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005400:	e0f4      	b.n	80055ec <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	2200      	movs	r2, #0
 8005406:	461c      	mov	r4, r3
 8005408:	4615      	mov	r5, r2
 800540a:	f04f 0200 	mov.w	r2, #0
 800540e:	f04f 0300 	mov.w	r3, #0
 8005412:	022b      	lsls	r3, r5, #8
 8005414:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005418:	0222      	lsls	r2, r4, #8
 800541a:	68f9      	ldr	r1, [r7, #12]
 800541c:	6849      	ldr	r1, [r1, #4]
 800541e:	0849      	lsrs	r1, r1, #1
 8005420:	2000      	movs	r0, #0
 8005422:	4688      	mov	r8, r1
 8005424:	4681      	mov	r9, r0
 8005426:	eb12 0a08 	adds.w	sl, r2, r8
 800542a:	eb43 0b09 	adc.w	fp, r3, r9
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	603b      	str	r3, [r7, #0]
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800543c:	4650      	mov	r0, sl
 800543e:	4659      	mov	r1, fp
 8005440:	f7fa ff1e 	bl	8000280 <__aeabi_uldivmod>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4613      	mov	r3, r2
 800544a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005452:	d308      	bcc.n	8005466 <UART_SetConfig+0x2b2>
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800545a:	d204      	bcs.n	8005466 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	60da      	str	r2, [r3, #12]
 8005464:	e0c2      	b.n	80055ec <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800546c:	e0be      	b.n	80055ec <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005476:	d16a      	bne.n	800554e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005478:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800547c:	2b08      	cmp	r3, #8
 800547e:	d834      	bhi.n	80054ea <UART_SetConfig+0x336>
 8005480:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <UART_SetConfig+0x2d4>)
 8005482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005486:	bf00      	nop
 8005488:	080054ad 	.word	0x080054ad
 800548c:	080054cd 	.word	0x080054cd
 8005490:	080054d5 	.word	0x080054d5
 8005494:	080054eb 	.word	0x080054eb
 8005498:	080054db 	.word	0x080054db
 800549c:	080054eb 	.word	0x080054eb
 80054a0:	080054eb 	.word	0x080054eb
 80054a4:	080054eb 	.word	0x080054eb
 80054a8:	080054e3 	.word	0x080054e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054ac:	f7fe fb44 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 80054b0:	61f8      	str	r0, [r7, #28]
        break;
 80054b2:	e020      	b.n	80054f6 <UART_SetConfig+0x342>
 80054b4:	efff69f3 	.word	0xefff69f3
 80054b8:	40008000 	.word	0x40008000
 80054bc:	40013800 	.word	0x40013800
 80054c0:	40021000 	.word	0x40021000
 80054c4:	40004400 	.word	0x40004400
 80054c8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054cc:	f7fe fb4a 	bl	8003b64 <HAL_RCC_GetPCLK2Freq>
 80054d0:	61f8      	str	r0, [r7, #28]
        break;
 80054d2:	e010      	b.n	80054f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054d4:	4b4c      	ldr	r3, [pc, #304]	; (8005608 <UART_SetConfig+0x454>)
 80054d6:	61fb      	str	r3, [r7, #28]
        break;
 80054d8:	e00d      	b.n	80054f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054da:	f7fe fa95 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 80054de:	61f8      	str	r0, [r7, #28]
        break;
 80054e0:	e009      	b.n	80054f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e6:	61fb      	str	r3, [r7, #28]
        break;
 80054e8:	e005      	b.n	80054f6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80054f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d077      	beq.n	80055ec <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	005a      	lsls	r2, r3, #1
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	085b      	lsrs	r3, r3, #1
 8005506:	441a      	add	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005510:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2b0f      	cmp	r3, #15
 8005516:	d916      	bls.n	8005546 <UART_SetConfig+0x392>
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800551e:	d212      	bcs.n	8005546 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	b29b      	uxth	r3, r3
 8005524:	f023 030f 	bic.w	r3, r3, #15
 8005528:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	085b      	lsrs	r3, r3, #1
 800552e:	b29b      	uxth	r3, r3
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	b29a      	uxth	r2, r3
 8005536:	8afb      	ldrh	r3, [r7, #22]
 8005538:	4313      	orrs	r3, r2
 800553a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	8afa      	ldrh	r2, [r7, #22]
 8005542:	60da      	str	r2, [r3, #12]
 8005544:	e052      	b.n	80055ec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800554c:	e04e      	b.n	80055ec <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800554e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005552:	2b08      	cmp	r3, #8
 8005554:	d827      	bhi.n	80055a6 <UART_SetConfig+0x3f2>
 8005556:	a201      	add	r2, pc, #4	; (adr r2, 800555c <UART_SetConfig+0x3a8>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	08005581 	.word	0x08005581
 8005560:	08005589 	.word	0x08005589
 8005564:	08005591 	.word	0x08005591
 8005568:	080055a7 	.word	0x080055a7
 800556c:	08005597 	.word	0x08005597
 8005570:	080055a7 	.word	0x080055a7
 8005574:	080055a7 	.word	0x080055a7
 8005578:	080055a7 	.word	0x080055a7
 800557c:	0800559f 	.word	0x0800559f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005580:	f7fe fada 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8005584:	61f8      	str	r0, [r7, #28]
        break;
 8005586:	e014      	b.n	80055b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005588:	f7fe faec 	bl	8003b64 <HAL_RCC_GetPCLK2Freq>
 800558c:	61f8      	str	r0, [r7, #28]
        break;
 800558e:	e010      	b.n	80055b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005590:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <UART_SetConfig+0x454>)
 8005592:	61fb      	str	r3, [r7, #28]
        break;
 8005594:	e00d      	b.n	80055b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005596:	f7fe fa37 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 800559a:	61f8      	str	r0, [r7, #28]
        break;
 800559c:	e009      	b.n	80055b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800559e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055a2:	61fb      	str	r3, [r7, #28]
        break;
 80055a4:	e005      	b.n	80055b2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80055b0:	bf00      	nop
    }

    if (pclk != 0U)
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d019      	beq.n	80055ec <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	085a      	lsrs	r2, r3, #1
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	441a      	add	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	2b0f      	cmp	r3, #15
 80055d0:	d909      	bls.n	80055e6 <UART_SetConfig+0x432>
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d8:	d205      	bcs.n	80055e6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	b29a      	uxth	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	60da      	str	r2, [r3, #12]
 80055e4:	e002      	b.n	80055ec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80055f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3728      	adds	r7, #40	; 0x28
 8005600:	46bd      	mov	sp, r7
 8005602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005606:	bf00      	nop
 8005608:	00f42400 	.word	0x00f42400

0800560c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00a      	beq.n	800567a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00a      	beq.n	80056be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01a      	beq.n	8005722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800570a:	d10a      	bne.n	8005722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	605a      	str	r2, [r3, #4]
  }
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af02      	add	r7, sp, #8
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005760:	f7fc fe90 	bl	8002484 <HAL_GetTick>
 8005764:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b08      	cmp	r3, #8
 8005772:	d10e      	bne.n	8005792 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f82d 	bl	80057e2 <UART_WaitOnFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e023      	b.n	80057da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b04      	cmp	r3, #4
 800579e:	d10e      	bne.n	80057be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f817 	bl	80057e2 <UART_WaitOnFlagUntilTimeout>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e00d      	b.n	80057da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2220      	movs	r2, #32
 80057c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2220      	movs	r2, #32
 80057c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b09c      	sub	sp, #112	; 0x70
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	60f8      	str	r0, [r7, #12]
 80057ea:	60b9      	str	r1, [r7, #8]
 80057ec:	603b      	str	r3, [r7, #0]
 80057ee:	4613      	mov	r3, r2
 80057f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057f2:	e0a5      	b.n	8005940 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057fa:	f000 80a1 	beq.w	8005940 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057fe:	f7fc fe41 	bl	8002484 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800580a:	429a      	cmp	r2, r3
 800580c:	d302      	bcc.n	8005814 <UART_WaitOnFlagUntilTimeout+0x32>
 800580e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005810:	2b00      	cmp	r3, #0
 8005812:	d13e      	bne.n	8005892 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005824:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005828:	667b      	str	r3, [r7, #100]	; 0x64
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005832:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005834:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005838:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e6      	bne.n	8005814 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3308      	adds	r3, #8
 800584c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005858:	f023 0301 	bic.w	r3, r3, #1
 800585c:	663b      	str	r3, [r7, #96]	; 0x60
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3308      	adds	r3, #8
 8005864:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005866:	64ba      	str	r2, [r7, #72]	; 0x48
 8005868:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800586c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e5      	bne.n	8005846 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2220      	movs	r2, #32
 800587e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2220      	movs	r2, #32
 8005884:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e067      	b.n	8005962 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d04f      	beq.n	8005940 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ae:	d147      	bne.n	8005940 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058b8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d8:	637b      	str	r3, [r7, #52]	; 0x34
 80058da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058e0:	e841 2300 	strex	r3, r2, [r1]
 80058e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e6      	bne.n	80058ba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3308      	adds	r3, #8
 80058f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	e853 3f00 	ldrex	r3, [r3]
 80058fa:	613b      	str	r3, [r7, #16]
   return(result);
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f023 0301 	bic.w	r3, r3, #1
 8005902:	66bb      	str	r3, [r7, #104]	; 0x68
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3308      	adds	r3, #8
 800590a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800590c:	623a      	str	r2, [r7, #32]
 800590e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	69f9      	ldr	r1, [r7, #28]
 8005912:	6a3a      	ldr	r2, [r7, #32]
 8005914:	e841 2300 	strex	r3, r2, [r1]
 8005918:	61bb      	str	r3, [r7, #24]
   return(result);
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e5      	bne.n	80058ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2220      	movs	r2, #32
 800592a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2220      	movs	r2, #32
 8005930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e010      	b.n	8005962 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	69da      	ldr	r2, [r3, #28]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	4013      	ands	r3, r2
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	429a      	cmp	r2, r3
 800594e:	bf0c      	ite	eq
 8005950:	2301      	moveq	r3, #1
 8005952:	2300      	movne	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	461a      	mov	r2, r3
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	429a      	cmp	r2, r3
 800595c:	f43f af4a 	beq.w	80057f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3770      	adds	r7, #112	; 0x70
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b096      	sub	sp, #88	; 0x58
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	4613      	mov	r3, r2
 8005978:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	88fa      	ldrh	r2, [r7, #6]
 8005984:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2222      	movs	r2, #34	; 0x22
 8005994:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599a:	2b00      	cmp	r3, #0
 800599c:	d02b      	beq.n	80059f6 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a2:	4a42      	ldr	r2, [pc, #264]	; (8005aac <UART_Start_Receive_DMA+0x140>)
 80059a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059aa:	4a41      	ldr	r2, [pc, #260]	; (8005ab0 <UART_Start_Receive_DMA+0x144>)
 80059ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b2:	4a40      	ldr	r2, [pc, #256]	; (8005ab4 <UART_Start_Receive_DMA+0x148>)
 80059b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ba:	2200      	movs	r2, #0
 80059bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3324      	adds	r3, #36	; 0x24
 80059c8:	4619      	mov	r1, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ce:	461a      	mov	r2, r3
 80059d0:	88fb      	ldrh	r3, [r7, #6]
 80059d2:	f7fc ff51 	bl	8002878 <HAL_DMA_Start_IT>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00c      	beq.n	80059f6 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2210      	movs	r2, #16
 80059e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2220      	movs	r2, #32
 80059f0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e055      	b.n	8005aa2 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d018      	beq.n	8005a38 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0e:	e853 3f00 	ldrex	r3, [r3]
 8005a12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a1a:	657b      	str	r3, [r7, #84]	; 0x54
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	461a      	mov	r2, r3
 8005a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a24:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a26:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a28:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a2c:	e841 2300 	strex	r3, r2, [r1]
 8005a30:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1e6      	bne.n	8005a06 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3308      	adds	r3, #8
 8005a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	f043 0301 	orr.w	r3, r3, #1
 8005a4e:	653b      	str	r3, [r7, #80]	; 0x50
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3308      	adds	r3, #8
 8005a56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a58:	637a      	str	r2, [r7, #52]	; 0x34
 8005a5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a60:	e841 2300 	strex	r3, r2, [r1]
 8005a64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e5      	bne.n	8005a38 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3308      	adds	r3, #8
 8005a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	e853 3f00 	ldrex	r3, [r3]
 8005a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3308      	adds	r3, #8
 8005a8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a8c:	623a      	str	r2, [r7, #32]
 8005a8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a90:	69f9      	ldr	r1, [r7, #28]
 8005a92:	6a3a      	ldr	r2, [r7, #32]
 8005a94:	e841 2300 	strex	r3, r2, [r1]
 8005a98:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e5      	bne.n	8005a6c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3758      	adds	r7, #88	; 0x58
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	08005bcb 	.word	0x08005bcb
 8005ab0:	08005cef 	.word	0x08005cef
 8005ab4:	08005d27 	.word	0x08005d27

08005ab8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b089      	sub	sp, #36	; 0x24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ad4:	61fb      	str	r3, [r7, #28]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	61bb      	str	r3, [r7, #24]
 8005ae0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	6979      	ldr	r1, [r7, #20]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	613b      	str	r3, [r7, #16]
   return(result);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1e6      	bne.n	8005ac0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005af8:	bf00      	nop
 8005afa:	3724      	adds	r7, #36	; 0x24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b095      	sub	sp, #84	; 0x54
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b14:	e853 3f00 	ldrex	r3, [r3]
 8005b18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b2a:	643b      	str	r3, [r7, #64]	; 0x40
 8005b2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b32:	e841 2300 	strex	r3, r2, [r1]
 8005b36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1e6      	bne.n	8005b0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3308      	adds	r3, #8
 8005b44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	f023 0301 	bic.w	r3, r3, #1
 8005b54:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3308      	adds	r3, #8
 8005b5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e5      	bne.n	8005b3e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d118      	bne.n	8005bac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	e853 3f00 	ldrex	r3, [r3]
 8005b86:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f023 0310 	bic.w	r3, r3, #16
 8005b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	461a      	mov	r2, r3
 8005b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b98:	61bb      	str	r3, [r7, #24]
 8005b9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	6979      	ldr	r1, [r7, #20]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	e841 2300 	strex	r3, r2, [r1]
 8005ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e6      	bne.n	8005b7a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005bbe:	bf00      	nop
 8005bc0:	3754      	adds	r7, #84	; 0x54
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b09c      	sub	sp, #112	; 0x70
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d170      	bne.n	8005cc8 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8005be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be8:	2200      	movs	r2, #0
 8005bea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf6:	e853 3f00 	ldrex	r3, [r3]
 8005bfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c02:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c0e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c14:	e841 2300 	strex	r3, r2, [r1]
 8005c18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1e6      	bne.n	8005bee <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3308      	adds	r3, #8
 8005c26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	e853 3f00 	ldrex	r3, [r3]
 8005c2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c32:	f023 0301 	bic.w	r3, r3, #1
 8005c36:	667b      	str	r3, [r7, #100]	; 0x64
 8005c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c40:	647a      	str	r2, [r7, #68]	; 0x44
 8005c42:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c48:	e841 2300 	strex	r3, r2, [r1]
 8005c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1e5      	bne.n	8005c20 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	3308      	adds	r3, #8
 8005c5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	623b      	str	r3, [r7, #32]
   return(result);
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c6a:	663b      	str	r3, [r7, #96]	; 0x60
 8005c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	3308      	adds	r3, #8
 8005c72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c74:	633a      	str	r2, [r7, #48]	; 0x30
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c7c:	e841 2300 	strex	r3, r2, [r1]
 8005c80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e5      	bne.n	8005c54 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d118      	bne.n	8005cc8 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	e853 3f00 	ldrex	r3, [r3]
 8005ca2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0310 	bic.w	r3, r3, #16
 8005caa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb4:	61fb      	str	r3, [r7, #28]
 8005cb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb8:	69b9      	ldr	r1, [r7, #24]
 8005cba:	69fa      	ldr	r2, [r7, #28]
 8005cbc:	e841 2300 	strex	r3, r2, [r1]
 8005cc0:	617b      	str	r3, [r7, #20]
   return(result);
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1e6      	bne.n	8005c96 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d107      	bne.n	8005ce0 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005cda:	f7ff fa5f 	bl	800519c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cde:	e002      	b.n	8005ce6 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8005ce0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ce2:	f7fc f957 	bl	8001f94 <HAL_UART_RxCpltCallback>
}
 8005ce6:	bf00      	nop
 8005ce8:	3770      	adds	r7, #112	; 0x70
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d109      	bne.n	8005d18 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d0a:	085b      	lsrs	r3, r3, #1
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	4619      	mov	r1, r3
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f7ff fa43 	bl	800519c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d16:	e002      	b.n	8005d1e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f7ff fa2b 	bl	8005174 <HAL_UART_RxHalfCpltCallback>
}
 8005d1e:	bf00      	nop
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b086      	sub	sp, #24
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d32:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d38:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4a:	2b80      	cmp	r3, #128	; 0x80
 8005d4c:	d109      	bne.n	8005d62 <UART_DMAError+0x3c>
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	2b21      	cmp	r3, #33	; 0x21
 8005d52:	d106      	bne.n	8005d62 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005d5c:	6978      	ldr	r0, [r7, #20]
 8005d5e:	f7ff feab 	bl	8005ab8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6c:	2b40      	cmp	r3, #64	; 0x40
 8005d6e:	d109      	bne.n	8005d84 <UART_DMAError+0x5e>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2b22      	cmp	r3, #34	; 0x22
 8005d74:	d106      	bne.n	8005d84 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005d7e:	6978      	ldr	r0, [r7, #20]
 8005d80:	f7ff fec0 	bl	8005b04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d8a:	f043 0210 	orr.w	r2, r3, #16
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d94:	6978      	ldr	r0, [r7, #20]
 8005d96:	f7ff f9f7 	bl	8005188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d9a:	bf00      	nop
 8005d9c:	3718      	adds	r7, #24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f7ff f9e1 	bl	8005188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dc6:	bf00      	nop
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b088      	sub	sp, #32
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	e853 3f00 	ldrex	r3, [r3]
 8005de2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dea:	61fb      	str	r3, [r7, #28]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	461a      	mov	r2, r3
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	61bb      	str	r3, [r7, #24]
 8005df6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df8:	6979      	ldr	r1, [r7, #20]
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	e841 2300 	strex	r3, r2, [r1]
 8005e00:	613b      	str	r3, [r7, #16]
   return(result);
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1e6      	bne.n	8005dd6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7ff f9a3 	bl	8005160 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e1a:	bf00      	nop
 8005e1c:	3720      	adds	r7, #32
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
	...

08005e38 <__errno>:
 8005e38:	4b01      	ldr	r3, [pc, #4]	; (8005e40 <__errno+0x8>)
 8005e3a:	6818      	ldr	r0, [r3, #0]
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	2000e654 	.word	0x2000e654

08005e44 <__libc_init_array>:
 8005e44:	b570      	push	{r4, r5, r6, lr}
 8005e46:	4d0d      	ldr	r5, [pc, #52]	; (8005e7c <__libc_init_array+0x38>)
 8005e48:	4c0d      	ldr	r4, [pc, #52]	; (8005e80 <__libc_init_array+0x3c>)
 8005e4a:	1b64      	subs	r4, r4, r5
 8005e4c:	10a4      	asrs	r4, r4, #2
 8005e4e:	2600      	movs	r6, #0
 8005e50:	42a6      	cmp	r6, r4
 8005e52:	d109      	bne.n	8005e68 <__libc_init_array+0x24>
 8005e54:	4d0b      	ldr	r5, [pc, #44]	; (8005e84 <__libc_init_array+0x40>)
 8005e56:	4c0c      	ldr	r4, [pc, #48]	; (8005e88 <__libc_init_array+0x44>)
 8005e58:	f000 fca2 	bl	80067a0 <_init>
 8005e5c:	1b64      	subs	r4, r4, r5
 8005e5e:	10a4      	asrs	r4, r4, #2
 8005e60:	2600      	movs	r6, #0
 8005e62:	42a6      	cmp	r6, r4
 8005e64:	d105      	bne.n	8005e72 <__libc_init_array+0x2e>
 8005e66:	bd70      	pop	{r4, r5, r6, pc}
 8005e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6c:	4798      	blx	r3
 8005e6e:	3601      	adds	r6, #1
 8005e70:	e7ee      	b.n	8005e50 <__libc_init_array+0xc>
 8005e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e76:	4798      	blx	r3
 8005e78:	3601      	adds	r6, #1
 8005e7a:	e7f2      	b.n	8005e62 <__libc_init_array+0x1e>
 8005e7c:	0800f53c 	.word	0x0800f53c
 8005e80:	0800f53c 	.word	0x0800f53c
 8005e84:	0800f53c 	.word	0x0800f53c
 8005e88:	0800f540 	.word	0x0800f540

08005e8c <memcpy>:
 8005e8c:	440a      	add	r2, r1
 8005e8e:	4291      	cmp	r1, r2
 8005e90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005e94:	d100      	bne.n	8005e98 <memcpy+0xc>
 8005e96:	4770      	bx	lr
 8005e98:	b510      	push	{r4, lr}
 8005e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ea2:	4291      	cmp	r1, r2
 8005ea4:	d1f9      	bne.n	8005e9a <memcpy+0xe>
 8005ea6:	bd10      	pop	{r4, pc}

08005ea8 <memset>:
 8005ea8:	4402      	add	r2, r0
 8005eaa:	4603      	mov	r3, r0
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d100      	bne.n	8005eb2 <memset+0xa>
 8005eb0:	4770      	bx	lr
 8005eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8005eb6:	e7f9      	b.n	8005eac <memset+0x4>

08005eb8 <sniprintf>:
 8005eb8:	b40c      	push	{r2, r3}
 8005eba:	b530      	push	{r4, r5, lr}
 8005ebc:	4b17      	ldr	r3, [pc, #92]	; (8005f1c <sniprintf+0x64>)
 8005ebe:	1e0c      	subs	r4, r1, #0
 8005ec0:	681d      	ldr	r5, [r3, #0]
 8005ec2:	b09d      	sub	sp, #116	; 0x74
 8005ec4:	da08      	bge.n	8005ed8 <sniprintf+0x20>
 8005ec6:	238b      	movs	r3, #139	; 0x8b
 8005ec8:	602b      	str	r3, [r5, #0]
 8005eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ece:	b01d      	add	sp, #116	; 0x74
 8005ed0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ed4:	b002      	add	sp, #8
 8005ed6:	4770      	bx	lr
 8005ed8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005edc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005ee0:	bf14      	ite	ne
 8005ee2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005ee6:	4623      	moveq	r3, r4
 8005ee8:	9304      	str	r3, [sp, #16]
 8005eea:	9307      	str	r3, [sp, #28]
 8005eec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ef0:	9002      	str	r0, [sp, #8]
 8005ef2:	9006      	str	r0, [sp, #24]
 8005ef4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005ef8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005efa:	ab21      	add	r3, sp, #132	; 0x84
 8005efc:	a902      	add	r1, sp, #8
 8005efe:	4628      	mov	r0, r5
 8005f00:	9301      	str	r3, [sp, #4]
 8005f02:	f000 f869 	bl	8005fd8 <_svfiprintf_r>
 8005f06:	1c43      	adds	r3, r0, #1
 8005f08:	bfbc      	itt	lt
 8005f0a:	238b      	movlt	r3, #139	; 0x8b
 8005f0c:	602b      	strlt	r3, [r5, #0]
 8005f0e:	2c00      	cmp	r4, #0
 8005f10:	d0dd      	beq.n	8005ece <sniprintf+0x16>
 8005f12:	9b02      	ldr	r3, [sp, #8]
 8005f14:	2200      	movs	r2, #0
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	e7d9      	b.n	8005ece <sniprintf+0x16>
 8005f1a:	bf00      	nop
 8005f1c:	2000e654 	.word	0x2000e654

08005f20 <__ssputs_r>:
 8005f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f24:	688e      	ldr	r6, [r1, #8]
 8005f26:	429e      	cmp	r6, r3
 8005f28:	4682      	mov	sl, r0
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	4690      	mov	r8, r2
 8005f2e:	461f      	mov	r7, r3
 8005f30:	d838      	bhi.n	8005fa4 <__ssputs_r+0x84>
 8005f32:	898a      	ldrh	r2, [r1, #12]
 8005f34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f38:	d032      	beq.n	8005fa0 <__ssputs_r+0x80>
 8005f3a:	6825      	ldr	r5, [r4, #0]
 8005f3c:	6909      	ldr	r1, [r1, #16]
 8005f3e:	eba5 0901 	sub.w	r9, r5, r1
 8005f42:	6965      	ldr	r5, [r4, #20]
 8005f44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	444b      	add	r3, r9
 8005f50:	106d      	asrs	r5, r5, #1
 8005f52:	429d      	cmp	r5, r3
 8005f54:	bf38      	it	cc
 8005f56:	461d      	movcc	r5, r3
 8005f58:	0553      	lsls	r3, r2, #21
 8005f5a:	d531      	bpl.n	8005fc0 <__ssputs_r+0xa0>
 8005f5c:	4629      	mov	r1, r5
 8005f5e:	f000 fb55 	bl	800660c <_malloc_r>
 8005f62:	4606      	mov	r6, r0
 8005f64:	b950      	cbnz	r0, 8005f7c <__ssputs_r+0x5c>
 8005f66:	230c      	movs	r3, #12
 8005f68:	f8ca 3000 	str.w	r3, [sl]
 8005f6c:	89a3      	ldrh	r3, [r4, #12]
 8005f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f72:	81a3      	strh	r3, [r4, #12]
 8005f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f7c:	6921      	ldr	r1, [r4, #16]
 8005f7e:	464a      	mov	r2, r9
 8005f80:	f7ff ff84 	bl	8005e8c <memcpy>
 8005f84:	89a3      	ldrh	r3, [r4, #12]
 8005f86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f8e:	81a3      	strh	r3, [r4, #12]
 8005f90:	6126      	str	r6, [r4, #16]
 8005f92:	6165      	str	r5, [r4, #20]
 8005f94:	444e      	add	r6, r9
 8005f96:	eba5 0509 	sub.w	r5, r5, r9
 8005f9a:	6026      	str	r6, [r4, #0]
 8005f9c:	60a5      	str	r5, [r4, #8]
 8005f9e:	463e      	mov	r6, r7
 8005fa0:	42be      	cmp	r6, r7
 8005fa2:	d900      	bls.n	8005fa6 <__ssputs_r+0x86>
 8005fa4:	463e      	mov	r6, r7
 8005fa6:	6820      	ldr	r0, [r4, #0]
 8005fa8:	4632      	mov	r2, r6
 8005faa:	4641      	mov	r1, r8
 8005fac:	f000 faa8 	bl	8006500 <memmove>
 8005fb0:	68a3      	ldr	r3, [r4, #8]
 8005fb2:	1b9b      	subs	r3, r3, r6
 8005fb4:	60a3      	str	r3, [r4, #8]
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	4433      	add	r3, r6
 8005fba:	6023      	str	r3, [r4, #0]
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	e7db      	b.n	8005f78 <__ssputs_r+0x58>
 8005fc0:	462a      	mov	r2, r5
 8005fc2:	f000 fb97 	bl	80066f4 <_realloc_r>
 8005fc6:	4606      	mov	r6, r0
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d1e1      	bne.n	8005f90 <__ssputs_r+0x70>
 8005fcc:	6921      	ldr	r1, [r4, #16]
 8005fce:	4650      	mov	r0, sl
 8005fd0:	f000 fab0 	bl	8006534 <_free_r>
 8005fd4:	e7c7      	b.n	8005f66 <__ssputs_r+0x46>
	...

08005fd8 <_svfiprintf_r>:
 8005fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fdc:	4698      	mov	r8, r3
 8005fde:	898b      	ldrh	r3, [r1, #12]
 8005fe0:	061b      	lsls	r3, r3, #24
 8005fe2:	b09d      	sub	sp, #116	; 0x74
 8005fe4:	4607      	mov	r7, r0
 8005fe6:	460d      	mov	r5, r1
 8005fe8:	4614      	mov	r4, r2
 8005fea:	d50e      	bpl.n	800600a <_svfiprintf_r+0x32>
 8005fec:	690b      	ldr	r3, [r1, #16]
 8005fee:	b963      	cbnz	r3, 800600a <_svfiprintf_r+0x32>
 8005ff0:	2140      	movs	r1, #64	; 0x40
 8005ff2:	f000 fb0b 	bl	800660c <_malloc_r>
 8005ff6:	6028      	str	r0, [r5, #0]
 8005ff8:	6128      	str	r0, [r5, #16]
 8005ffa:	b920      	cbnz	r0, 8006006 <_svfiprintf_r+0x2e>
 8005ffc:	230c      	movs	r3, #12
 8005ffe:	603b      	str	r3, [r7, #0]
 8006000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006004:	e0d1      	b.n	80061aa <_svfiprintf_r+0x1d2>
 8006006:	2340      	movs	r3, #64	; 0x40
 8006008:	616b      	str	r3, [r5, #20]
 800600a:	2300      	movs	r3, #0
 800600c:	9309      	str	r3, [sp, #36]	; 0x24
 800600e:	2320      	movs	r3, #32
 8006010:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006014:	f8cd 800c 	str.w	r8, [sp, #12]
 8006018:	2330      	movs	r3, #48	; 0x30
 800601a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80061c4 <_svfiprintf_r+0x1ec>
 800601e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006022:	f04f 0901 	mov.w	r9, #1
 8006026:	4623      	mov	r3, r4
 8006028:	469a      	mov	sl, r3
 800602a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800602e:	b10a      	cbz	r2, 8006034 <_svfiprintf_r+0x5c>
 8006030:	2a25      	cmp	r2, #37	; 0x25
 8006032:	d1f9      	bne.n	8006028 <_svfiprintf_r+0x50>
 8006034:	ebba 0b04 	subs.w	fp, sl, r4
 8006038:	d00b      	beq.n	8006052 <_svfiprintf_r+0x7a>
 800603a:	465b      	mov	r3, fp
 800603c:	4622      	mov	r2, r4
 800603e:	4629      	mov	r1, r5
 8006040:	4638      	mov	r0, r7
 8006042:	f7ff ff6d 	bl	8005f20 <__ssputs_r>
 8006046:	3001      	adds	r0, #1
 8006048:	f000 80aa 	beq.w	80061a0 <_svfiprintf_r+0x1c8>
 800604c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800604e:	445a      	add	r2, fp
 8006050:	9209      	str	r2, [sp, #36]	; 0x24
 8006052:	f89a 3000 	ldrb.w	r3, [sl]
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 80a2 	beq.w	80061a0 <_svfiprintf_r+0x1c8>
 800605c:	2300      	movs	r3, #0
 800605e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006066:	f10a 0a01 	add.w	sl, sl, #1
 800606a:	9304      	str	r3, [sp, #16]
 800606c:	9307      	str	r3, [sp, #28]
 800606e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006072:	931a      	str	r3, [sp, #104]	; 0x68
 8006074:	4654      	mov	r4, sl
 8006076:	2205      	movs	r2, #5
 8006078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800607c:	4851      	ldr	r0, [pc, #324]	; (80061c4 <_svfiprintf_r+0x1ec>)
 800607e:	f7fa f8af 	bl	80001e0 <memchr>
 8006082:	9a04      	ldr	r2, [sp, #16]
 8006084:	b9d8      	cbnz	r0, 80060be <_svfiprintf_r+0xe6>
 8006086:	06d0      	lsls	r0, r2, #27
 8006088:	bf44      	itt	mi
 800608a:	2320      	movmi	r3, #32
 800608c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006090:	0711      	lsls	r1, r2, #28
 8006092:	bf44      	itt	mi
 8006094:	232b      	movmi	r3, #43	; 0x2b
 8006096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800609a:	f89a 3000 	ldrb.w	r3, [sl]
 800609e:	2b2a      	cmp	r3, #42	; 0x2a
 80060a0:	d015      	beq.n	80060ce <_svfiprintf_r+0xf6>
 80060a2:	9a07      	ldr	r2, [sp, #28]
 80060a4:	4654      	mov	r4, sl
 80060a6:	2000      	movs	r0, #0
 80060a8:	f04f 0c0a 	mov.w	ip, #10
 80060ac:	4621      	mov	r1, r4
 80060ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060b2:	3b30      	subs	r3, #48	; 0x30
 80060b4:	2b09      	cmp	r3, #9
 80060b6:	d94e      	bls.n	8006156 <_svfiprintf_r+0x17e>
 80060b8:	b1b0      	cbz	r0, 80060e8 <_svfiprintf_r+0x110>
 80060ba:	9207      	str	r2, [sp, #28]
 80060bc:	e014      	b.n	80060e8 <_svfiprintf_r+0x110>
 80060be:	eba0 0308 	sub.w	r3, r0, r8
 80060c2:	fa09 f303 	lsl.w	r3, r9, r3
 80060c6:	4313      	orrs	r3, r2
 80060c8:	9304      	str	r3, [sp, #16]
 80060ca:	46a2      	mov	sl, r4
 80060cc:	e7d2      	b.n	8006074 <_svfiprintf_r+0x9c>
 80060ce:	9b03      	ldr	r3, [sp, #12]
 80060d0:	1d19      	adds	r1, r3, #4
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	9103      	str	r1, [sp, #12]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	bfbb      	ittet	lt
 80060da:	425b      	neglt	r3, r3
 80060dc:	f042 0202 	orrlt.w	r2, r2, #2
 80060e0:	9307      	strge	r3, [sp, #28]
 80060e2:	9307      	strlt	r3, [sp, #28]
 80060e4:	bfb8      	it	lt
 80060e6:	9204      	strlt	r2, [sp, #16]
 80060e8:	7823      	ldrb	r3, [r4, #0]
 80060ea:	2b2e      	cmp	r3, #46	; 0x2e
 80060ec:	d10c      	bne.n	8006108 <_svfiprintf_r+0x130>
 80060ee:	7863      	ldrb	r3, [r4, #1]
 80060f0:	2b2a      	cmp	r3, #42	; 0x2a
 80060f2:	d135      	bne.n	8006160 <_svfiprintf_r+0x188>
 80060f4:	9b03      	ldr	r3, [sp, #12]
 80060f6:	1d1a      	adds	r2, r3, #4
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	9203      	str	r2, [sp, #12]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	bfb8      	it	lt
 8006100:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006104:	3402      	adds	r4, #2
 8006106:	9305      	str	r3, [sp, #20]
 8006108:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80061d4 <_svfiprintf_r+0x1fc>
 800610c:	7821      	ldrb	r1, [r4, #0]
 800610e:	2203      	movs	r2, #3
 8006110:	4650      	mov	r0, sl
 8006112:	f7fa f865 	bl	80001e0 <memchr>
 8006116:	b140      	cbz	r0, 800612a <_svfiprintf_r+0x152>
 8006118:	2340      	movs	r3, #64	; 0x40
 800611a:	eba0 000a 	sub.w	r0, r0, sl
 800611e:	fa03 f000 	lsl.w	r0, r3, r0
 8006122:	9b04      	ldr	r3, [sp, #16]
 8006124:	4303      	orrs	r3, r0
 8006126:	3401      	adds	r4, #1
 8006128:	9304      	str	r3, [sp, #16]
 800612a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800612e:	4826      	ldr	r0, [pc, #152]	; (80061c8 <_svfiprintf_r+0x1f0>)
 8006130:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006134:	2206      	movs	r2, #6
 8006136:	f7fa f853 	bl	80001e0 <memchr>
 800613a:	2800      	cmp	r0, #0
 800613c:	d038      	beq.n	80061b0 <_svfiprintf_r+0x1d8>
 800613e:	4b23      	ldr	r3, [pc, #140]	; (80061cc <_svfiprintf_r+0x1f4>)
 8006140:	bb1b      	cbnz	r3, 800618a <_svfiprintf_r+0x1b2>
 8006142:	9b03      	ldr	r3, [sp, #12]
 8006144:	3307      	adds	r3, #7
 8006146:	f023 0307 	bic.w	r3, r3, #7
 800614a:	3308      	adds	r3, #8
 800614c:	9303      	str	r3, [sp, #12]
 800614e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006150:	4433      	add	r3, r6
 8006152:	9309      	str	r3, [sp, #36]	; 0x24
 8006154:	e767      	b.n	8006026 <_svfiprintf_r+0x4e>
 8006156:	fb0c 3202 	mla	r2, ip, r2, r3
 800615a:	460c      	mov	r4, r1
 800615c:	2001      	movs	r0, #1
 800615e:	e7a5      	b.n	80060ac <_svfiprintf_r+0xd4>
 8006160:	2300      	movs	r3, #0
 8006162:	3401      	adds	r4, #1
 8006164:	9305      	str	r3, [sp, #20]
 8006166:	4619      	mov	r1, r3
 8006168:	f04f 0c0a 	mov.w	ip, #10
 800616c:	4620      	mov	r0, r4
 800616e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006172:	3a30      	subs	r2, #48	; 0x30
 8006174:	2a09      	cmp	r2, #9
 8006176:	d903      	bls.n	8006180 <_svfiprintf_r+0x1a8>
 8006178:	2b00      	cmp	r3, #0
 800617a:	d0c5      	beq.n	8006108 <_svfiprintf_r+0x130>
 800617c:	9105      	str	r1, [sp, #20]
 800617e:	e7c3      	b.n	8006108 <_svfiprintf_r+0x130>
 8006180:	fb0c 2101 	mla	r1, ip, r1, r2
 8006184:	4604      	mov	r4, r0
 8006186:	2301      	movs	r3, #1
 8006188:	e7f0      	b.n	800616c <_svfiprintf_r+0x194>
 800618a:	ab03      	add	r3, sp, #12
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	462a      	mov	r2, r5
 8006190:	4b0f      	ldr	r3, [pc, #60]	; (80061d0 <_svfiprintf_r+0x1f8>)
 8006192:	a904      	add	r1, sp, #16
 8006194:	4638      	mov	r0, r7
 8006196:	f3af 8000 	nop.w
 800619a:	1c42      	adds	r2, r0, #1
 800619c:	4606      	mov	r6, r0
 800619e:	d1d6      	bne.n	800614e <_svfiprintf_r+0x176>
 80061a0:	89ab      	ldrh	r3, [r5, #12]
 80061a2:	065b      	lsls	r3, r3, #25
 80061a4:	f53f af2c 	bmi.w	8006000 <_svfiprintf_r+0x28>
 80061a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061aa:	b01d      	add	sp, #116	; 0x74
 80061ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b0:	ab03      	add	r3, sp, #12
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	462a      	mov	r2, r5
 80061b6:	4b06      	ldr	r3, [pc, #24]	; (80061d0 <_svfiprintf_r+0x1f8>)
 80061b8:	a904      	add	r1, sp, #16
 80061ba:	4638      	mov	r0, r7
 80061bc:	f000 f87a 	bl	80062b4 <_printf_i>
 80061c0:	e7eb      	b.n	800619a <_svfiprintf_r+0x1c2>
 80061c2:	bf00      	nop
 80061c4:	0800f500 	.word	0x0800f500
 80061c8:	0800f50a 	.word	0x0800f50a
 80061cc:	00000000 	.word	0x00000000
 80061d0:	08005f21 	.word	0x08005f21
 80061d4:	0800f506 	.word	0x0800f506

080061d8 <_printf_common>:
 80061d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061dc:	4616      	mov	r6, r2
 80061de:	4699      	mov	r9, r3
 80061e0:	688a      	ldr	r2, [r1, #8]
 80061e2:	690b      	ldr	r3, [r1, #16]
 80061e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061e8:	4293      	cmp	r3, r2
 80061ea:	bfb8      	it	lt
 80061ec:	4613      	movlt	r3, r2
 80061ee:	6033      	str	r3, [r6, #0]
 80061f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061f4:	4607      	mov	r7, r0
 80061f6:	460c      	mov	r4, r1
 80061f8:	b10a      	cbz	r2, 80061fe <_printf_common+0x26>
 80061fa:	3301      	adds	r3, #1
 80061fc:	6033      	str	r3, [r6, #0]
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	0699      	lsls	r1, r3, #26
 8006202:	bf42      	ittt	mi
 8006204:	6833      	ldrmi	r3, [r6, #0]
 8006206:	3302      	addmi	r3, #2
 8006208:	6033      	strmi	r3, [r6, #0]
 800620a:	6825      	ldr	r5, [r4, #0]
 800620c:	f015 0506 	ands.w	r5, r5, #6
 8006210:	d106      	bne.n	8006220 <_printf_common+0x48>
 8006212:	f104 0a19 	add.w	sl, r4, #25
 8006216:	68e3      	ldr	r3, [r4, #12]
 8006218:	6832      	ldr	r2, [r6, #0]
 800621a:	1a9b      	subs	r3, r3, r2
 800621c:	42ab      	cmp	r3, r5
 800621e:	dc26      	bgt.n	800626e <_printf_common+0x96>
 8006220:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006224:	1e13      	subs	r3, r2, #0
 8006226:	6822      	ldr	r2, [r4, #0]
 8006228:	bf18      	it	ne
 800622a:	2301      	movne	r3, #1
 800622c:	0692      	lsls	r2, r2, #26
 800622e:	d42b      	bmi.n	8006288 <_printf_common+0xb0>
 8006230:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006234:	4649      	mov	r1, r9
 8006236:	4638      	mov	r0, r7
 8006238:	47c0      	blx	r8
 800623a:	3001      	adds	r0, #1
 800623c:	d01e      	beq.n	800627c <_printf_common+0xa4>
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	68e5      	ldr	r5, [r4, #12]
 8006242:	6832      	ldr	r2, [r6, #0]
 8006244:	f003 0306 	and.w	r3, r3, #6
 8006248:	2b04      	cmp	r3, #4
 800624a:	bf08      	it	eq
 800624c:	1aad      	subeq	r5, r5, r2
 800624e:	68a3      	ldr	r3, [r4, #8]
 8006250:	6922      	ldr	r2, [r4, #16]
 8006252:	bf0c      	ite	eq
 8006254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006258:	2500      	movne	r5, #0
 800625a:	4293      	cmp	r3, r2
 800625c:	bfc4      	itt	gt
 800625e:	1a9b      	subgt	r3, r3, r2
 8006260:	18ed      	addgt	r5, r5, r3
 8006262:	2600      	movs	r6, #0
 8006264:	341a      	adds	r4, #26
 8006266:	42b5      	cmp	r5, r6
 8006268:	d11a      	bne.n	80062a0 <_printf_common+0xc8>
 800626a:	2000      	movs	r0, #0
 800626c:	e008      	b.n	8006280 <_printf_common+0xa8>
 800626e:	2301      	movs	r3, #1
 8006270:	4652      	mov	r2, sl
 8006272:	4649      	mov	r1, r9
 8006274:	4638      	mov	r0, r7
 8006276:	47c0      	blx	r8
 8006278:	3001      	adds	r0, #1
 800627a:	d103      	bne.n	8006284 <_printf_common+0xac>
 800627c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006284:	3501      	adds	r5, #1
 8006286:	e7c6      	b.n	8006216 <_printf_common+0x3e>
 8006288:	18e1      	adds	r1, r4, r3
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	2030      	movs	r0, #48	; 0x30
 800628e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006292:	4422      	add	r2, r4
 8006294:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006298:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800629c:	3302      	adds	r3, #2
 800629e:	e7c7      	b.n	8006230 <_printf_common+0x58>
 80062a0:	2301      	movs	r3, #1
 80062a2:	4622      	mov	r2, r4
 80062a4:	4649      	mov	r1, r9
 80062a6:	4638      	mov	r0, r7
 80062a8:	47c0      	blx	r8
 80062aa:	3001      	adds	r0, #1
 80062ac:	d0e6      	beq.n	800627c <_printf_common+0xa4>
 80062ae:	3601      	adds	r6, #1
 80062b0:	e7d9      	b.n	8006266 <_printf_common+0x8e>
	...

080062b4 <_printf_i>:
 80062b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062b8:	7e0f      	ldrb	r7, [r1, #24]
 80062ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062bc:	2f78      	cmp	r7, #120	; 0x78
 80062be:	4691      	mov	r9, r2
 80062c0:	4680      	mov	r8, r0
 80062c2:	460c      	mov	r4, r1
 80062c4:	469a      	mov	sl, r3
 80062c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062ca:	d807      	bhi.n	80062dc <_printf_i+0x28>
 80062cc:	2f62      	cmp	r7, #98	; 0x62
 80062ce:	d80a      	bhi.n	80062e6 <_printf_i+0x32>
 80062d0:	2f00      	cmp	r7, #0
 80062d2:	f000 80d8 	beq.w	8006486 <_printf_i+0x1d2>
 80062d6:	2f58      	cmp	r7, #88	; 0x58
 80062d8:	f000 80a3 	beq.w	8006422 <_printf_i+0x16e>
 80062dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062e4:	e03a      	b.n	800635c <_printf_i+0xa8>
 80062e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062ea:	2b15      	cmp	r3, #21
 80062ec:	d8f6      	bhi.n	80062dc <_printf_i+0x28>
 80062ee:	a101      	add	r1, pc, #4	; (adr r1, 80062f4 <_printf_i+0x40>)
 80062f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062f4:	0800634d 	.word	0x0800634d
 80062f8:	08006361 	.word	0x08006361
 80062fc:	080062dd 	.word	0x080062dd
 8006300:	080062dd 	.word	0x080062dd
 8006304:	080062dd 	.word	0x080062dd
 8006308:	080062dd 	.word	0x080062dd
 800630c:	08006361 	.word	0x08006361
 8006310:	080062dd 	.word	0x080062dd
 8006314:	080062dd 	.word	0x080062dd
 8006318:	080062dd 	.word	0x080062dd
 800631c:	080062dd 	.word	0x080062dd
 8006320:	0800646d 	.word	0x0800646d
 8006324:	08006391 	.word	0x08006391
 8006328:	0800644f 	.word	0x0800644f
 800632c:	080062dd 	.word	0x080062dd
 8006330:	080062dd 	.word	0x080062dd
 8006334:	0800648f 	.word	0x0800648f
 8006338:	080062dd 	.word	0x080062dd
 800633c:	08006391 	.word	0x08006391
 8006340:	080062dd 	.word	0x080062dd
 8006344:	080062dd 	.word	0x080062dd
 8006348:	08006457 	.word	0x08006457
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	1d1a      	adds	r2, r3, #4
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	602a      	str	r2, [r5, #0]
 8006354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006358:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800635c:	2301      	movs	r3, #1
 800635e:	e0a3      	b.n	80064a8 <_printf_i+0x1f4>
 8006360:	6820      	ldr	r0, [r4, #0]
 8006362:	6829      	ldr	r1, [r5, #0]
 8006364:	0606      	lsls	r6, r0, #24
 8006366:	f101 0304 	add.w	r3, r1, #4
 800636a:	d50a      	bpl.n	8006382 <_printf_i+0xce>
 800636c:	680e      	ldr	r6, [r1, #0]
 800636e:	602b      	str	r3, [r5, #0]
 8006370:	2e00      	cmp	r6, #0
 8006372:	da03      	bge.n	800637c <_printf_i+0xc8>
 8006374:	232d      	movs	r3, #45	; 0x2d
 8006376:	4276      	negs	r6, r6
 8006378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800637c:	485e      	ldr	r0, [pc, #376]	; (80064f8 <_printf_i+0x244>)
 800637e:	230a      	movs	r3, #10
 8006380:	e019      	b.n	80063b6 <_printf_i+0x102>
 8006382:	680e      	ldr	r6, [r1, #0]
 8006384:	602b      	str	r3, [r5, #0]
 8006386:	f010 0f40 	tst.w	r0, #64	; 0x40
 800638a:	bf18      	it	ne
 800638c:	b236      	sxthne	r6, r6
 800638e:	e7ef      	b.n	8006370 <_printf_i+0xbc>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	6820      	ldr	r0, [r4, #0]
 8006394:	1d19      	adds	r1, r3, #4
 8006396:	6029      	str	r1, [r5, #0]
 8006398:	0601      	lsls	r1, r0, #24
 800639a:	d501      	bpl.n	80063a0 <_printf_i+0xec>
 800639c:	681e      	ldr	r6, [r3, #0]
 800639e:	e002      	b.n	80063a6 <_printf_i+0xf2>
 80063a0:	0646      	lsls	r6, r0, #25
 80063a2:	d5fb      	bpl.n	800639c <_printf_i+0xe8>
 80063a4:	881e      	ldrh	r6, [r3, #0]
 80063a6:	4854      	ldr	r0, [pc, #336]	; (80064f8 <_printf_i+0x244>)
 80063a8:	2f6f      	cmp	r7, #111	; 0x6f
 80063aa:	bf0c      	ite	eq
 80063ac:	2308      	moveq	r3, #8
 80063ae:	230a      	movne	r3, #10
 80063b0:	2100      	movs	r1, #0
 80063b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063b6:	6865      	ldr	r5, [r4, #4]
 80063b8:	60a5      	str	r5, [r4, #8]
 80063ba:	2d00      	cmp	r5, #0
 80063bc:	bfa2      	ittt	ge
 80063be:	6821      	ldrge	r1, [r4, #0]
 80063c0:	f021 0104 	bicge.w	r1, r1, #4
 80063c4:	6021      	strge	r1, [r4, #0]
 80063c6:	b90e      	cbnz	r6, 80063cc <_printf_i+0x118>
 80063c8:	2d00      	cmp	r5, #0
 80063ca:	d04d      	beq.n	8006468 <_printf_i+0x1b4>
 80063cc:	4615      	mov	r5, r2
 80063ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80063d2:	fb03 6711 	mls	r7, r3, r1, r6
 80063d6:	5dc7      	ldrb	r7, [r0, r7]
 80063d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063dc:	4637      	mov	r7, r6
 80063de:	42bb      	cmp	r3, r7
 80063e0:	460e      	mov	r6, r1
 80063e2:	d9f4      	bls.n	80063ce <_printf_i+0x11a>
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d10b      	bne.n	8006400 <_printf_i+0x14c>
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	07de      	lsls	r6, r3, #31
 80063ec:	d508      	bpl.n	8006400 <_printf_i+0x14c>
 80063ee:	6923      	ldr	r3, [r4, #16]
 80063f0:	6861      	ldr	r1, [r4, #4]
 80063f2:	4299      	cmp	r1, r3
 80063f4:	bfde      	ittt	le
 80063f6:	2330      	movle	r3, #48	; 0x30
 80063f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006400:	1b52      	subs	r2, r2, r5
 8006402:	6122      	str	r2, [r4, #16]
 8006404:	f8cd a000 	str.w	sl, [sp]
 8006408:	464b      	mov	r3, r9
 800640a:	aa03      	add	r2, sp, #12
 800640c:	4621      	mov	r1, r4
 800640e:	4640      	mov	r0, r8
 8006410:	f7ff fee2 	bl	80061d8 <_printf_common>
 8006414:	3001      	adds	r0, #1
 8006416:	d14c      	bne.n	80064b2 <_printf_i+0x1fe>
 8006418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800641c:	b004      	add	sp, #16
 800641e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006422:	4835      	ldr	r0, [pc, #212]	; (80064f8 <_printf_i+0x244>)
 8006424:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006428:	6829      	ldr	r1, [r5, #0]
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006430:	6029      	str	r1, [r5, #0]
 8006432:	061d      	lsls	r5, r3, #24
 8006434:	d514      	bpl.n	8006460 <_printf_i+0x1ac>
 8006436:	07df      	lsls	r7, r3, #31
 8006438:	bf44      	itt	mi
 800643a:	f043 0320 	orrmi.w	r3, r3, #32
 800643e:	6023      	strmi	r3, [r4, #0]
 8006440:	b91e      	cbnz	r6, 800644a <_printf_i+0x196>
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	f023 0320 	bic.w	r3, r3, #32
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	2310      	movs	r3, #16
 800644c:	e7b0      	b.n	80063b0 <_printf_i+0xfc>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	f043 0320 	orr.w	r3, r3, #32
 8006454:	6023      	str	r3, [r4, #0]
 8006456:	2378      	movs	r3, #120	; 0x78
 8006458:	4828      	ldr	r0, [pc, #160]	; (80064fc <_printf_i+0x248>)
 800645a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800645e:	e7e3      	b.n	8006428 <_printf_i+0x174>
 8006460:	0659      	lsls	r1, r3, #25
 8006462:	bf48      	it	mi
 8006464:	b2b6      	uxthmi	r6, r6
 8006466:	e7e6      	b.n	8006436 <_printf_i+0x182>
 8006468:	4615      	mov	r5, r2
 800646a:	e7bb      	b.n	80063e4 <_printf_i+0x130>
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	6826      	ldr	r6, [r4, #0]
 8006470:	6961      	ldr	r1, [r4, #20]
 8006472:	1d18      	adds	r0, r3, #4
 8006474:	6028      	str	r0, [r5, #0]
 8006476:	0635      	lsls	r5, r6, #24
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	d501      	bpl.n	8006480 <_printf_i+0x1cc>
 800647c:	6019      	str	r1, [r3, #0]
 800647e:	e002      	b.n	8006486 <_printf_i+0x1d2>
 8006480:	0670      	lsls	r0, r6, #25
 8006482:	d5fb      	bpl.n	800647c <_printf_i+0x1c8>
 8006484:	8019      	strh	r1, [r3, #0]
 8006486:	2300      	movs	r3, #0
 8006488:	6123      	str	r3, [r4, #16]
 800648a:	4615      	mov	r5, r2
 800648c:	e7ba      	b.n	8006404 <_printf_i+0x150>
 800648e:	682b      	ldr	r3, [r5, #0]
 8006490:	1d1a      	adds	r2, r3, #4
 8006492:	602a      	str	r2, [r5, #0]
 8006494:	681d      	ldr	r5, [r3, #0]
 8006496:	6862      	ldr	r2, [r4, #4]
 8006498:	2100      	movs	r1, #0
 800649a:	4628      	mov	r0, r5
 800649c:	f7f9 fea0 	bl	80001e0 <memchr>
 80064a0:	b108      	cbz	r0, 80064a6 <_printf_i+0x1f2>
 80064a2:	1b40      	subs	r0, r0, r5
 80064a4:	6060      	str	r0, [r4, #4]
 80064a6:	6863      	ldr	r3, [r4, #4]
 80064a8:	6123      	str	r3, [r4, #16]
 80064aa:	2300      	movs	r3, #0
 80064ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064b0:	e7a8      	b.n	8006404 <_printf_i+0x150>
 80064b2:	6923      	ldr	r3, [r4, #16]
 80064b4:	462a      	mov	r2, r5
 80064b6:	4649      	mov	r1, r9
 80064b8:	4640      	mov	r0, r8
 80064ba:	47d0      	blx	sl
 80064bc:	3001      	adds	r0, #1
 80064be:	d0ab      	beq.n	8006418 <_printf_i+0x164>
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	079b      	lsls	r3, r3, #30
 80064c4:	d413      	bmi.n	80064ee <_printf_i+0x23a>
 80064c6:	68e0      	ldr	r0, [r4, #12]
 80064c8:	9b03      	ldr	r3, [sp, #12]
 80064ca:	4298      	cmp	r0, r3
 80064cc:	bfb8      	it	lt
 80064ce:	4618      	movlt	r0, r3
 80064d0:	e7a4      	b.n	800641c <_printf_i+0x168>
 80064d2:	2301      	movs	r3, #1
 80064d4:	4632      	mov	r2, r6
 80064d6:	4649      	mov	r1, r9
 80064d8:	4640      	mov	r0, r8
 80064da:	47d0      	blx	sl
 80064dc:	3001      	adds	r0, #1
 80064de:	d09b      	beq.n	8006418 <_printf_i+0x164>
 80064e0:	3501      	adds	r5, #1
 80064e2:	68e3      	ldr	r3, [r4, #12]
 80064e4:	9903      	ldr	r1, [sp, #12]
 80064e6:	1a5b      	subs	r3, r3, r1
 80064e8:	42ab      	cmp	r3, r5
 80064ea:	dcf2      	bgt.n	80064d2 <_printf_i+0x21e>
 80064ec:	e7eb      	b.n	80064c6 <_printf_i+0x212>
 80064ee:	2500      	movs	r5, #0
 80064f0:	f104 0619 	add.w	r6, r4, #25
 80064f4:	e7f5      	b.n	80064e2 <_printf_i+0x22e>
 80064f6:	bf00      	nop
 80064f8:	0800f511 	.word	0x0800f511
 80064fc:	0800f522 	.word	0x0800f522

08006500 <memmove>:
 8006500:	4288      	cmp	r0, r1
 8006502:	b510      	push	{r4, lr}
 8006504:	eb01 0402 	add.w	r4, r1, r2
 8006508:	d902      	bls.n	8006510 <memmove+0x10>
 800650a:	4284      	cmp	r4, r0
 800650c:	4623      	mov	r3, r4
 800650e:	d807      	bhi.n	8006520 <memmove+0x20>
 8006510:	1e43      	subs	r3, r0, #1
 8006512:	42a1      	cmp	r1, r4
 8006514:	d008      	beq.n	8006528 <memmove+0x28>
 8006516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800651a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800651e:	e7f8      	b.n	8006512 <memmove+0x12>
 8006520:	4402      	add	r2, r0
 8006522:	4601      	mov	r1, r0
 8006524:	428a      	cmp	r2, r1
 8006526:	d100      	bne.n	800652a <memmove+0x2a>
 8006528:	bd10      	pop	{r4, pc}
 800652a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800652e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006532:	e7f7      	b.n	8006524 <memmove+0x24>

08006534 <_free_r>:
 8006534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006536:	2900      	cmp	r1, #0
 8006538:	d044      	beq.n	80065c4 <_free_r+0x90>
 800653a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800653e:	9001      	str	r0, [sp, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	f1a1 0404 	sub.w	r4, r1, #4
 8006546:	bfb8      	it	lt
 8006548:	18e4      	addlt	r4, r4, r3
 800654a:	f000 f913 	bl	8006774 <__malloc_lock>
 800654e:	4a1e      	ldr	r2, [pc, #120]	; (80065c8 <_free_r+0x94>)
 8006550:	9801      	ldr	r0, [sp, #4]
 8006552:	6813      	ldr	r3, [r2, #0]
 8006554:	b933      	cbnz	r3, 8006564 <_free_r+0x30>
 8006556:	6063      	str	r3, [r4, #4]
 8006558:	6014      	str	r4, [r2, #0]
 800655a:	b003      	add	sp, #12
 800655c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006560:	f000 b90e 	b.w	8006780 <__malloc_unlock>
 8006564:	42a3      	cmp	r3, r4
 8006566:	d908      	bls.n	800657a <_free_r+0x46>
 8006568:	6825      	ldr	r5, [r4, #0]
 800656a:	1961      	adds	r1, r4, r5
 800656c:	428b      	cmp	r3, r1
 800656e:	bf01      	itttt	eq
 8006570:	6819      	ldreq	r1, [r3, #0]
 8006572:	685b      	ldreq	r3, [r3, #4]
 8006574:	1949      	addeq	r1, r1, r5
 8006576:	6021      	streq	r1, [r4, #0]
 8006578:	e7ed      	b.n	8006556 <_free_r+0x22>
 800657a:	461a      	mov	r2, r3
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	b10b      	cbz	r3, 8006584 <_free_r+0x50>
 8006580:	42a3      	cmp	r3, r4
 8006582:	d9fa      	bls.n	800657a <_free_r+0x46>
 8006584:	6811      	ldr	r1, [r2, #0]
 8006586:	1855      	adds	r5, r2, r1
 8006588:	42a5      	cmp	r5, r4
 800658a:	d10b      	bne.n	80065a4 <_free_r+0x70>
 800658c:	6824      	ldr	r4, [r4, #0]
 800658e:	4421      	add	r1, r4
 8006590:	1854      	adds	r4, r2, r1
 8006592:	42a3      	cmp	r3, r4
 8006594:	6011      	str	r1, [r2, #0]
 8006596:	d1e0      	bne.n	800655a <_free_r+0x26>
 8006598:	681c      	ldr	r4, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	6053      	str	r3, [r2, #4]
 800659e:	4421      	add	r1, r4
 80065a0:	6011      	str	r1, [r2, #0]
 80065a2:	e7da      	b.n	800655a <_free_r+0x26>
 80065a4:	d902      	bls.n	80065ac <_free_r+0x78>
 80065a6:	230c      	movs	r3, #12
 80065a8:	6003      	str	r3, [r0, #0]
 80065aa:	e7d6      	b.n	800655a <_free_r+0x26>
 80065ac:	6825      	ldr	r5, [r4, #0]
 80065ae:	1961      	adds	r1, r4, r5
 80065b0:	428b      	cmp	r3, r1
 80065b2:	bf04      	itt	eq
 80065b4:	6819      	ldreq	r1, [r3, #0]
 80065b6:	685b      	ldreq	r3, [r3, #4]
 80065b8:	6063      	str	r3, [r4, #4]
 80065ba:	bf04      	itt	eq
 80065bc:	1949      	addeq	r1, r1, r5
 80065be:	6021      	streq	r1, [r4, #0]
 80065c0:	6054      	str	r4, [r2, #4]
 80065c2:	e7ca      	b.n	800655a <_free_r+0x26>
 80065c4:	b003      	add	sp, #12
 80065c6:	bd30      	pop	{r4, r5, pc}
 80065c8:	2000e898 	.word	0x2000e898

080065cc <sbrk_aligned>:
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	4e0e      	ldr	r6, [pc, #56]	; (8006608 <sbrk_aligned+0x3c>)
 80065d0:	460c      	mov	r4, r1
 80065d2:	6831      	ldr	r1, [r6, #0]
 80065d4:	4605      	mov	r5, r0
 80065d6:	b911      	cbnz	r1, 80065de <sbrk_aligned+0x12>
 80065d8:	f000 f8bc 	bl	8006754 <_sbrk_r>
 80065dc:	6030      	str	r0, [r6, #0]
 80065de:	4621      	mov	r1, r4
 80065e0:	4628      	mov	r0, r5
 80065e2:	f000 f8b7 	bl	8006754 <_sbrk_r>
 80065e6:	1c43      	adds	r3, r0, #1
 80065e8:	d00a      	beq.n	8006600 <sbrk_aligned+0x34>
 80065ea:	1cc4      	adds	r4, r0, #3
 80065ec:	f024 0403 	bic.w	r4, r4, #3
 80065f0:	42a0      	cmp	r0, r4
 80065f2:	d007      	beq.n	8006604 <sbrk_aligned+0x38>
 80065f4:	1a21      	subs	r1, r4, r0
 80065f6:	4628      	mov	r0, r5
 80065f8:	f000 f8ac 	bl	8006754 <_sbrk_r>
 80065fc:	3001      	adds	r0, #1
 80065fe:	d101      	bne.n	8006604 <sbrk_aligned+0x38>
 8006600:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006604:	4620      	mov	r0, r4
 8006606:	bd70      	pop	{r4, r5, r6, pc}
 8006608:	2000e89c 	.word	0x2000e89c

0800660c <_malloc_r>:
 800660c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006610:	1ccd      	adds	r5, r1, #3
 8006612:	f025 0503 	bic.w	r5, r5, #3
 8006616:	3508      	adds	r5, #8
 8006618:	2d0c      	cmp	r5, #12
 800661a:	bf38      	it	cc
 800661c:	250c      	movcc	r5, #12
 800661e:	2d00      	cmp	r5, #0
 8006620:	4607      	mov	r7, r0
 8006622:	db01      	blt.n	8006628 <_malloc_r+0x1c>
 8006624:	42a9      	cmp	r1, r5
 8006626:	d905      	bls.n	8006634 <_malloc_r+0x28>
 8006628:	230c      	movs	r3, #12
 800662a:	603b      	str	r3, [r7, #0]
 800662c:	2600      	movs	r6, #0
 800662e:	4630      	mov	r0, r6
 8006630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006634:	4e2e      	ldr	r6, [pc, #184]	; (80066f0 <_malloc_r+0xe4>)
 8006636:	f000 f89d 	bl	8006774 <__malloc_lock>
 800663a:	6833      	ldr	r3, [r6, #0]
 800663c:	461c      	mov	r4, r3
 800663e:	bb34      	cbnz	r4, 800668e <_malloc_r+0x82>
 8006640:	4629      	mov	r1, r5
 8006642:	4638      	mov	r0, r7
 8006644:	f7ff ffc2 	bl	80065cc <sbrk_aligned>
 8006648:	1c43      	adds	r3, r0, #1
 800664a:	4604      	mov	r4, r0
 800664c:	d14d      	bne.n	80066ea <_malloc_r+0xde>
 800664e:	6834      	ldr	r4, [r6, #0]
 8006650:	4626      	mov	r6, r4
 8006652:	2e00      	cmp	r6, #0
 8006654:	d140      	bne.n	80066d8 <_malloc_r+0xcc>
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	4631      	mov	r1, r6
 800665a:	4638      	mov	r0, r7
 800665c:	eb04 0803 	add.w	r8, r4, r3
 8006660:	f000 f878 	bl	8006754 <_sbrk_r>
 8006664:	4580      	cmp	r8, r0
 8006666:	d13a      	bne.n	80066de <_malloc_r+0xd2>
 8006668:	6821      	ldr	r1, [r4, #0]
 800666a:	3503      	adds	r5, #3
 800666c:	1a6d      	subs	r5, r5, r1
 800666e:	f025 0503 	bic.w	r5, r5, #3
 8006672:	3508      	adds	r5, #8
 8006674:	2d0c      	cmp	r5, #12
 8006676:	bf38      	it	cc
 8006678:	250c      	movcc	r5, #12
 800667a:	4629      	mov	r1, r5
 800667c:	4638      	mov	r0, r7
 800667e:	f7ff ffa5 	bl	80065cc <sbrk_aligned>
 8006682:	3001      	adds	r0, #1
 8006684:	d02b      	beq.n	80066de <_malloc_r+0xd2>
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	442b      	add	r3, r5
 800668a:	6023      	str	r3, [r4, #0]
 800668c:	e00e      	b.n	80066ac <_malloc_r+0xa0>
 800668e:	6822      	ldr	r2, [r4, #0]
 8006690:	1b52      	subs	r2, r2, r5
 8006692:	d41e      	bmi.n	80066d2 <_malloc_r+0xc6>
 8006694:	2a0b      	cmp	r2, #11
 8006696:	d916      	bls.n	80066c6 <_malloc_r+0xba>
 8006698:	1961      	adds	r1, r4, r5
 800669a:	42a3      	cmp	r3, r4
 800669c:	6025      	str	r5, [r4, #0]
 800669e:	bf18      	it	ne
 80066a0:	6059      	strne	r1, [r3, #4]
 80066a2:	6863      	ldr	r3, [r4, #4]
 80066a4:	bf08      	it	eq
 80066a6:	6031      	streq	r1, [r6, #0]
 80066a8:	5162      	str	r2, [r4, r5]
 80066aa:	604b      	str	r3, [r1, #4]
 80066ac:	4638      	mov	r0, r7
 80066ae:	f104 060b 	add.w	r6, r4, #11
 80066b2:	f000 f865 	bl	8006780 <__malloc_unlock>
 80066b6:	f026 0607 	bic.w	r6, r6, #7
 80066ba:	1d23      	adds	r3, r4, #4
 80066bc:	1af2      	subs	r2, r6, r3
 80066be:	d0b6      	beq.n	800662e <_malloc_r+0x22>
 80066c0:	1b9b      	subs	r3, r3, r6
 80066c2:	50a3      	str	r3, [r4, r2]
 80066c4:	e7b3      	b.n	800662e <_malloc_r+0x22>
 80066c6:	6862      	ldr	r2, [r4, #4]
 80066c8:	42a3      	cmp	r3, r4
 80066ca:	bf0c      	ite	eq
 80066cc:	6032      	streq	r2, [r6, #0]
 80066ce:	605a      	strne	r2, [r3, #4]
 80066d0:	e7ec      	b.n	80066ac <_malloc_r+0xa0>
 80066d2:	4623      	mov	r3, r4
 80066d4:	6864      	ldr	r4, [r4, #4]
 80066d6:	e7b2      	b.n	800663e <_malloc_r+0x32>
 80066d8:	4634      	mov	r4, r6
 80066da:	6876      	ldr	r6, [r6, #4]
 80066dc:	e7b9      	b.n	8006652 <_malloc_r+0x46>
 80066de:	230c      	movs	r3, #12
 80066e0:	603b      	str	r3, [r7, #0]
 80066e2:	4638      	mov	r0, r7
 80066e4:	f000 f84c 	bl	8006780 <__malloc_unlock>
 80066e8:	e7a1      	b.n	800662e <_malloc_r+0x22>
 80066ea:	6025      	str	r5, [r4, #0]
 80066ec:	e7de      	b.n	80066ac <_malloc_r+0xa0>
 80066ee:	bf00      	nop
 80066f0:	2000e898 	.word	0x2000e898

080066f4 <_realloc_r>:
 80066f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066f8:	4680      	mov	r8, r0
 80066fa:	4614      	mov	r4, r2
 80066fc:	460e      	mov	r6, r1
 80066fe:	b921      	cbnz	r1, 800670a <_realloc_r+0x16>
 8006700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006704:	4611      	mov	r1, r2
 8006706:	f7ff bf81 	b.w	800660c <_malloc_r>
 800670a:	b92a      	cbnz	r2, 8006718 <_realloc_r+0x24>
 800670c:	f7ff ff12 	bl	8006534 <_free_r>
 8006710:	4625      	mov	r5, r4
 8006712:	4628      	mov	r0, r5
 8006714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006718:	f000 f838 	bl	800678c <_malloc_usable_size_r>
 800671c:	4284      	cmp	r4, r0
 800671e:	4607      	mov	r7, r0
 8006720:	d802      	bhi.n	8006728 <_realloc_r+0x34>
 8006722:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006726:	d812      	bhi.n	800674e <_realloc_r+0x5a>
 8006728:	4621      	mov	r1, r4
 800672a:	4640      	mov	r0, r8
 800672c:	f7ff ff6e 	bl	800660c <_malloc_r>
 8006730:	4605      	mov	r5, r0
 8006732:	2800      	cmp	r0, #0
 8006734:	d0ed      	beq.n	8006712 <_realloc_r+0x1e>
 8006736:	42bc      	cmp	r4, r7
 8006738:	4622      	mov	r2, r4
 800673a:	4631      	mov	r1, r6
 800673c:	bf28      	it	cs
 800673e:	463a      	movcs	r2, r7
 8006740:	f7ff fba4 	bl	8005e8c <memcpy>
 8006744:	4631      	mov	r1, r6
 8006746:	4640      	mov	r0, r8
 8006748:	f7ff fef4 	bl	8006534 <_free_r>
 800674c:	e7e1      	b.n	8006712 <_realloc_r+0x1e>
 800674e:	4635      	mov	r5, r6
 8006750:	e7df      	b.n	8006712 <_realloc_r+0x1e>
	...

08006754 <_sbrk_r>:
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	4d06      	ldr	r5, [pc, #24]	; (8006770 <_sbrk_r+0x1c>)
 8006758:	2300      	movs	r3, #0
 800675a:	4604      	mov	r4, r0
 800675c:	4608      	mov	r0, r1
 800675e:	602b      	str	r3, [r5, #0]
 8006760:	f7fb fdb6 	bl	80022d0 <_sbrk>
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	d102      	bne.n	800676e <_sbrk_r+0x1a>
 8006768:	682b      	ldr	r3, [r5, #0]
 800676a:	b103      	cbz	r3, 800676e <_sbrk_r+0x1a>
 800676c:	6023      	str	r3, [r4, #0]
 800676e:	bd38      	pop	{r3, r4, r5, pc}
 8006770:	2000e8a0 	.word	0x2000e8a0

08006774 <__malloc_lock>:
 8006774:	4801      	ldr	r0, [pc, #4]	; (800677c <__malloc_lock+0x8>)
 8006776:	f000 b811 	b.w	800679c <__retarget_lock_acquire_recursive>
 800677a:	bf00      	nop
 800677c:	2000e8a4 	.word	0x2000e8a4

08006780 <__malloc_unlock>:
 8006780:	4801      	ldr	r0, [pc, #4]	; (8006788 <__malloc_unlock+0x8>)
 8006782:	f000 b80c 	b.w	800679e <__retarget_lock_release_recursive>
 8006786:	bf00      	nop
 8006788:	2000e8a4 	.word	0x2000e8a4

0800678c <_malloc_usable_size_r>:
 800678c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006790:	1f18      	subs	r0, r3, #4
 8006792:	2b00      	cmp	r3, #0
 8006794:	bfbc      	itt	lt
 8006796:	580b      	ldrlt	r3, [r1, r0]
 8006798:	18c0      	addlt	r0, r0, r3
 800679a:	4770      	bx	lr

0800679c <__retarget_lock_acquire_recursive>:
 800679c:	4770      	bx	lr

0800679e <__retarget_lock_release_recursive>:
 800679e:	4770      	bx	lr

080067a0 <_init>:
 80067a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a2:	bf00      	nop
 80067a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067a6:	bc08      	pop	{r3}
 80067a8:	469e      	mov	lr, r3
 80067aa:	4770      	bx	lr

080067ac <_fini>:
 80067ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ae:	bf00      	nop
 80067b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b2:	bc08      	pop	{r3}
 80067b4:	469e      	mov	lr, r3
 80067b6:	4770      	bx	lr
